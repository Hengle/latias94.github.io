{"java":"class Solution {\n    public String longestWord(String[] words) {\n        Tries tries = new Tries();\n        for (String word : words) {\n            tries.insert(word);\n        }\n        return tries.findLongestWord();\n    }\n    \n    class Tries {\n        private TrieNode root;\n\n        public Tries() {\n            root = new TrieNode();\n        }\n\n        public void insert(String word) {\n            TrieNode node = root;\n            for (int i = 0; i < word.length(); i++) {\n                int index = word.charAt(i) - 'a';\n                if (node.children[index] == null) {\n                    node.children[index] = new TrieNode();\n                }\n                node = node.children[index];\n            }\n            node.isWord = true;\n            node.word = word;\n        }\n\n        public String findLongestWord() {\n            String result = null;\n            Queue<TrieNode> queue = new LinkedList<>();\n            queue.add(root);\n            while (!queue.isEmpty()) {\n                int size = queue.size();\n                for (int i = 0; i < size; i++) {\n                    TrieNode node = queue.poll();\n                    // 后往前遍历 同长度下字符索引越小越优先\n                    for (int j = 25; j >= 0; j--) {\n                        if (node.children[j] != null && node.children[j].isWord) {\n                            result = node.children[j].word;\n                            queue.add(node.children[j]);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n    }\n\n    class TrieNode {\n        TrieNode[] children;\n        boolean isWord;\n        String word;\n\n        public TrieNode() {\n            children = new TrieNode[26];\n        }\n    }\n}"}