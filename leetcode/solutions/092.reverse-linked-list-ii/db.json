{"java":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        int count = 0;\n        ListNode helper = head;\n        Stack<ListNode> stack = new Stack<>();\n        ListNode prehead = new ListNode(-1);\n        ListNode helper1 = prehead;\n        while (helper != null) {\n            count++;\n            if (count < m) {\n                prehead.next = new ListNode(helper.val);\n                prehead = prehead.next;\n                helper = helper.next;\n            } else if (m <= count && count <= n) {\n                stack.push(helper);\n                helper = helper.next;\n            } else {\n                break;\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            prehead.next = new ListNode(stack.pop().val);\n            prehead = prehead.next;\n        }\n\n        while (helper != null) {\n            prehead.next = new ListNode(helper.val);\n            helper = helper.next;\n            prehead = prehead.next;\n        }\n\n        return helper1.next;\n    }\n}"}