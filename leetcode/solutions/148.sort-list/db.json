{"java":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n        public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) return head;\n        ListNode head1 = head;\n        ListNode head2 = partition(head);\n        head1 = sortList(head1);\n        head2 = sortList(head2);\n        return mergeSort(head1, head2);\n    }\n\n    public ListNode mergeSort(ListNode node1, ListNode node2) {\n        ListNode head = new ListNode(-1);\n        ListNode tail = head;\n        while (node1 != null && node2 != null) {\n            if (node1.val <= node2.val) {\n                tail.next = node1;\n                node1 = node1.next;\n            } else {\n                tail.next = node2;\n                node2 = node2.next;\n            }\n            tail = tail.next;\n            tail.next = null;\n        }\n        // node1 还没迭代完\n        if (node1 != null) {\n            tail.next = node1;\n        }\n        if (node2 != null) {\n            tail.next = node2;\n        }\n        return head.next;\n    }\n\n    // 切分\n    public ListNode partition(ListNode node) {\n        ListNode fast = node.next;\n        ListNode slow = node.next;\n        ListNode header = node;\n        \n        while (true) {\n            if (fast != null) fast = fast.next;\n            else break;\n            if (fast != null) fast = fast.next;\n            else break;\n            header = slow;\n            slow = slow.next;\n        }\n        // 切分\n        header.next = null;\n        return slow;\n    }\n}"}