<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萤火之森</title>
  
  <subtitle>知识传承之地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankorz.com/"/>
  <updated>2019-07-14T10:46:27.401Z</updated>
  <id>http://frankorz.com/</id>
  
  <author>
    <name>猫冬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洞明 Unity ECS 基础概念</title>
    <link href="http://frankorz.com/2019/07/14/clarify-ecs-basic-concept/"/>
    <id>http://frankorz.com/2019/07/14/clarify-ecs-basic-concept/</id>
    <published>2019-07-14T12:13:00.000Z</published>
    <updated>2019-07-14T10:46:27.401Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>虽然网络上已经有不少 ECS 文档的汉化，但自己读官方文档的时候也会产生不少疑问，为此通过查询各种资料，写下本文。</p><p>本文从 ECS 官方文档出发，加之内存布局结构的讲解，力求读者能够和博主一起吃透 ECS 中的基本概念。同时建议读者可以先读读我的上一篇博文<a href="http://frankorz.com/2019/05/07/simple-talk-unity-dots/#Entity-Component-System">《Unity DOTS 走马观花》</a>的 ECS 部分，本文不再复述前文已经提到过的相关概念。</p><h1 id="ECS-与-Job-System"><a href="#ECS-与-Job-System" class="headerlink" title="ECS 与 Job System"></a>ECS 与 Job System</h1><p>我认为有必要重申其两者的关系。</p><ul><li>Job System 能帮我们方便地写出线程安全的多线程代码，其中每个任务单元称为 Job。</li><li>ECS，又称实体组件系统。与传统的面向对象编程相比，ECS 是一种基于数据设计的编程模式。<a href="http://frankorz.com/2019/05/07/simple-talk-unity-dots/#Entity-Component-System">前文</a>从内存结构分析了 OOP 模式的缺点，也提到了 ECS 是怎么样基于数据的设计内存结构的。</li></ul><p>Job System 是 Unity 自带的库，而要使用 ECS 我们需要从 Package Manager 中安装 “Entities” 预览包。这两者虽说完全是两种东西，但是他们能很好地相辅相成：ECS 保证数据线性地排列在内存中，这样通过更高效的数据读取，能有效提升 Job 的执行速度，同时也给了 Burst 编译器更多优化的机会。  </p><a id="more"></a><h1 id="Entities（实体）"><a href="#Entities（实体）" class="headerlink" title="Entities（实体）"></a>Entities（实体）</h1><p>在 <code>World</code>中， <code>EntityManager</code> 管理所有实体和组件。</p><p>当你需要创建实体和为其添加组件的时候， <code>EntityManager</code>会一直跟踪所有独立的组件组合（也就是原型 Archetype）。</p><h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><p>最简单的方法就是在编辑器直接挂一个 <code>ConvertToEntity</code> 脚本，在运行时中把 GameObject 转成实体。</p><p><img src="https://i.loli.net/2019/07/14/5d2afb77ee64e53003.png" alt="在编辑器中挂脚本，GameObject 会在运行时中转成实体"></p><p>在编辑器中挂脚本，GameObject 会在运行时中转成实体</p><p>脚本中，你也可以创建系统（System）并在一个 Job 中创建多个实体，也可以通过 <code>EntityManager.CreateEntity</code> 方法来一次生成大量 Entity。</p><p>我们可以通过下面四种方法来创建一个实体：</p><ul><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.ComponentType.html" target="_blank" rel="noopener">ComponentType</a> 数组创建一个带组件的实体</li><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityArchetype.html" target="_blank" rel="noopener">EntityArchetype</a> 创建一个带组件的实体</li><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html#Unity_Entities_EntityManager_Instantiate_Unity_Entities_Entity_" target="_blank" rel="noopener">Instantiate</a> 复制一个已存在的实体和其当前的数据，</li><li>创建一个空的实体然后再为其添加组件</li></ul><p>也可以通过下面的方法一次性创建多个实体：</p><ul><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html#Unity_Entities_EntityManager_CreateEntity" target="_blank" rel="noopener">CreateEntity</a> 来创建相同原型（archetype）的实体并填满一个 NativeArray （要多少实体就提前设定好 NativeArray 的长度）</li><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html#Unity_Entities_EntityManager_Instantiate_Unity_Entities_Entity_" target="_blank" rel="noopener">Instantiate</a> 来复制一个已存在的实体并填满一个 NativeArray</li><li>用 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html#Unity_Entities_EntityManager_CreateChunk_" target="_blank" rel="noopener">CreateChunk</a> 来显式创建内存块（Chunks），并且填入自定数量的给定原型的实体</li></ul><h2 id="增加和移除组件"><a href="#增加和移除组件" class="headerlink" title="增加和移除组件"></a>增加和移除组件</h2><p>实体被创建之后，我们可以增加和移除其组件。当我们这样做的时候，相关联的原型（Archetype）将会被改变， <code>EntityManager</code> 也需要改变内存布局，将受影响的数据移到新的内存块（new Chunk of memory），同时也会压缩原来内存块中的组件数组。</p><p>对实体的修改会带来内存结构的改变。</p><p>实体的修改包括：</p><ul><li>增加和移除组件</li><li>改变 <code>SharedComponentData</code>的值</li><li>增加和删除实体</li></ul><p>这些操作都不能放到 Job 中执行，因为这些都会改变内存中的数据结构。因此我们需要用到命令（Commands）来保存这些操作，将这些操作存到 <code>EntityCommandBuffer</code> 中，然后在 Job 完成后再依次执行 <code>EntityCommandBuffer</code> 中储存的操作。</p><h1 id="World（世界）"><a href="#World（世界）" class="headerlink" title="World（世界）"></a>World（世界）</h1><p>每一个 <code>World</code> 包含一个 <code>EntityManager</code> 和一系列的 <code>ComponentSystem</code>。一个世界中的实体、原型、系统等都不能被另外一个世界访问到。你可以创建很多 <code>World</code> ，例如通常我们会使用或创建一个负责主要逻辑运算的 simulation <code>World</code> 和负责图形渲染的 rendering <code>World</code> 或 presentation <code>World</code>。</p><p>当我们点击运行按钮进入 <strong>Play Mode</strong> 时，Unity 会默认创建一个 <code>World</code>，并且增加项目中所有可用的 <code>ComponentSystem</code>。我们也可以关闭默认的 <code>World</code> 从而自己创建一个。</p><ul><li><strong>Default World creation code</strong> (see file: <em>Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/DefaultWorldInitialization.cs</em>)</li><li><strong>Automatic bootstrap entry point</strong> (see file:<em>Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs</em>)</li></ul><h1 id="Components（组件）"><a href="#Components（组件）" class="headerlink" title="Components（组件）"></a>Components（组件）</h1><p>ECS 中的组件是一种结构，可以通过实现下列接口来实现：</p><ul><li>IComponentData</li><li>ISharedComponentData</li><li>ISystemStateComponentData</li><li>ISharedSystemStateComponentData</li></ul><p><code>EntityManager</code> 会组织所有实体中独立的的组件组合成不同的<strong>原型（Archetypes）</strong>，还会将拥有同样原型的所有实体的组件（数据）储存到一起，都放到同一个<strong>内存块（Chunks）</strong>中。</p><p>如果你为一个实体新增了一个组件，那么其原型就改变了，实体的数据也需要从原来的内存块移到新的内存块，因为只有相同原型的实体数据才会放到相同的内存块中。</p><p>一个原型由很多个内存块组成，这些内存块中存的都是拥有相同原型的实体。</p><p><img src="https://i.loli.net/2019/05/07/5cd16af8d2324.png" alt></p><h2 id="General-Purpose-Component（普通用途组件）"><a href="#General-Purpose-Component（普通用途组件）" class="headerlink" title="General Purpose Component（普通用途组件）"></a>General Purpose Component（普通用途组件）</h2><p>这里指的是最普通的组件，可以通过实现 <code>IComponentData</code> 接口来创建。</p><p><code>IComponentData</code> 不存储行为，只储存数据。<code>IComponentData</code> 还是一个结构体（Struct）而不是一个类（Class），这意味着被复制时默认是通过值而不是通过引用。</p><p>通常我们会用下面的<strong>模式</strong>来修改组件数据：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transform = <span class="keyword">group</span>.transform[index]; <span class="comment">// Read</span></span><br><span class="line">    </span><br><span class="line">transform.heading = playerInput.move; <span class="comment">// Modify</span></span><br><span class="line">transform.position += deltaTime * playerInput.move * settings.playerMoveSpeed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span>.transform[index] = transform; <span class="comment">// Write</span></span><br></pre></td></tr></table></figure><p><code>IComponentData</code> 结构不包含托管对象（managed objects）的引用，所有<code>IComponentData</code> 被存在无垃圾回收的<a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/chunk_iteration.html" target="_blank" rel="noopener">块内存（chunk memory）</a>中。</p><p>你可能还听过一种组件是不包含数据、只用来标记的“Tag”组件（Tag component），其用途也很广，例如我们可以轻易地给实体加标记来区分玩家和敌人，这样系统中能更容易通过组件的类型来筛选我们想要的实体。如果我们给一个内存块（Chunk）中的所有实体都添加”Tag“组件的话，只有内存块中对应的原型会修改，不添加数据，因此官方也推荐利用好”Tag“组件。</p><p>See file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs.</p><h2 id="Shared-components（共享组件）"><a href="#Shared-components（共享组件）" class="headerlink" title="Shared components（共享组件）"></a>Shared components（共享组件）</h2><p>Shared components 是一种特殊的组件，你可以把某些特殊的需要共享的值放到 shared component 中，从而在实体中与其他组件划分开。例如有时候我们的实体需要共享一套材质，我们可以为需要共享的材质创建 <code>Rendering.RenderMesh</code>，再放到 shared components 中。原型中也可以定义 shared components，这一点和其他组件是一样的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> RenderMesh : ISharedComponentData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Mesh                 mesh;</span><br><span class="line">    <span class="keyword">public</span> Material             material;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ShadowCastingMode    castShadows;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span>                 receiveShadows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你为一个实体添加一个 shared components 时， <code>EntityManager</code> 会把所有带有同样 shared components 的实体放到一个同样的内存块中（Chunks）。shared components 允许我们的系统去一并处理相似的（有同样 shared components 的）实体。</p><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="https://i.loli.net/2019/07/13/5d295d398f62598876.png" alt></p><p>每个内存块（Chunk）会有一个存放 shared components 索引的数组。这句话包含了几个要点：</p><ol><li>对于实体来说，有同样 <code>SharedComponentData</code> 的实体会被一起放到同样的内存块（Chunk）中。</li><li>如果我们有两个存储在同样的内存块中的两个实体，它们有同样的 <code>SharedComponentData</code> 类型和值。我们修改其中一个实体的 <code>SharedComponentData</code> 的值，这样会导致这个实体会被移动到一个新的内存块中，因为一个内存块共享同一个数组的 <code>SharedComponentData</code> 索引。事实上，从一个实体中增加或者移除一个组件，或者改变 shared components 的值都会导致这种操作的发生。</li><li>其索引存储在内存块而非实体中，因此 <code>SharedComponentData</code> 对实体来说是低开销的。</li><li>因为内存块只需要存其索引，<code>SharedComponentData</code> 的内存消耗几乎可以忽略不计。</li></ol><p>因为上面的第二个要点，我们不能滥用 shared components。滥用 shared components 将让 Unity 不能利用好内存块（Chunk），因此我们要避免添加不必要的数据或修改数据到 shared components 中。我们可以通过 Entity Debugger 来监测内存块的利用。</p><p><img src="https://i.loli.net/2019/07/13/5d295b6d78b7f51832.png" alt></p><p>拿上一段 RenderMesh 的例子来说，共享材质会更有效率，因为 shared components 有其自己的 <code>manager</code> 和哈希表。其中 <code>manager</code> 带有一个存储 shared components 数据的自由列表（<a href="https://zh.wikipedia.org/wiki/自由表" target="_blank" rel="noopener">freelist</a>），哈希表可以快速地找到相应的值。内存块里面存的是索引数组，需要找数据的时候就会从 Shared Component Manager 中找。</p><h3 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h3><ul><li><code>EntityQuery</code> 可以迭代所有拥有相同 <code>SharedComponentData</code> 的实体</li><li>我们可以用 <code>EntityQuery.SetFilter()</code> 来迭代所有拥有某个特定 <code>SharedComponentData</code> 的实体。这种操作开销十分低，因为 <code>SetFilter</code> 内部筛选的只是 int 的索引。前面说了每个内存块都有一个<code>SharedComponentData</code> 索引数组，因此对于每个内存块来说，筛选（filtering）的消耗都是可以忽略不计的。</li><li>怎么样获取 <code>SharedComponentData</code> 的值呢？<code>EntityManager.GetAllUniqueSharedComponentData&lt;T&gt;</code> 可以得到在存活的实体中（alive entities）的所有的泛型 T 类型的<code>SharedComponentData</code> 值，结果以参数中的列表返回，你也可以通过其重载的方法获得所有值的索引。其他获取值的方法可以参考 /Packages/com.unity.entities/Unity.Entities/EntityManagerAccessComponentData.cs。</li><li><code>SharedComponentData</code> 是自动引用计数的，例如在没有任何内存块拥有某个<code>SharedComponentData</code> 索引的时候，引用计数会置零，从而知道要删除<code>SharedComponentData</code> 的数据 。这一点就能看出其在 ECS 的世界中是非常独特的存在，想要深入了解可以看这篇文章<a href="https://gametorrahod.com/everything-about-isharedcomponentdata/" target="_blank" rel="noopener">《Everything about ISharedComponentData》</a>。</li><li><code>SharedComponentData</code> 应该尽量不去更改，因为更改 <code>SharedComponentData</code> 会导致实体的组件数据需要复制到其他的内存块中。</li></ul><p>你也可以读读这篇更深入的文章<a href="https://gametorrahod.com/everything-about-isharedcomponentdata/" target="_blank" rel="noopener">《Everything about ISharedComponentData》</a>。</p><h2 id="System-state-components（系统状态组件）"><a href="#System-state-components（系统状态组件）" class="headerlink" title="System state components（系统状态组件）"></a>System state components（系统状态组件）</h2><p><code>SystemStateComponentData</code> 允许你跟踪系统（System）的资源，并允许你合适地创建和删除某些资源，这些过程中不依赖独立的回调（individual callback）。</p><blockquote><p>假设有一个网络同步 System State，其监控一个 Component A 的同步，则我只需要定义一个 SystemStateComponent SA。当 Entity [有 A，无 SA] 时，表示 A 刚添加，此时添加 SA。等到 Entity [无 A，有 SA] 时,表示 A 被删除（尝试销毁Entity 时也会删除 A）。<br><a href="https://zhuanlan.zhihu.com/p/51289405" target="_blank" rel="noopener">《浅入浅出Unity ECS》</a> BenzzZX</p></blockquote><p><code>SystemStateComponentData</code>  和 <code>SystemStateSharedComponentData</code> 这两个类型与 <code>ComponentData</code> 和 <code>SharedComponentData</code> 十分相似，不同的是前者两个类型都是系统级别的，不会在实体删除的时候被删除。</p><h3 id="Motivation（诱因）"><a href="#Motivation（诱因）" class="headerlink" title="Motivation（诱因）"></a>Motivation（诱因）</h3><p>System state components 有这样特殊的行为，是因为：</p><ul><li>系统可能需要保持一个基于 <code>ComponentData</code> 的内部状态。例如已经被分配的资源。</li><li>系统需要通过值来管理这些状态，也需要管理其他系统所造成的的状态改变。例如在组件中的值改变的时候，或者在相关组件被添加或者被删除的时候。</li><li>“没有回调”是 ECS 设计规则的重要元素。</li></ul><h3 id="Concept（概念）"><a href="#Concept（概念）" class="headerlink" title="Concept（概念）"></a>Concept（概念）</h3><p><code>SystemStateComponentData</code> 普遍用法是镜像一个用户组件，并提供内部状态。</p><p>上面引用的网络同步的例子中，A 就是用户分配的 <code>ComponentData</code>，SA 就是系统分配的 <code>SystemComponentData</code>。</p><p>下面以 FooComponent （<code>ComponentData</code>）和 FooStateComponent（<code>SystemComponentData</code>）做主要用途的示例。前两个用途已经在前面的网络同步例子中呈现过。</p><h4 id="检测组件的添加"><a href="#检测组件的添加" class="headerlink" title="检测组件的添加"></a>检测组件的添加</h4><p>如果用户添加 FooComponent 时，FooStateComponent 还不存在。FooSystem 会在 update 中查询，如果实体只有 FooComponent 而没有 FooStateComponent,，则可以判断这个实体是新添加的。这时候 FooSystem 会加上 FooStateComponent 组件和其他需要的内部状态。</p><h4 id="检测组件的删除"><a href="#检测组件的删除" class="headerlink" title="检测组件的删除"></a>检测组件的删除</h4><p>如果用户删除 FooComponent 后，FooStateComponent 仍然存在。FooSystem 会在 update 中查询，如果实体没有 FooComponent 而有 FooStateComponent,，则可以判断 FooComponent 已经被删除了。这时候 FooSystem 会给删除 FooStateComponent 组件和修改其他需要的内部状态。</p><h4 id="监测实体的删除"><a href="#监测实体的删除" class="headerlink" title="监测实体的删除"></a>监测实体的删除</h4><p>通常 <code>DestroyEntity</code> 这个方法可以用来：</p><ol><li>找到所有由某个实体 ID 标记的所有组件</li><li>删除那些组件</li><li>回收实体 ID 以作重用</li></ol><p>然而，<code>DestroyEntity</code> 无法删除 <code>SystemStateComponentData</code> 。</p><p>在你删除实体时，<code>EntityManager</code> <strong>不会</strong>移除任何 system state components，在它们没被删除的时候，<code>EntityManager</code> 也不会回收其实体的 ID 。这样允许系统（System）在一个实体被删除的时候，去整理内部的状态（internal state），也能清理关联着实体 ID 的相关的资源和状态。实体 ID 只会在所有 <code>SystemStateComponentData</code> 被删除的时候才被重用。</p><h2 id="Dynamic-Buffers（动态缓冲）"><a href="#Dynamic-Buffers（动态缓冲）" class="headerlink" title="Dynamic Buffers（动态缓冲）"></a>Dynamic Buffers（动态缓冲）</h2><p><code>DynamicBuffer</code> 也是组件的一种类型，它能把一个变量内存空间大小的弹性的缓冲（variable-sized, “stretchy” buffer）和一个实体关联起来。它内部存储着一定数量的元素，但如果内部所占内存空间太大，会额外划分一个堆内存（heap memory）来存储。</p><p>动态缓冲的内存管理是全自动的。与 <code>DynamicBuffer</code> 关联的内存由 <code>EntityManager</code> 来管理，这样当<code>DynamicBuffer</code> 组件被删除的时候，所关联的堆内存空间也会自动释放掉。</p><p>上面的解释可能略显苍白，实际上 <code>DynamicBuffer</code> 可以看成一个有默认大小的数组，其行为和性能都和 <code>NativeArray</code>（在 ECS 中常用的无 GC 容器类型）差不多，但是存储数据超过默认大小也没关系，上文提到了会创建一个堆内存来存储多的数据。<code>DynamicBuffer</code> 可以通过 <code>ToNativeArray</code> 转成 <code>NativeArray</code> 类型，其中只是把指针重新指向缓冲，不会复制数据。</p><p><a href="http://tsubakit1.hateblo.jp/entry/2018/11/07/234502" target="_blank" rel="noopener">【Unity】ECSで配列を格納する Dynamic Buffers</a> 这篇文章中，作者用<code>DynamicBuffer</code> 来储存临近的圆柱体实体，从而更方便地与这些实体交互。</p><h3 id="定义缓冲"><a href="#定义缓冲" class="headerlink" title="定义缓冲"></a>定义缓冲</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8 指的是缓冲中默认元素的数量，例如这例子中存的是 Integer 类型</span></span><br><span class="line"><span class="comment">// 那么 8 integers （32 bytes）就是缓冲的默认大小</span></span><br><span class="line"><span class="comment">// 64 位机器中则占 16 bytes</span></span><br><span class="line">[<span class="meta">InternalBufferCapacity(8)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> MyBufferElement : IBufferElementData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 下面的隐式转换是可选的，这样可以少写些代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">int</span>(<span class="params">MyBufferElement e</span>) </span>&#123; <span class="keyword">return</span> e.Value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">MyBufferElement</span>(<span class="params"><span class="keyword">int</span> e</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> MyBufferElement &#123; Value = e &#125;; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个缓冲元素要存储的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有点奇怪，我们要定义缓冲中元素的结构而不是 <code>Buffer</code> 缓冲本身，其实这样在 ECS 中有两个好处：</p><ol><li>对于 <code>float3</code> 或者其他常见的值类型来说，这样能支持多种 <code>DynamicBuffer</code> 。我们可以重用已有的缓冲元素的结构，来定义其他的 <code>Buffers</code>。</li><li>我们可以将 <code>Buffer</code> 的元素类型包含在 <code>EntityArchetypes</code> 中，这样它会表现得像拥有一个组件一样。例如用 <code>AddBuffer()</code> 方法，可以通过 <code>entityManager.AddBuffer&lt;MyBufferElement&gt;(entity);</code> 来添加缓冲。</li></ol><h1 id="Systems（系统）"><a href="#Systems（系统）" class="headerlink" title="Systems（系统）"></a>Systems（系统）</h1><p>系统负责将组件数据从一个状态（state）通过逻辑处理到下一个状态。例如系统可以根据帧间隔和实体的速度，在当前帧更新所有移动实体的位置。</p><p>世界初始化后提供了三个系统组（system groups），分别是 initialization、simulation 和 presentation，它们会按顺序在每帧中执行。</p><p>系统组的概念会在下文提到。</p><h2 id="ComponentSystem（组件系统）"><a href="#ComponentSystem（组件系统）" class="headerlink" title="ComponentSystem（组件系统）"></a>ComponentSystem（组件系统）</h2><p><code>ComponentSystem</code> 通常指 ECS 实体组件系统中最基本的概念 System，它提供要执行的操作给实体。</p><p><code>ComponentSystem</code> 不能包含实体的数据。从传统的开发模式来看，它与旧的 Component 类有点相似，不过 <code>ComponentSystem</code>  <strong>只包含方法</strong>。</p><p>一个 <code>ComponentSystem</code>  负责更新所有<strong>匹配组件类型</strong>的实体。例如：系统可以通过条件过滤来获得所有拥有 Player 标记（Tag）和位置（Translation）的实体，再对获得的一系列 Player 实体进行处理。其中这种条件过滤由 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/component_group.html" target="_blank" rel="noopener">EntityQuery</a> 结构定义。</p><p><img src="https://i.loli.net/2019/07/13/5d29bcddd863174576.png" alt></p><p>要注意的是，<code>ComponentSystem</code> 只在<strong>主线程</strong>中执行。</p><p>我们可以通过继承 <code>ComponentSystem</code>  抽象类来定义我们的系统。</p><p>See file: /Packages/com.unity.entities/Unity.Entities/ComponentSystem.cs.</p><h2 id="JobComponentSystem（任务组件系统）"><a href="#JobComponentSystem（任务组件系统）" class="headerlink" title="JobComponentSystem（任务组件系统）"></a>JobComponentSystem（任务组件系统）</h2><p>前文提到了 ECS 能很好的和 JobSystem 一起合作，那么这个类型就是一个很好的例子。<code>ComponentSystem</code> 只在<strong>主线程</strong>中执行，而 <code>JobComponentSystem</code>  则能在<strong>多线程</strong>中执行，更能利用多核的优势。</p><p><img src="https://i.loli.net/2019/07/13/5d29bd129f0d058419.png" alt></p><h3 id="自动化的-Job-依赖管理"><a href="#自动化的-Job-依赖管理" class="headerlink" title="自动化的 Job 依赖管理"></a>自动化的 Job 依赖管理</h3><p><code>JobComponentSystem</code> 能帮我们自动管理依赖。原理很简单，来自不同系统的 Job 可以并行地读取相同类型的 <code>IComponentData</code>。如果其中一个 Job 正在写（write）数据，那么所有的 Job 就不能并行地执行，而是设定它们的依赖来安排执行顺序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RotationSpeedSystem</span> : <span class="title">JobComponentSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BurstCompile</span>]</span><br><span class="line">    <span class="keyword">struct</span> RotationSpeedRotation : IJobForEach&lt;Rotation, RotationSpeed&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> dt;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="keyword">ref</span> Rotation rotation, [ReadOnly]<span class="keyword">ref</span> RotationSpeed speed</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            rotation.<span class="keyword">value</span> = math.mul(math.normalize(rotation.<span class="keyword">value</span>), quaternion.axisAngle(math.up(), speed.speed * dt));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有对 Rotation 读/写的和对 RotationSpeed 进行写操作的</span></span><br><span class="line">        <span class="comment">// 已经排程的 Job 会自动放到 JobHandle 类型的依赖句柄 inputDeps 中</span></span><br><span class="line">        <span class="comment">// 在方法中，我们也需要把自己的 Job 依赖加进句柄中，并在方法末尾返回回来。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> JobHandle <span class="title">OnUpdate</span>(<span class="params">JobHandle inputDeps</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> job = <span class="keyword">new</span> RotationSpeedRotation() &#123; dt = Time.deltaTime &#125;;</span><br><span class="line">        <span class="keyword">return</span> job.Schedule(<span class="keyword">this</span>, inputDeps);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怎么运行的？"><a href="#怎么运行的？" class="headerlink" title="怎么运行的？"></a>怎么运行的？</h3><p>所有 Jobs 和系统会声明它们会读/写哪些组件类型（ComponentTypes）。JobComponentSystem 返回的 <a href="https://docs.unity3d.com/ScriptReference/Unity.Jobs.JobHandle.html" target="_blank" rel="noopener">JobHandle</a> 依赖句柄会自动注册到 <code>EntityManager</code> 中，以及所有包含读或写（reading or writing）信息的类型中。</p><p>这样如果一个系统对 Component A 进行写操作而之后另一个系统会对其进行读操作， <code>JobComponentSystem</code> 会查询读取（reading）的类型列表，然后传给你一个依赖。依赖包含第一个系统返回的 JobHandle，也就是包含“一个系统对 Component A 进行写操作”这个依赖，并将其作为第二个系统的参数传入。</p><p><code>JobComponentSystem</code> 简单地按照需求维护一个依赖链，这样不会对主线程造成影响。但是如果一个非 Job 的 <code>ComponentSystem</code> 要存取（access）相同的数据会怎么样呢？因为所有的存取都是声明好的，因此对于所有 <code>ComponentSystem</code> 需要进行存取的组件类型（component type）相关联的 Jobs，<code>ComponentSystem</code> 都会先自动完成这些相关的 Jobs，再在 <code>OnUpdate</code> 中调用依赖。</p><h3 id="依赖管理是保守的（conservative）和确定性的（deterministic）"><a href="#依赖管理是保守的（conservative）和确定性的（deterministic）" class="headerlink" title="依赖管理是保守的（conservative）和确定性的（deterministic）"></a>依赖管理是保守的（conservative）和确定性的（deterministic）</h3><p>依赖管理是保守的。 <code>ComponentSystem</code> 只是简单的跟踪所有使用的 <code>EntityQuery</code>，然后基于 <code>EntityQuery</code> 存储需要读或写的类型。</p><p>当在一个系统中分发多个 Jobs 的时候，依赖必须被发送到所有 Jobs 中，即使不同的 Jobs 可能需要更少的依赖。如果这里被证明有性能问题，那最好的解决方法是将系统一分为二。</p><p>依赖管理的手段也是保守的。它通过提供一个非常简单的 API 来允许确定性和正确的行为。</p><h3 id="Sync-points（同步点）"><a href="#Sync-points（同步点）" class="headerlink" title="Sync points（同步点）"></a>Sync points（同步点）</h3><p><img src="https://i.loli.net/2019/07/13/5d29bd3e4103143937.png" alt></p><p>所有结构性的变化都有确切的同步点（hard sync points）。 <code>CreateEntity</code>、<code>Instantiate</code>、 <code>Destroy</code>、 <code>AddComponent</code>、 <code>RemoveComponent</code>、<code>SetSharedComponentData</code> 都有一个确切的同步点。这代表所有通过 <code>JobComponentSystem</code> 排期的 Jobs 都会在创建实体之前自动完成。</p><p>例如，在一帧中间的 <code>EntityManager.CreateEntity</code> 可能带来较大的<strong>停滞</strong>，因为所有在世界中的提前排期好的 Jobs 都需要完成。</p><p>如果要在游戏中避免上面提到的停滞，可以使用 <code>EntityCommandBuffer</code>。</p><h3 id="Multiple-Worlds（多个世界）"><a href="#Multiple-Worlds（多个世界）" class="headerlink" title="Multiple Worlds（多个世界）"></a>Multiple Worlds（多个世界）</h3><p>所有世界（World）都有自己的 <code>EntityManager</code> ，因此 <code>JobHandle</code> 依赖句柄的集合都是分开的。一个世界中的确切的同步点（hard sync points）不会影响另外一个世界。因此，对于流式传输和程序化生成的场景，最后在一个世界中创建实体然后移到另一个世界作为一个事务（transaction）并在帧的开始执行。</p><p>对于上面的问题可以参考 <a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/exclusive_entity_transaction.html" target="_blank" rel="noopener">ExclusiveEntityTransaction</a> 和 System update order。</p><h2 id="Entity-Command-Buffer（实体命令缓冲）"><a href="#Entity-Command-Buffer（实体命令缓冲）" class="headerlink" title="Entity Command Buffer（实体命令缓冲）"></a>Entity Command Buffer（实体命令缓冲）</h2><p><code>EntityCommandBuffer</code> 解决了两个重要问题：</p><ol><li>在 Job 中无法访问 <code>EntityManager</code>，因此不能通过它来管理实体。</li><li>当你使用 <code>EntityManager</code> 时（例如创建一个实体），你会使所有已被注入的数组和 <code>EntityQuery</code> 无效。（这里注入的概念大概是指：系统中可以设定某个过滤条件，给过滤条件加上 <code>[inject]</code> 后，系统会在启动时为这个属性根据条件注入数据，这样就能得到我们想要的数据。会无效是因为你修改了实体数据，那么结果可能会发生改变。）</li></ol><p><code>EntityCommandBuffer</code> 的抽象允许我们去把需要对数据的更改（changes）排好队，这个更改可以来自主线程或者 Jobs，这样数据可以晚一点在主线程接受更改，从而将其和获取数据分离开来。</p><p>我们有两种方法来使用 <code>EntityCommandBuffer</code> ：</p><ul><li>在主线程 update 的 <code>ComponentSystem</code> 子类有一个 <code>PostUpdateCommands</code>（其本身是一个<code>EntityCommandBuffer</code> ） 可以用，我们只要简单地把变化按顺序放进去即可。在系统的 <code>Update</code> 调用之后，它会立刻自动在世界（World）中进行所有数据更改。这样可以防止数组数据无效，API 也和 <code>EntityManager</code> 很相似。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PostUpdateCommands.CreateEntity(TwoStickBootstrap.BasicEnemyArchetype);</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">new</span> Position2D &#123; Value = spawnPosition &#125;);</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">new</span> Heading2D &#123; Value = <span class="keyword">new</span> float2(<span class="number">0.0</span>f, <span class="number">-1.0</span>f) &#125;);</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">default</span>(Enemy));</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">new</span> Health &#123; Value = TwoStickBootstrap.Settings.enemyInitialHealth &#125;);</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">new</span> EnemyShootState &#123; Cooldown = <span class="number">0.5</span>f &#125;);</span><br><span class="line">PostUpdateCommands.SetComponent(<span class="keyword">new</span> MoveSpeed &#123; speed = TwoStickBootstrap.Settings.enemySpeed &#125;);</span><br><span class="line">PostUpdateCommands.AddSharedComponent(TwoStickBootstrap.EnemyLook);</span><br></pre></td></tr></table></figure><ul><li>对于 Jobs 来说，我们必须从主线程的 <code>EntityCommandBufferSystem</code> 中请求一个 <code>EntityCommandBuffer</code>，再传到 Job 里面让其调用。 每当 <code>EntityCommandBufferSystem</code>  进行 update，命令缓冲都会在主线程中重新把更改按创建的顺序执行一遍。这样允许我们集中进行内存管理，也保证了创建的实体和组件的确定性。</li></ul><h3 id="Entity-Command-Buffer-Systems（实体命令缓冲系统）"><a href="#Entity-Command-Buffer-Systems（实体命令缓冲系统）" class="headerlink" title="Entity Command Buffer Systems（实体命令缓冲系统）"></a>Entity Command Buffer Systems（实体命令缓冲系统）</h3><p>在一个系统组中，有一个 Entity Command Buffer Systems 运行在所有系统组之前，还有一个运行在所有系统组之后。比较建议的是我们可以用已存在的命令缓存系统（command buffer system）之一，而不用创建自己的，这样可以最小化同步点（sync point）。</p><h3 id="在-ParallelFor-jobs-中使用-EntityCommandBuffers"><a href="#在-ParallelFor-jobs-中使用-EntityCommandBuffers" class="headerlink" title="在 ParallelFor jobs 中使用 EntityCommandBuffers"></a>在 ParallelFor jobs 中使用 EntityCommandBuffers</h3><p>在 <a href="https://docs.unity3d.com/Manual/JobSystemParallelForJobs.html" target="_blank" rel="noopener">ParallelFor jobs</a> 使用 <code>EntityCommandBuffer</code> 存 <code>EntityManager</code> 的命令（command）时， <code>EntityCommandBuffer.Concurrent</code> 接口能保证线程安全和确定性的回放（deterministic playback）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See file: /Packages/com.unity.entities/Unity.Entities/EntityCommandBuffer.cs.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Entity <span class="title">CreateEntity</span>(<span class="params"><span class="keyword">int</span> jobIndex, EntityArchetype archetype = new EntityArchetype(</span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    m_Data-&gt;AddCreateCommand(chain, jobIndex, ECBCommand.CreateEntity,  index, archetype, kBatchableCommand);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Entity &#123;Index = index&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EntityCommandBuffer.Concurrent</code> 的公共方法都会接受一个 <code>jobIndex</code> 参数，这样能回放（playback）已经按顺序保存好的命令。 <code>jobIndex</code> 作为 ID 必须在每个 Job 中唯一。从性能考虑，<code>jobIndex</code> 必须是传进 <code>IJobParallelFor.Execute()</code> 的不断增长的 <code>index</code>。除非你真的知道你传的是啥，否则最安全的做法就是把参数中的 <code>index</code> 作为 <code>jobIndex</code> 传进去。用其他 <code>jobIndex</code> 可能会产生正确的结果，但是可能在某些情况下会有严重的性能影响。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Unity.Jobs</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JobProducerType(typeof (IJobParallelForExtensions.ParallelForJobStruct&lt;&gt;))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IJobParallelFor</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;para&gt;</span>Implement this method to perform work against a specific iteration index.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="index"&gt;</span>The index of the Parallel for loop at which to perform work.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="keyword">int</span> index</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System-Update-Order（系统更新顺序）"><a href="#System-Update-Order（系统更新顺序）" class="headerlink" title="System Update Order（系统更新顺序）"></a>System Update Order（系统更新顺序）</h2><p>组件系统组（Component System Groups）其实是为了解决世界（World）中各种 update 的顺序问题。一个系统组中包含了很多需要按照顺序一起 update 的组件系统（component systems），可以来指定它成员系统（member system）的 update 顺序。</p><p>和其他系统一样， <code>ComponentSystemGroup</code> 也继承自 <code>ComponentSystemBase</code> ，因此系统组可以当成一个大的“系统”，里面也用 <code>OnUpdate()</code> 函数来更新系统。它也可以被指定更新的顺序（在某个系统的之前或之后更新等，下文会讲），并且也可以嵌入到其他系统组中。</p><p>默认情况下， <code>ComponentSystemGroup</code> 的 <code>OnUpdate()</code> 方法会按照成员系统（member system）的顺序来调用他们的 <code>Update()</code>，如果成员系统也是一个系统组，那么这个系统组也会递归地更新它的成员系统。总体的系统遵循树的深度优先遍历。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See file: /Packages/com.unity.entities/Unity.Entities/ComponentSystemGroup.cs.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_systemSortDirty)</span><br><span class="line">        SortSystemUpdateList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> sys <span class="keyword">in</span> m_systemsToUpdate)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            sys.Update();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (World.QuitUpdate)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="System-Ordering-Attributes（系统顺序属性）"><a href="#System-Ordering-Attributes（系统顺序属性）" class="headerlink" title="System Ordering Attributes（系统顺序属性）"></a>System Ordering Attributes（系统顺序属性）</h3><ul><li><code>[UpdateInGroup]</code> 指定某个系统成为一个 <code>ComponentSystemGroup</code> 中的成员系统。如果没有用这个属性，这个系统会自动被添加到默认世界（default World）的 SimulationSystemGroup 中。</li><li><code>[UpdateBefore]</code> 和 <code>[UpdateAfter]</code> 指定系统相对于其他系统的更新顺序。这两个系统必须在同一个系统组（system group）中，前文说到系统组也可以嵌套，因此只要两个系统身处同一个根系统组即可。<ul><li>例子：如果 System A 在 Group A 中、System B 在 Group B 中，而且 Group A 和 Group B 都是 Group C 的成员系统，那么 Group A 和 Group B 的相对顺序也决定着 System A 和 System B 的相对顺序，这时候就不需要明确地用属性标明顺序了。</li></ul></li><li><code>[DisableAutoCreation]</code> 阻止系统从默认的世界初始化中创建或添加到世界中。这时候我们需要显式地创建和更新系统。然而我们也可以把这个系统和它的标记（tag）加到 <code>ComponentSystemGroup</code> 的更新列表中（update list），这样这个系统会正常地自动更新。</li></ul><h3 id="Default-System-Groups（默认系统组）"><a href="#Default-System-Groups（默认系统组）" class="headerlink" title="Default System Groups（默认系统组）"></a>Default System Groups（默认系统组）</h3><p>默认世界（default World）包含 <code>ComponentSystemGroup</code> 实例的层次结构（hierarchy）。在 Unity Player Loop 中会添加三个根层次（root-level）的系统组。</p><p>下图中打开 Entity Debugger，也能看到这三个系统组和其顺序。</p><p><img src="https://i.loli.net/2019/07/14/5d2ab0dd94fe244311.png" alt></p><p>这三个系统组各司其职， <code>InitializationSystemGroup</code> 做初始化工作， <code>SimulationSystemGroup</code> 在 Update 中做主要的逻辑运算， <code>PresentationSystemGroup</code> 做图形渲染工作。</p><p>如果勾选 “Show Full Player Loop” 项，还能看到完整的游戏主循环，以及系统组执行的顺序。</p><p><img src="https://i.loli.net/2019/07/14/5d2acd6b5ea8681591.png" alt></p><p>下面列表也展示了预定义的系统组和其成员系统：</p><ul><li>InitializationSystemGroup （在游戏循环（Player Loop）的 <code>Initialization</code> 层最后 update）<ul><li>BeginInitializationEntityCommandBufferSystem</li><li>CopyInitialTransformFromGameObjectSystem</li><li>SubSceneLiveLinkSystem</li><li>SubSceneStreamingSystem</li><li>EndInitializationEntityCommandBufferSystem</li></ul></li><li>SimulationSystemGroup（在游戏循环的 <code>Update</code> 层最后 update）<ul><li>BeginSimulationEntityCommandBufferSystem</li><li>TransformSystemGroup<ul><li>EndFrameParentSystem</li><li>CopyTransformFromGameObjectSystem</li><li>EndFrameTRSToLocalToWorldSystem</li><li>EndFrameTRSToLocalToParentSystem</li><li>EndFrameLocalToParentSystem</li><li>CopyTransformToGameObjectSystem</li></ul></li><li>LateSimulationSystemGroup</li><li>EndSimulationEntityCommandBufferSystem</li></ul></li><li>PresentationSystemGroup（在游戏循环的 <code>PreLateUpdate</code> 层最后 update）<ul><li>BeginPresentationEntityCommandBufferSystem</li><li>CreateMissingRenderBoundsFromMeshRenderer</li><li>RenderingSystemBootstrap</li><li>RenderBoundsUpdateSystem</li><li>RenderMeshSystem</li><li>LODGroupSystemV1</li><li>LodRequirementsUpdateSystem</li><li>EndPresentationEntityCommandBufferSystem</li></ul></li></ul><p><strong>P.S. 内容可能在未来有更改</strong></p><p>Multiple Worlds（多个世界）</p><p>前文多处提到默认的世界，实际上我们可以创建多个世界。同样的组件系统（component system）的类可以在不同的世界中初始化，而且每个实例都可以处于不同的同步点以不同的速度进行update。</p><p>当前没有方法手动更新一个世界中的所有系统，但是我们可以控制哪些系统被哪个世界控制，和它们要被加到哪个现存的世界中。自定义的世界可以通过实现 <code>ICustomBootstrap</code> 接口来创建。</p><h3 id="Tips-and-Best-Practices（提示与最佳实践）"><a href="#Tips-and-Best-Practices（提示与最佳实践）" class="headerlink" title="Tips and Best Practices（提示与最佳实践）"></a>Tips and Best Practices（提示与最佳实践）</h3><ul><li><strong>用 <code>[UpdateInGroup]</code> 为你的系统指定一个 <code>ComponentSystemGroup</code> 系统组。</strong>如果没有用这个属性，这个系统会自动被添加到默认世界（default World）的 SimulationSystemGroup 中。</li><li><strong>用手动更新循环（manually-ticked）的 ComponentSystemGroups 来 update 在主循环中的系统。</strong>添加 <code>[DisableAutoCreation]</code>  阻止系统从默认的世界初始化中创建或添加到世界中。这时候我们可以在主线程中调用 <code>World.GetOrCreateSystem()</code> 来创建系统，调用 <code>MySystem.Update()</code> 来 update 系统。如果你有一个系统要在帧中早点或者晚点运行，这种做法能更简单地把系统插到主循环中。</li><li><strong>尽量使用已存在的 <code>EntityCommandBufferSystem</code> 而不是重新添加一个新的。</strong>因为一个 <code>EntityCommandBufferSystem</code> 代表一个主线程等待子线程完成的同步点（sync point），如果重用一个在每个根系统组（root-level system group）中预定义的 Begin/End 系统，就能节省多个同步点所带来的额外时间间隔（可以回去看同步点小节的示意图，同步点的位置是由最晚执行完的子线程所决定的）。</li><li><strong>避免放自定义的逻辑到 <code>ComponentSystemGroup.OnUpdate()</code> 中。</strong>虽然 <code>ComponentSystemGroup</code> 功能上和一个组件系统（component system）一样，但是我们应该避免这么做。因为它作为一个系统组，在外面不能马上知道成员系统是否已经执行了 update，因此推荐的做法是只让系统组当一个组（group）来用，而把逻辑放到与其分离的组件系统中，再定好该系统与系统组的相对顺序。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>自己才刚考完试，所以计划的文章一直拖到现在。ECS 对我而言充满着吸引力，可能有些程序员也会对性能特别执着吧，它就像魔法一样，完全不同的开发模式，还需要我们深入了解内存的结构。尽管 ECS 可能在工作中对我是一种屠龙技，但有些知识啊，学了就已经很开心了~</p><p>我的毕业季也到来了，有空的话可能会写写 Demo 把剩下的实践部分补完，当然计划也可能搁浅。不管怎么样，希望本文对 ECS 同好有所帮助，有问题也欢迎在评论指出。 </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/index.html" target="_blank" rel="noopener">《Entity Component System Manual》</a></li><li><a href="https://github.com/BrianWill/LearnUnity/tree/master/ecs-jobs" target="_blank" rel="noopener">BrianWill LearnUnity/ecs-jobs</a></li><li><a href="https://forum.unity.com/threads/ecs-memory-layout.532028/" target="_blank" rel="noopener">《ECS Memory Layout》</a></li><li><a href="https://gametorrahod.com/world-system-groups-update-order-and-the-player-loop/" target="_blank" rel="noopener">《World, system groups, update order, and the player loop》</a></li><li><a href="https://docs.google.com/presentation/d/1vxE61D_N79cvgUI3eIocF2n4rn04wjgRRq00ugyoB1M/edit?usp=sharing" target="_blank" rel="noopener">UniteLA 2018 - ECS deep dive</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然网络上已经有不少 ECS 文档的汉化，但自己读官方文档的时候也会产生不少疑问，为此通过查询各种资料，写下本文。&lt;/p&gt;
&lt;p&gt;本文从 ECS 官方文档出发，加之内存布局结构的讲解，力求读者能够和博主一起吃透 ECS 中的基本概念。同时建议读者可以先读读我的上一篇博文&lt;a href=&quot;http://frankorz.com/2019/05/07/simple-talk-unity-dots/#Entity-Component-System&quot;&gt;《Unity DOTS 走马观花》&lt;/a&gt;的 ECS 部分，本文不再复述前文已经提到过的相关概念。&lt;/p&gt;
&lt;h1 id=&quot;ECS-与-Job-System&quot;&gt;&lt;a href=&quot;#ECS-与-Job-System&quot; class=&quot;headerlink&quot; title=&quot;ECS 与 Job System&quot;&gt;&lt;/a&gt;ECS 与 Job System&lt;/h1&gt;&lt;p&gt;我认为有必要重申其两者的关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job System 能帮我们方便地写出线程安全的多线程代码，其中每个任务单元称为 Job。&lt;/li&gt;
&lt;li&gt;ECS，又称实体组件系统。与传统的面向对象编程相比，ECS 是一种基于数据设计的编程模式。&lt;a href=&quot;http://frankorz.com/2019/05/07/simple-talk-unity-dots/#Entity-Component-System&quot;&gt;前文&lt;/a&gt;从内存结构分析了 OOP 模式的缺点，也提到了 ECS 是怎么样基于数据的设计内存结构的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Job System 是 Unity 自带的库，而要使用 ECS 我们需要从 Package Manager 中安装 “Entities” 预览包。这两者虽说完全是两种东西，但是他们能很好地相辅相成：ECS 保证数据线性地排列在内存中，这样通过更高效的数据读取，能有效提升 Job 的执行速度，同时也给了 Burst 编译器更多优化的机会。  &lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://frankorz.com/categories/Unity/"/>
    
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="ECS" scheme="http://frankorz.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>Unity DOTS 走马观花</title>
    <link href="http://frankorz.com/2019/05/07/simple-talk-unity-dots/"/>
    <id>http://frankorz.com/2019/05/07/simple-talk-unity-dots/</id>
    <published>2019-05-07T13:22:00.000Z</published>
    <updated>2019-05-14T11:41:38.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://i.loli.net/2019/05/07/5cd168d7974ba.png" alt="The Big Picture"></p><p>简单介绍 Data-Oriented Technology Stack (DOTS, 数据导向型技术栈) ，其包含了 C# Job System、the Entity Component System (ECS) 和 Burst。</p><a id="more"></a><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>DOTS 要实现的特点有：</p><ul><li><strong>性能的准确性。</strong>我们希望的效果是：如果循环因为某些原因无法向量化，它应该会出现编译器错误，而不是使代码运行速度慢 8 倍，并得到正确结果，完全不报错。</li><li><strong>跨平台架构特性</strong>。我们编写的输入代码无论是面向 iOS 系统还是 Xbox，都应该是相同的。</li><li>我们应该<strong>有不错的迭代循环</strong>。在修改代码时，可以轻松查看为所有架构生成的机器代码。机器代码“查看器”应该很好地说明或解释所有机器指令的行为。</li><li><strong>安全性</strong>。大多数游戏开发者不把安全性放在很高的优先级，但我们认为，解决 Unity 出现内存损坏问题是关键特性之一。在运行代码时应该有一个特别模式，如果读取或写入到内存界限外或取消引用 Null 时，它能够提供我们明确的错误信息。</li></ul><p>其中向量化指的是 Vectorization。</p><p>向量化的相关介绍：</p><ul><li><a href="https://stackoverflow.com/questions/1422149/what-is-vectorization" target="_blank" rel="noopener">https://stackoverflow.com/questions/1422149/what-is-vectorization</a></li><li><a href="https://www.wikiwand.com/en/Array_programming" target="_blank" rel="noopener">https://www.wikiwand.com/en/Array_programming</a></li></ul><h1 id="Burst"><a href="#Burst" class="headerlink" title="Burst"></a>Burst</h1><p>Unity 构建了名为 Burst 的代码生成器和编译器。</p><p>当使用 C# 时，我们对整个流程有完整的控制，包括从源代码编译到机器代码生成，如果有我们不想要的部分，我们会找到并修复它。我们会逐渐把 C++ 语言的性能敏感代码移植为 HPC# （高性能 C#，下文会提到）代码，这样会更容易得到想要的性能，更难出现 Bug，更容易进行处理。</p><p><img src="https://i.loli.net/2019/05/07/5cd1692330824.png" alt></p><p>如果 Asset Store 资源插件的开发者在资源中使用 HPC# 代码，资源插件在运行时代码会运行得更快。除此之外，高级用户也会通过使用 HPC# 编写出自定义高性能代码而受益。</p><p><a href="https://www.youtube.com/watch?v=QkM6zEGFhDY" target="_blank" rel="noopener">ECS Track: Deep Dive into the Burst Compiler - Unite LA</a></p><p>Burst 对于 HPC# 更详细的支持可以在下面找到：</p><p><a href="https://docs.unity3d.com/Packages/com.unity.burst@0.2/manual/index.html#cnet-language-support" target="_blank" rel="noopener">Burst User Guide</a></p><h2 id="深入栈"><a href="#深入栈" class="headerlink" title="深入栈"></a>深入栈</h2><p>向量化（Vectorization）无法进行的常见情况是，编译器无法确保二个指针不指向相同的内存，即混淆情况（Alias）。Alias 的问题在 Unity GDC 中也有一个演讲提到过：<a href="https://www.youtube.com/watch?v=NF6kcNS6U80" target="_blank" rel="noopener">Unity at GDC - C# to Machine Code</a>。</p><p><a href="https://docs.unity3d.com/Packages/com.unity.collections@0.0/manual/index.html" target="_blank" rel="noopener">Collections 类</a>就是为了解决这个问题而诞生的，里面包含 NativeList<t>、NativeHashMap<tkey, tvalue>、NativeMultiHashMap<tkey, tvalue> 和 NativeQueue<t> 四种额外的数据结构。</t></tkey,></tkey,></t></p><p>两个 NativeArray 之间从不会发生混淆这种情况，这也是为什么我们将会经常使用这些数据结构。我们可以在 Burst 中运用这个知识，使它不会由于害怕两个数组指针指向相同内存而放弃优化。</p><p>Unity 还编写了 <a href="https://github.com/Unity-Technologies/Unity.Mathematics" target="_blank" rel="noopener">Unity.Mathemetics</a> 数学库，提供了很多像 Shader 代码的数据结构。Burst 也能和这数学库很好的工作，未来 Burst 将能够为 <code>math.sin()</code> 等计算作出牺牲精度的优化。</p><p>对于 Burst 而言，<code>math.sin()</code> 不仅是要编译的 C# 方法，Burst 还能理解出 <code>sin()</code> 的三角函数属性，同时知道 x 值较小时会出现 <code>sin(x)</code> 等于 x 的情况，并了解它能替换为泰勒级数展开，以便牺牲特定精度。</p><p><strong>跨平台和架构的浮点准确性是 Burst 未来的目标。</strong></p><h1 id="传统模式的问题"><a href="#传统模式的问题" class="headerlink" title="传统模式的问题"></a>传统模式的问题</h1><p>传统模式指的是什么呢？</p><ul><li>跟 MonoBehaviours 打交道</li><li>数据和其处理过程耦合在一起</li><li>高度依赖引用类型</li></ul><p><img src="https://i.loli.net/2019/05/07/5cd16b478f8af.png" alt></p><h2 id="问题一：数据分布在内存的各个角落"><a href="#问题一：数据分布在内存的各个角落" class="headerlink" title="问题一：数据分布在内存的各个角落"></a>问题一：数据分布在内存的各个角落</h2><p><img src="https://i.loli.net/2019/05/10/5cd557e05fa56.jpg" alt></p><p>离散的数据导致搜索效率十分低下，还有 Cache Miss 的问题，这个问题可以参考下面的链接：</p><p><a href="https://zhuanlan.zhihu.com/p/41652478" target="_blank" rel="noopener">ECS 的泛泛之谈</a></p><h2 id="问题二：很多不必要的数据也被提供了"><a href="#问题二：很多不必要的数据也被提供了" class="headerlink" title="问题二：很多不必要的数据也被提供了"></a>问题二：很多不必要的数据也被提供了</h2><p><img src="https://i.loli.net/2019/05/10/5cd56a9b06095.png" alt></p><p>例如当我们要调用 Transform 时，可能实际上我们只需要 position 和 rotation 两个属性来移动 gameObject，但是其他不需要的数据也被提供给了 gameObject。</p><h2 id="问题三：低效的单线程数据处理"><a href="#问题三：低效的单线程数据处理" class="headerlink" title="问题三：低效的单线程数据处理"></a>问题三：低效的单线程数据处理</h2><p>传统模式只使用单线程来按顺序一个一个地处理数据和操作，这样十分低效。</p><h1 id="高性能-C＃（HPC-）"><a href="#高性能-C＃（HPC-）" class="headerlink" title="高性能 C＃（HPC#）"></a>高性能 C＃（HPC#）</h1><p>当我们使用 C# 语言时，仍然无法控制数据在内存中如何进行分布，但这是我们提升性能的关键点。</p><p>除此之外，标准库面向的是“堆上的对象”和“具有其它对象指针引用的对象”。</p><p>也就是意味着，当处理性能敏感代码时，我们可以放弃使用大部分标准库，例如：Linq、StringFormatter、List、Dictionary。禁止内存分配，即不使用类，只使用结构、映射、垃圾回收器和虚拟调用，并添加可使用的部分新容器，例如：NativeArray 和其他集合类型。</p><p>我们可以在越界访问时得到错误和错误信息，以及使用 C++ 代码时的调试器支持和编译速度。我们通常把该子集称为高性能 C# 或 HPC#。</p><p>它可以被总结为：</p><ul><li>大部分的原始类型（float、int、uint、short、bool…），enums，structs 和其他类型的指针</li><li>集合：用 <code>NavtiveArray&lt;T&gt;</code> 代替 <code>T[]</code></li><li>所有的控制流语句（除了 try、finally、foreach、using）</li><li>对 <code>throw new XXXException(...)</code> 给予基础支持</li></ul><h1 id="Job-System"><a href="#Job-System" class="headerlink" title="Job System"></a>Job System</h1><p>Job System 是针对上述传统模式问题的一种解决方式。例如下图可以把发射子弹看成一个 Job，从而用多线程来并行地处理发射操作。</p><p><img src="https://i.loli.net/2019/05/10/5cd549475461e.jpg" alt></p><p>目前主流的 CPU 有 4-6 个物理核心，8-12 个逻辑核心，多线程处理将能够更好地发挥 CPU 的性能。</p><p>传统的多线程问题也有很多：</p><ul><li>线程安全的代码十分难写</li><li>竞态条件，也就是计算结果依赖于两个或更多进程被调度的顺序</li><li>低效的上下文切换，切换线程的时候十分耗时</li></ul><p>而 Job System 就是专注解决上面问题的一个方案，这样我们就能享受着多线程的好处来开发游戏。当然了，我们也要写出正确的 ECS 代码，熟悉新的开发模式。</p><h2 id="解决的多线程问题"><a href="#解决的多线程问题" class="headerlink" title="解决的多线程问题"></a>解决的多线程问题</h2><p><strong>C++ 和 C# 都无法为开发者编写线程安全代码提供太多帮助。</strong>即使在今天，拥有多个核心游戏消费级硬件发展至今已经过去了十年，但依旧很难有效处理使用多个核心的程序。</p><p>数据冲突，不确定性和死锁是使多线程代码难以编写的挑战。Unity 想要的特性是“确保代码调用的函数和所有内容不会在全局状态下读取或写入”。Unity 希望应该让编译器抛出错误来提醒，而不是属于“程序员应遵守的准则”，Burst 则会提供编译器错误。</p><p>Unity 鼓励 Unity 用户编写 “Jobified” 代码：将「所有需要发生的数据转换」划分为 Job。</p><p>Job 会明确指定使用的只读缓冲区和读写缓冲区，尝试访问其它数据会得到编译器错误。Job 调度程序会确保在 Job 运行时，任何程序都不会写入只读缓冲区。Unity 也会确保在 Job 运行时，任何程序都不会读取读写缓冲区。</p><p>如果调度的 Job 违反了这些规则，我们会得到运行时错误（通常这种错误会在竞态条件出现时得到）。错误信息会说明，你正在尝试调度的 Job 想要读取缓冲区 A，但你之前已经调度了会写入缓冲区 A 的 Job ，所以如果想要执行该操作，需要把之前的 Job 指定为依赖。</p><h1 id="Entity-Component-System"><a href="#Entity-Component-System" class="headerlink" title="Entity Component System"></a>Entity Component System</h1><p>Unity 一直以组件的概念为中心，例如：我们可以添加 Rigidbody 组件到游戏对象上，使对象能够向下掉落。我们也可以添加 Light 组件到游戏对象上，使它可以发射光线。我们添加 AudioEmitter 组件，可以使游戏对象发出声音。</p><p>我们实现组件系统的方法并没有很好地演变。过去我们<strong>使用面向对象的思维编写组件系统</strong>，导致组件和游戏对象都是“大量使用 C++ 代码”的对象，创建或销毁它们需要使用互斥锁修改“id 到对象指针”的全局列表。</p><p>通过使用面向数据的思维方式，我们可以更好地处理这种情况。我们可以保留用户眼中的优良特性，即<strong>只需添加组件就可以实现功能，而同时通过新组件系统取得出色的性能和并行效果。</strong></p><p>这个全新的组件系统就是实体组件系统 ECS。简单来说，如今我们对游戏对象进行的操作可用于处理新系统的实体，组件仍称作组件。那么区别是什么？区别在于数据布局。</p><h2 id="ECS-数据布局"><a href="#ECS-数据布局" class="headerlink" title="ECS 数据布局"></a>ECS 数据布局</h2><p>ECS 使用的数据布局会把这些情况看作一种非常常见的模式，并<strong>优化内存布局</strong>，使类似操作更加快捷。</p><h3 id="组件（Component）"><a href="#组件（Component）" class="headerlink" title="组件（Component）"></a>组件（Component）</h3><p>首先要明确的是这里的“组件”与上文提到的 Rigidbody “组件”是不一样的概念。ECS 中的组件只会存单纯的数据，不参与任何逻辑运算，逻辑运算会交由系统（System）来处理。</p><h3 id="原型（Archetype）"><a href="#原型（Archetype）" class="headerlink" title="原型（Archetype）"></a>原型（Archetype）</h3><p><strong>ECS 会在内存中对带有相同组件（Component）集的所有实体（Entity）进行组合</strong>。ECS 把这类组件集称为原型（Archetype）。</p><p>下图的原型就是由 Position 组件、Velocity 组件、Rigidbody 组件和 Renderer 组件组成的。</p><p>如果一个实体只有三个组件（不同于前面提到的原型），那么那三个组件就组成了一个新的原型。</p><p>下面的图来自 Unite LA 的一次演讲的讲义， 很遗憾那次演讲没有录制下来。讲义可以在<a href="https://docs.google.com/presentation/d/1vxE61D_N79cvgUI3eIocF2n4rn04wjgRRq00ugyoB1M/edit?usp=sharing" target="_blank" rel="noopener">这里</a>找到。</p><p><img src="https://i.loli.net/2019/05/07/5cd16aea80286.png" alt></p><p>ECS 以 16k 大小的块（Chunk）来分配内存，每个块仅包含单个原型中所有<strong>实体</strong>的<strong>组件</strong>数据。</p><p><img src="https://i.loli.net/2019/05/07/5cd16af8d2324.png" alt></p><p>一个<a href="https://forum.unity.com/threads/memory-layout-for-ecs-components.590731/" target="_blank" rel="noopener">帖子</a>中有人提供了更加形象的内存布局图，例如上半部分的原型由 Position 组件和 Rock 组件组成，其中整个原型占了一个块（Chunk），两个组件的数据分别存在两个数组中，里面还带着组件数据对应的实体的信息。</p><p><img src="https://i.loli.net/2019/05/10/5cd583e06c6ef.jpg" alt></p><p>每个原型都有一个 Chunks 块列表，用来保存原型的实体。我们会循环所有块，并在每个块中，对紧凑的内存进行线性循环处理，以读取或写入组件数据。该线性循环会对每个实体运行相同的代码，同时为 Burst 创造向量化（Vectorization，可以参考 <a href="https://stackoverflow.com/questions/1422149/what-is-vectorization" target="_blank" rel="noopener">StackOverflow 的问题</a>）处理的机会。</p><p>每个块会被安排好内存中的位置，以便于快速从内存得到想要的数据，详情可以参考下面的文章。</p><p><a href="https://blog.csdn.net/yudianxia/article/details/80498015" target="_blank" rel="noopener">Unity2018 ECS 框架 Entities 源码解析（二）组件与 Chunk 的内存布局 - 大鹏的专栏</a></p><h3 id="实体（Entity）"><a href="#实体（Entity）" class="headerlink" title="实体（Entity）"></a>实体（Entity）</h3><p>实体是什么？实体只是一个 32 位的整数 key （和一些额外的数据例如 index 和 version 实体版本，不过在这里不重要），所以除了实体的组件数据外，不必为实体保存或分配太多内存。实体可以实现游戏对象的所有功能，甚至更多功能，因为实体非常轻量。</p><p>实体的性能消耗很低，所以我们可以把实体用在不适合游戏对象的情况，例如：为粒子系统内的每个单独粒子使用一个实体。</p><p>实体本身不是对象，也不是一个容器，它的作用是把其组件的数据关联到一起。</p><p><img src="https://i.loli.net/2019/05/07/5cd16b1878af0.png" alt></p><h3 id="系统（System）"><a href="#系统（System）" class="headerlink" title="系统（System）"></a>系统（System）</h3><p><img src="https://i.loli.net/2019/05/07/5cd16b28a3b79.png" alt></p><p>我们不必使用用户的 Update 方法搜索组件，然后在运行时对每个实例进行操作，使用 ECS 时我们只需静态地声明：我想对同时附带 Velocity 组件和 Rigidbody 组件的所有实体进行操作。为了找到所有实体，我们只需找到所有符合<strong>特定“组件搜索查询”的原型</strong>即可，而这个过程就是由系统（System）来完成的。</p><p>很多情况下，这个过程会分成多个 Job ，使处理 ECS 组件的代码达到几乎 100% 的核心利用率。ECS 会完成所有工作，我们只需要提供对每个实体运行的代码即可。我们也可以手动处理块迭代过程（<a href="https://github.com/Unity-Technologies/EntityComponentSystemSamples/blob/master/Samples/Assets/HelloECS/HelloCube_03_IJobChunk/README.md" target="_blank" rel="noopener">IJobChunk</a>）。</p><p>当我们从实体添加或移除组件时，ECS 会切换原型。我们会把它从当前块移动到新原型的块，然后交换之前块的最后实体来“填补空缺”。</p><p>在 ECS 中，我们还要静态声明要对组件数据进行什么处理，是 ReadOnly 只读还是 ReadWrite 读写（Job System 一小节提到过的两种缓冲区）。通过确定仅对 Position 组件进行读取，ECS 可以更高效地调度 Job ，其它需要读取 Position 组件的 Job 不必进行等待。</p><p>大体上，实体提供纯粹的数据给系统，系统根据自己所需要的组件来获得相应的满足条件的实体，最后系统再通过多线程来基于 Job System 来处理数据。</p><p><img src="https://i.loli.net/2019/05/10/5cd547a7c0260.jpg" alt></p><p>这种数据布局也解决了 Unity 长期以来的困扰，即：加载时间和序列化的性能。现在从大型场景加载或流式处理 ECS 数据的时间，不会比从硬盘加载和使用原始字节多多少。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>总的来说，ECS 有以下好处：</p><ul><li>为性能而生</li><li>更容易写出高度优化和可重用的代码</li><li>更能充分利用硬件的性能</li><li>原型的数据被紧密地排列在内存中</li><li>享受 Burst 编译器带来的魔法</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对 ECS 的常见观点是：ECS 需要编写很多代码。因此，实现想要的功能需要处理很多样板代码。现在针对移除多数样板代码需求的大量改进即将推出，这些改进会使开发者更简单地表达自己的目的。</p><p>Unity 暂时没有实现太多这类改进，因为 Unity 现在正专注于处理基础性能。</p><blockquote><p>太多样板代码对 ECS 游戏代码没有好处，我们不能让编写 ECS 代码比编写 MonoBehaviour 更麻烦。<br>——Unity</p></blockquote><p>而为网页游戏而生的基于 ECS 的 Project Tiny 已经实现了部分改进，例如：基于 lambda 函数的迭代 API。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>由于自己空闲时间不多，只能囫囵吞枣地拼凑出这样一篇笔记。上面大部分文字都是来自 Unity 的博文介绍，自己加了其他的内容帮助理解。本文从内存布局介绍了 ECS 的概念，也介绍了 Job System 和 Burst。我相信走过一遍文章之后，能清楚 Unity 对数据驱动的未来开发趋势的布局，也能更加容易从 <a href="https://github.com/Unity-Technologies/EntityComponentSystemSamples" target="_blank" rel="noopener">Unity ECS Sample</a> 中理解如何实践 ECS。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://indienova.com/indie-game-development/unity-dod-all-in-one/" target="_blank" rel="noopener">Unity DOD (ECS) 基础概念与资料汇总</a>  <ul><li>这篇文章总结得很好，但很多视频链接都错了，我提供给了一个改好的版本：<a href="https://www.notion.so/frankorz/DOTS-3562fce36b2a44909e5910609ddfd6a7" target="_blank" rel="noopener">DOD 相关文章</a></li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/36649462" target="_blank" rel="noopener">Unity ECS 编程官方文档选译—Getting Started</a></li><li><a href="https://mp.weixin.qq.com/s/GsrX6o-sHLrqVgffp1svqg" target="_blank" rel="noopener">面向数据技术栈 DOTS 之 ECS 实体组件系统</a></li><li><a href="https://blogs.unity3d.com/2019/03/08/on-dots-entity-component-system/" target="_blank" rel="noopener">On DOTS: Entity Component System - Unity Blog</a></li><li><a href="https://blogs.unity3d.com/2019/02/26/on-dots-c-c/" target="_blank" rel="noopener">On DOTS: C++ &amp; C# - Unity Blog</a></li><li><a href="https://rams3s.github.io/blog/2019-01-09-ecs-deep-dive/" target="_blank" rel="noopener">ECS Deep Dive</a></li><li><a href="https://docs.google.com/presentation/d/1vxE61D_N79cvgUI3eIocF2n4rn04wjgRRq00ugyoB1M/edit?usp=sharing" target="_blank" rel="noopener">UniteLA 2018 - ECS deep dive</a></li><li><a href="https://www.youtube.com/playlist?list=PLX2vGYjWbI0S4yHZwjDI1boIrYStpBCdN" target="_blank" rel="noopener">Intro To The Entity Component System And C# Job System</a>  <ul><li>视频中代码部分已经过时，建议参考 <a href="https://github.com/Unity-Technologies/EntityComponentSystemSamples" target="_blank" rel="noopener">Unity ECS Sample</a> 官方 Demo 来学习 ECS</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd168d7974ba.png&quot; alt=&quot;The Big Picture&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单介绍 Data-Oriented Technology Stack (DOTS, 数据导向型技术栈) ，其包含了 C# Job System、the Entity Component System (ECS) 和 Burst。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://frankorz.com/categories/Unity/"/>
    
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="ECS" scheme="http://frankorz.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>属于 Unity 的 Flutter——UIWidgets</title>
    <link href="http://frankorz.com/2019/04/01/uiwidgets-practice/"/>
    <id>http://frankorz.com/2019/04/01/uiwidgets-practice/</id>
    <published>2019-03-31T16:13:00.000Z</published>
    <updated>2019-05-14T11:42:03.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/UnityTech/UIWidgets/" target="_blank" rel="noopener">UIWidgets</a> 是 Unity 的一个插件包，是一个从 Google 的移动 UI 框架 Flutter 演变过来的 UI 框架。  </p><p>相对于原生开发的高开发成本（不同平台都需要不同的一套代码），Flutter、React-Native 等这种跨平台 UI 框架应运而生。  </p><p>Flutter 自 2018 年 3 月发布以来，社区不断壮大。由于 Flutter 自身设计理念的出色，Unity 中国已经着手将其移植过来。当然了，也因为这两个东西都非常的年轻，因此开发的时候都像开荒一样。  </p><a id="more"></a><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p>Flutter 有自己的一套渲染系统，那么 Unity 作为一个游戏引擎，底层的图形 API 用自己的一套东西就行了，因此移植过来更方便了。</p><h3 id="Flutter-框架结构"><a href="#Flutter-框架结构" class="headerlink" title="Flutter 框架结构"></a>Flutter 框架结构</h3><p><img src="https://diycode.b0.upaiyun.com/photo/2019/1a23a68a54815bf23cf842dafa932a23.png" alt></p><h3 id="UIWidgets-框架结构"><a href="#UIWidgets-框架结构" class="headerlink" title="UIWidgets 框架结构"></a>UIWidgets 框架结构</h3><p><img src="https://i.loli.net/2019/03/31/5ca0a9930c276.png" alt></p><h2 id="执行效率"><a href="#执行效率" class="headerlink" title="执行效率"></a>执行效率</h2><p><img src="https://i.loli.net/2019/03/31/5ca0b27a35401.gif" alt></p><p>这里提一些基础的知识：</p><p>Batch 就是 DrawCall 的另一种说法，了解渲染流水线的同学会知道流水线在 CPU 与 GPU 之间通信时，一般有三个步骤：  </p><ol><li>把数据加载到显存中。  </li><li>设置渲染状态。  </li><li>调用 Draw Call  </li></ol><p>Draw Call 就是一个调用命令，让 CPU 告诉 GPU 要怎么样用给定的渲染状态和输入的顶点信息来计算。Batch 里面装着顶点信息，也就是 DrawCall 中 GPU 需要的顶点信息。  </p><p>DrawCall 可以在 Profiler 中看，Batches 可以在 Stats 窗口看，大家可以仔细看看上面动图（右键在新标签页打开图片）里面的数据变化。  </p><p><img src="https://i.loli.net/2019/03/31/5ca0ac9d4fd8c.png" alt></p><p>在我随便写的一个例子中间，可以看到 Batches 数只有 1 。即使在有动画的时候 Batches 会多一点，但动画停止后 DrawCall 和 Batches 都马上下来了。这也有我这个应用写的太简单的原因，但是这种效率还是非常值得期待的。</p><h3 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h3><p>学过前端的同学应该熟悉组件树，这里就不介绍了。  </p><p>为了更高的渲染效率，Unity 采用了 Render Object Compositiing 的技术。    </p><p><img src="https://i.loli.net/2019/03/31/5ca0b42e394a0.png" alt></p><p>如果一个子树没有发生改变，Unity 就会将其渲染到一个离屏的 Render Texture 上缓存下来，需要的时候再将其贴到屏幕上。  </p><p>相比之下，以前的做法是，Canvas 只要有 UI element 改动了，整个 Canvas 都需要重新绘制。即使也有一种优化做法是准备两个 Canvas 分别绘制动态 UI element 和 静态 UI element，但这样也存在很多手动管理的地方。  </p><p>另外一方面，你可能也意识到了，我们不需要再管什么用同一个材质等等来优化图的合批，UIWidgets 会自动来管理这些事情。这方面也跟 <a href="http://fairygui.com" target="_blank" rel="noopener">FairyGUI</a> 非常像，开发者能专注在生产效率上，让插件来管理麻烦的事情。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>能开发游戏以外的 APP</li><li>游戏中的 UI</li><li>新的用户体验</li><li>不用管渲染过程，提升效率</li><li>因为是 Unity 的插件，可以轻松加各种粒子效果和其他骚操作。</li><li>一套代码能跑在游戏中、APP 中、网页中和 Unity 的 Editor 窗口中。（开发者还用其做了一个 Unity 中文文档的网站…一套代码能用在网页上和 APP 端，不过还在开发中）</li><li>和 Flutter 的 API 几乎一样，可以参考 Flutter 教程来用 UIWidgets 搭应用。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>无论是 Flutter 还是 UIWidgets 都还很年轻，有很多组件 UIWidgets 还没移植过来（GridView、Circle Avatar 等等）</li><li>官方示例、文档还没完善</li><li>开发时是开荒模式，所以可能忍不住直接转用 Flutter 去了…</li></ul><h2 id="我的示例"><a href="#我的示例" class="headerlink" title="我的示例"></a>我的示例</h2><p><img src="https://i.loli.net/2019/03/31/5ca082d35a884.gif" alt></p><p>这里借用了 <a href="https://github.com/Miraikomachi/MiraikomachiUnity" target="_blank" rel="noopener">ミライ小町</a> 的模型，所以代码窗口大小会比较大。（项目里面还有ミライ小町的跳舞动画 animation！）</p><p>项目仓库：<a href="https://github.com/Latias94/UIWidget-Practice" target="_blank" rel="noopener">Latias94/UIWidget-Practice</a>  </p><p>UIWidgets：<a href="https://github.com/UnityTech/UIWidgets/" target="_blank" rel="noopener">UnityTech/UIWidgets</a><a href="https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3" target="_blank" rel="noopener">https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3</a>)  </p><p>官方讲解录播：<a href="https://www.bilibili.com/video/av47558897" target="_blank" rel="noopener">[官方直播] UIWidgets - 不止游戏！如何使用 Unity 开发跨平台应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/UnityTech/UIWidgets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UIWidgets&lt;/a&gt; 是 Unity 的一个插件包，是一个从 Google 的移动 UI 框架 Flutter 演变过来的 UI 框架。  &lt;/p&gt;
&lt;p&gt;相对于原生开发的高开发成本（不同平台都需要不同的一套代码），Flutter、React-Native 等这种跨平台 UI 框架应运而生。  &lt;/p&gt;
&lt;p&gt;Flutter 自 2018 年 3 月发布以来，社区不断壮大。由于 Flutter 自身设计理念的出色，Unity 中国已经着手将其移植过来。当然了，也因为这两个东西都非常的年轻，因此开发的时候都像开荒一样。  &lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://frankorz.com/categories/Unity/"/>
    
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>不越狱在 iOS 12.1 设备安装 Kodi</title>
    <link href="http://frankorz.com/2019/01/13/install-kodi-with-tweakbox/"/>
    <id>http://frankorz.com/2019/01/13/install-kodi-with-tweakbox/</id>
    <published>2019-01-13T10:01:00.000Z</published>
    <updated>2019-05-14T11:41:53.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天一不小心发现 <a href="https://kodi.tv/" target="_blank" rel="noopener">Kodi</a> 这个播放神器居然还有 iPad 版！</p><p>但是苹果 App Store 不允许 Kodi 应用商家，于是自己在网上找了些方法：</p><ol><li>越狱（手动再见）</li><li>下载官方提供的安装包用 Xcode 打包进去（太麻烦）</li><li>国内同步助手等提供的“VIP 服务”，购买服务后，用它们提供企业证书来下载（吃相难看）</li><li>…</li></ol><a id="more"></a><h2 id="介绍-Tweakbox"><a href="#介绍-Tweakbox" class="headerlink" title="介绍 Tweakbox"></a>介绍 Tweakbox</h2><p>最终发现了国外一个不错的免费服务：<a href="https://www.tweakboxapp.com/" target="_blank" rel="noopener">Tweakbox</a>，官方介绍也很令人振奋：</p><blockquote><p>TweakBox is an app store where you can download apps for iOS devices that are not available in the official Apple app store. TweakBox App is completely free and it has tons of features that make it a very popular choice among the other third party app stores.</p></blockquote><p>简而言之，Tweakbox 允许你：</p><ul><li>不需要越狱，苹果 ID </li><li>下载部分 Appstore 上没有或者付费的软件和游戏</li><li>下载部分主流的<strong>修改增强版</strong>软件和游戏</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>iPhone 和 iPad 设备上在 Safari 浏览器中进入网页 <a href="https://www.tweakboxapp.com/" target="_blank" rel="noopener">Download</a></li><li>点 “Install Now” 按钮安装描述文件</li><li>然后就会下载 Tweakbox 应用</li><li>打开设置 -&gt; 通用 -&gt; 描述文件与设备管理 -&gt; TweakBox 点击信任</li><li>之后就能打开 Tweakbox 应用来安装应用了！</li><li>打开 Tweakbox，点击屏幕上方的 Apps 选项，点击 Tweakbox Apps 一列，Kodi 应用就在其中。</li></ol><p><img src="https://i.loli.net/2019/01/13/5c3b083aede5c.png" alt="发现 Kodi!"></p><p>点进去 install 就能下载应用了，下载完还需要再次去信任描述文件才能使用。</p><p>唯一有点缺陷的是 Kodi 有时会弹出插屏广告，断网使用即可。</p><p>汉化参考：<a href="https://jingyan.baidu.com/article/6dad50750da52ca122e36e5c.html" target="_blank" rel="noopener">KODI 播放器 V17 设置中文</a></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>前面说到 Tweakbox 还能安装其他实用的应用：</p><p><img src="https://i.loli.net/2019/01/13/5c3b0ade16e14.png" alt></p><p><img src="https://i.loli.net/2019/01/13/5c3b0b00308dd.png" alt="增强版 Spotify"></p><p><img src="https://i.loli.net/2019/01/13/5c3b0b1c42964.png" alt></p><p><img src="https://i.loli.net/2019/01/13/5c3b0b6874005.png" alt></p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>周更博客真的难 = =，有些主题觉得没比别人写的好，于是就不想写了…</p><p>这周先水过去，再次赞下 Tweakbox！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一不小心发现 &lt;a href=&quot;https://kodi.tv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kodi&lt;/a&gt; 这个播放神器居然还有 iPad 版！&lt;/p&gt;
&lt;p&gt;但是苹果 App Store 不允许 Kodi 应用商家，于是自己在网上找了些方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;越狱（手动再见）&lt;/li&gt;
&lt;li&gt;下载官方提供的安装包用 Xcode 打包进去（太麻烦）&lt;/li&gt;
&lt;li&gt;国内同步助手等提供的“VIP 服务”，购买服务后，用它们提供企业证书来下载（吃相难看）&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="APP" scheme="http://frankorz.com/tags/APP/"/>
    
      <category term="iPad" scheme="http://frankorz.com/tags/iPad/"/>
    
  </entry>
  
  <entry>
    <title>Unity 开源双端框架 ET 中初尝热更新技术</title>
    <link href="http://frankorz.com/2019/01/06/hotfix-introduction-of-unity-et-framework/"/>
    <id>http://frankorz.com/2019/01/06/hotfix-introduction-of-unity-et-framework/</id>
    <published>2019-01-06T12:42:43.000Z</published>
    <updated>2019-01-07T13:18:06.262Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ET-框架简介"><a href="#ET-框架简介" class="headerlink" title="ET 框架简介"></a>ET 框架简介</h2><p>正所谓时势造英雄，在 Web 开发领域或者传统软件开发领域中，人们把经过千锤百炼的代码总结出一套开发框架，从而提高开发效率，让开发者能更专注于业务本身。对于游戏领域而言，不同游戏需求的东西也不一样：有的游戏对性能有着苛刻要求，有的游戏需要快速地迭代出来，有的游戏需要联网热更新等等。因此不同的游戏框架应运而生。</p><p>例如：</p><ul><li><a href="https://github.com/EllanJiang/GameFramework" target="_blank" rel="noopener">Game Framework</a> 是一个基于 Unity 引擎的游戏框架，主要对游戏开发过程中常用模块进行了封装，很大程度地规范开发过程、加快开发速度并保证产品质量。</li><li><a href="https://github.com/liangxiegame/QFramework" target="_blank" rel="noopener">QFramework</a> 一套渐进式的快速开发框架。框架内部积累了多个项目的在各个技术方向的解决方案。</li><li><a href="https://github.com/sschmid/Entitas-CSharp" target="_blank" rel="noopener">Entitas</a> 一套基于 C# 和 Unity 的实体组件系统。</li><li><a href="https://github.com/Unity-Technologies/EntityComponentSystemSamples" target="_blank" rel="noopener">Entities</a> Unity 官方的实体组件系统实现，不过还是 Beta 版本，详细介绍可以查看<a href="https://unity.com/unity/features/job-system-ECS" target="_blank" rel="noopener">官网</a>。</li><li><a href="https://github.com/strangeioc/strangeioc" target="_blank" rel="noopener">StrangeIoC</a> 一套基于 C# 和 Unity 的控制反转 (Inversion-of-Control) 框架。</li></ul><p>今天介绍的是 ET 框架。</p><blockquote><p>ET是一个开源的游戏客户端（基于unity3d）服务端双端框架，服务端是使用C# .net core开发的分布式游戏服务端，其特点是开发效率高，性能强，双端共享逻辑代码，客户端服务端热更机制完善，同时支持可靠udp tcp websocket协议，支持服务端3D recast寻路等等</p></blockquote><p>ET 框架能让我们只用 C# 就能搞定前后端，热更新方面也采用了基于 C# 的 IL 运行时——<a href="https://ourpalm.github.io/ILRuntime/" target="_blank" rel="noopener">ILRuntime</a>， 贯彻了 “珍爱生命，远离 Lua” 这句话。目前自己接触的大多是客户端部分，因此服务器方面不做介绍。<br><a id="more"></a></p><h2 id="框架文件结构"><a href="#框架文件结构" class="headerlink" title="框架文件结构"></a>框架文件结构</h2><p><a href="https://github.com/egametang/ET" target="_blank" rel="noopener">ET 官网</a> 本身给了很多介绍，我们可以克隆 Git 仓库到本地。</p><p>下面来看看每个文件夹的作用：</p><p><img src="https://i.loli.net/2019/01/05/5c30b35ce39f5.png" alt></p><h2 id="客户端文件结构"><a href="#客户端文件结构" class="headerlink" title="客户端文件结构"></a>客户端文件结构</h2><p>本文主要来介绍客户端，因此进入到 Unity 文件夹，文件夹结构如下：</p><p><img src="https://i.loli.net/2019/01/05/5c30b35088c36.png" alt></p><p>当前 Master 分支目前需要 Unity 2018.3 以上版本。使用之前需要参考下官方的 <a href="https://github.com/egametang/ET/blob/master/Doc/%E8%BF%90%E8%A1%8C%E6%8C%87%E5%8D%97.md" target="_blank" rel="noopener">运行指南</a>。</p><p>在 VS 中重新编译，或者 Rider Rebuild 一下项目。Scene 选择 Scenes\Init.unity，点 Play 按钮应该就能成功运行，看到登陆界面。</p><p><img src="https://i.loli.net/2019/01/05/5c30b2ce0c2f1.png" alt></p><h2 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h2><p>ET 框架使用了组件的设计，一切都是实体（Entity）和组件（Component），官方文档 <a href="https://github.com/egametang/ET/blob/master/Doc/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1.md" target="_blank" rel="noopener">组件设计</a> 介绍的很详细。</p><p>看完文档，我们来看看项目代码的启动入口。</p><p><img src="https://i.loli.net/2019/01/05/5c30b502d774a.png" alt></p><p>这个 Init.cs 文件，在 Model 文件夹下。可能有同学注意到 Hotfix 文件夹下也有一个 Init.cs 文件，而且这两个文件夹的结构大同小异，两边都有一些相同的文件，而它们只是命名空间不一样。这是因为我们用到 ILRuntime，而 ILRuntime 最好不要跨域继承。</p><p><code>Model/Init.cs</code> 文件中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> ETVoid <span class="title">StartAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 添加了组件，就赋予了各种功能。</span></span><br><span class="line"><span class="comment">// 例如加了 Timer 组件，就有了计时功能</span></span><br><span class="line">Game.Scene.AddComponent&lt;TimerComponent&gt;();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载热更用的 AssetBundle 包</span></span><br><span class="line"><span class="keyword">await</span> BundleHelper.DownloadBundle();</span><br><span class="line"><span class="comment">// 加载热更用的dll等文件，调用 Hotfix/Init.cs</span></span><br><span class="line">Game.Hotfix.LoadHotfixAssembly();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置</span></span><br><span class="line">Game.Scene.GetComponent&lt;ResourcesComponent&gt;().LoadBundle(<span class="string">"config.unity3d"</span>);</span><br><span class="line">Game.Scene.AddComponent&lt;ConfigComponent&gt;();</span><br><span class="line"><span class="comment">// 加载后卸载相应的 AB 包</span></span><br><span class="line">Game.Scene.GetComponent&lt;ResourcesComponent&gt;().UnloadBundle(<span class="string">"config.unity3d"</span>);</span><br><span class="line">Game.Scene.AddComponent&lt;OpcodeTypeComponent&gt;();</span><br><span class="line">Game.Scene.AddComponent&lt;MessageDispatcherComponent&gt;();</span><br><span class="line"></span><br><span class="line">Game.Hotfix.GotoHotfix();</span><br><span class="line"></span><br><span class="line">Game.EventSystem.Run(EventIdType.TestHotfixSubscribMonoEvent, <span class="string">"TestHotfixSubscribMonoEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过组件设计，可以轻易地加载组件和卸载组件，例如我可以写一个心跳包组件来每隔30秒发送一个心跳包到服务器，当我需要这个组件的时候，可以直接 <code>AddComponent</code>，不需要的时候可以 <code>RemoveComponent</code> 移除组件。</p><h2 id="登陆界面的热更新启动过程"><a href="#登陆界面的热更新启动过程" class="headerlink" title="登陆界面的热更新启动过程"></a>登陆界面的热更新启动过程</h2><p>接下来看到 <code>Hotfix/Init.cs</code> 文件中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 注册热更层回调</span></span><br><span class="line">ETModel.Game.Hotfix.Update = () =&gt; &#123; Update(); &#125;;</span><br><span class="line">ETModel.Game.Hotfix.LateUpdate = () =&gt; &#123; LateUpdate(); &#125;;</span><br><span class="line">ETModel.Game.Hotfix.OnApplicationQuit = () =&gt; &#123; OnApplicationQuit(); &#125;;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 加载热更配置</span></span><br><span class="line">ETModel.Game.Scene.GetComponent&lt;ResourcesComponent&gt;().LoadBundle(<span class="string">"config.unity3d"</span>);</span><br><span class="line">Game.Scene.AddComponent&lt;ConfigComponent&gt;();</span><br><span class="line">ETModel.Game.Scene.GetComponent&lt;ResourcesComponent&gt;().UnloadBundle(<span class="string">"config.unity3d"</span>);</span><br><span class="line"></span><br><span class="line">UnitConfig unitConfig = (UnitConfig)Game.Scene.GetComponent&lt;ConfigComponent&gt;().Get(<span class="keyword">typeof</span>(UnitConfig), <span class="number">1001</span>);</span><br><span class="line">Log.Debug(<span class="string">$"config <span class="subst">&#123;JsonHelper.ToJson(unitConfig)&#125;</span>"</span>);</span><br><span class="line"><span class="comment">// 发送事件来启动界面</span></span><br><span class="line">Game.EventSystem.Run(EventIdType.InitSceneStart);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看发送的事件，代码在<br> <code>Hotfix\Module\Demo\UI\UILogin\System\InitSceneStart_CreateLoginUI.cs</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ETHotfix</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 用 Attribute 来注册事件</span></span><br><span class="line">[<span class="meta">Event(EventIdType.InitSceneStart)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InitSceneStart_CreateLoginUI</span>: <span class="title">AEvent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UI ui = UILoginFactory.Create();</span><br><span class="line"><span class="comment">// 这里就是启动登陆界面的地方，界面可以直接 add 或者 remove</span></span><br><span class="line">Game.Scene.GetComponent&lt;UIComponent&gt;().Add(ui);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看一个界面是怎么生成的，代码在 <code>Hotfix\Module\Demo\UI\UILogin\System\UILoginFactory.cs</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UI <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">    ResourcesComponent resourcesComponent = ETModel.Game.Scene.GetComponent&lt;ResourcesComponent&gt;();</span><br><span class="line"><span class="comment">// 让资源组件读取登陆界面的 AB 包</span></span><br><span class="line">    resourcesComponent.LoadBundle(UIType.UILogin.StringToAB());</span><br><span class="line"><span class="comment">// 从 AB 包拿到登陆界面的 GameObject</span></span><br><span class="line">    GameObject bundleGameObject = (GameObject) resourcesComponent.GetAsset(UIType.UILogin.StringToAB(), UIType.UILogin);</span><br><span class="line">    GameObject gameObject = UnityEngine.Object.Instantiate(bundleGameObject);</span><br><span class="line"></span><br><span class="line">    UI ui = ComponentFactory.Create&lt;UI, <span class="keyword">string</span>, GameObject&gt;(UIType.UILogin, gameObject, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 添加登陆界面组件</span></span><br><span class="line">    ui.AddComponent&lt;UILoginComponent&gt;();</span><br><span class="line">    <span class="keyword">return</span> ui;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看登陆界面组件，代码在 <code>Hotfix\Module\Demo\UI\UILogin\Component\UILoginComponent.cs</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UILoginComponent</span>: <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> GameObject account;</span><br><span class="line"><span class="keyword">private</span> GameObject loginBtn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 通过引用来获取 UI 组件，再为其添加点击事件</span></span><br><span class="line">ReferenceCollector rc = <span class="keyword">this</span>.GetParent&lt;UI&gt;().GameObject.GetComponent&lt;ReferenceCollector&gt;();</span><br><span class="line">loginBtn = rc.Get&lt;GameObject&gt;(<span class="string">"LoginBtn"</span>);</span><br><span class="line">loginBtn.GetComponent&lt;Button&gt;().onClick.Add(OnLogin);</span><br><span class="line"><span class="keyword">this</span>.account = rc.Get&lt;GameObject&gt;(<span class="string">"Account"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnLogin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 有兴趣可以再进去看看 OnLoginAsync，其中登陆的 Session 连接了服务器地址 127.0.0.1:10002</span></span><br><span class="line">LoginHelper.OnLoginAsync(<span class="keyword">this</span>.account.GetComponent&lt;InputField&gt;().text).Coroutine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器地址存在了 Tools 菜单中的全局配置，上面的资源路径则是热更新服务器的地址。</p><p><img src="https://i.loli.net/2019/01/05/5c30c3d30a5a8.png" alt></p><p>游戏运行后，在 Hierarchy 界面中也可以看到组件的结构，其中 <code>uilogin.unity3d</code> 就是登陆界面的 AB 包引用：</p><p><img src="https://i.loli.net/2019/01/05/5c30bd561727f.png" alt></p><p>这就是通过热更新逻辑生成的界面，也就是说，上面的代码让我们可以通过热更新来给应用加载各种界面和改写页面跳转逻辑，当然还可以通过热更来增加修改游戏逻辑和功能。</p><p>如果不喜欢这种页面加载方式，可以考虑不使用 <code>Hotfix/Init.cs</code> 中的 <code>Game.Scene.AddComponent&lt;UIComponent&gt;();</code> 这个 UIComponent，而使用其他 UI 组件，例如主仓库中的 FairyGUI 分支，让 FairyGUI 来单独负责 UI 界面。这里也可以看出基于组件的框架的灵活性，我以后也会出文章单独介绍 FairyGUI。</p><h2 id="热更新切换"><a href="#热更新切换" class="headerlink" title="热更新切换"></a>热更新切换</h2><p>首先看看作者的介绍：</p><blockquote><p>7.客户端热更新一键切换<br>因为ios的限制，之前unity热更新一般使用lua，导致unity3d开发人员要写两种代码，麻烦的要死。之后幸好出了ILRuntime库，利用ILRuntime库，unity3d可以利用C#语言加载热更新dll进行热更新。ILRuntime一个缺陷就是开发时候不支持VS debug，这有点不爽。ET框架使用了一个预编译指令ILRuntime，可以无缝切换。平常开发的时候不使用ILRuntime，而是使用Assembly.Load加载热更新动态库，这样可以方便用VS单步调试。在发布的时候，定义预编译指令ILRuntime就可以无缝切换成使用ILRuntime加载热更新动态库。这样开发起来及其方便，再也不用使用狗屎lua了<br>8.客户端全热更新<br>客户端可以实现所有逻辑热更新，包括协议，config，ui等等</p></blockquote><p><img src="https://i.loli.net/2019/01/05/5c30c69760435.png" alt></p><p>预编译指令指的就是在 Player Setting 中，上图右下角箭头指着的地方。当前有两个预编译指令，通常在开发中，可以只填写 <code>NET452</code>，这样可以得到完整的堆栈信息来调试程序。还有一个预编译指令 <code>ASYNC</code>，加上后，应用就会从前面填写的热更新服务器下载热更包，该指令在后文会提到。</p><p>在国内环境下，手机游戏热更新的需求较强烈。市场上手机系统普遍分成 Android 和 iOS 阵营，其中 iOS 不支持 JIT 热更，因此 ET 框架给了两种选择：ILRuntime 热更新和 Mono 热更新。</p><p>两者概念可以参考文末的参考链接，在这里不多说。</p><h2 id="体验热更新"><a href="#体验热更新" class="headerlink" title="体验热更新"></a>体验热更新</h2><p>体验热更新之前，先把项目切到 Android 平台。</p><p>按照下图配置 Mono 热更新：</p><p><img src="https://i.loli.net/2019/01/06/5c31edd4669a9.png" alt></p><p>确保 Scripting Backend 为 Mono，下面预编译宏去掉 ILRuntime，加上 ASYNC，按下<strong>回车键</strong>执行变更。ASYNC 说明我们现在的热更新资源从资源服务器中获取，这里的热更新资源包括 Res 文件夹、Bundles 文件夹、Hotfix 文件夹中的代码等。在这个例子中，登陆界面的代码就已经写在热更新文件夹中了，我们将尝试通过热更新来展示登陆界面。</p><p>点击 Play 按钮，会有两个报错：</p><p><img src="https://i.loli.net/2019/01/06/5c31eefc3359a.png" alt></p><p>第二个 Log 信息展示了应用想要获取资源的热更资源服务器地址，这个地址可以在 Tools 菜单的全局配置中找到。报错信息提示找不到终端主机。报错是理所当然的，因为我们还没有启动本地服务器。</p><p>首先要生成热更新文件，在 Tools 菜单中点击打包工具，如下图所示：</p><p><img src="https://i.loli.net/2019/01/06/5c31f02a12e8c.png" alt></p><p>平台选择当前的 Android 平台，目前不需要打包应用，所以无视第一个单选按钮。</p><p>前面的思维导图提到了 ET 根目录的 Release 文件夹存的就是热更新资源文件。打包工具也会把打包后的资源放在 Release 文件夹下。而第二个按钮指的是是否把打包的热更新资源也放在应用中，目前也不需要选择。开启热更新后，应用会比较服务器和本地应用的 Version 文件，计算文件差异后才会下载相关的热更新资源文件。</p><p>如果勾选了第二个按钮，打包工具将会把资源也复制到 Assets/StreamingAssets 文件夹下，同时更新 Version 文件，这样我们将不能测试下载热更包的过程。</p><p><img src="https://i.loli.net/2019/01/06/5c31f17b71319.png" alt></p><p>点击开始打包后，热更文件就生成了：</p><p><img src="https://i.loli.net/2019/01/06/5c31f2f8dbf1d.png" alt></p><p>再点击 Tools 菜单中的 web 资源服务器开启映射了 Release 文件夹的本地文件服务器。</p><p>点击 Play 按钮，应用通过下载热更新资源，生成了登陆界面，也把热更资源下载到了应用中，也就是 Assets/StreamingAssets 文件夹。</p><p><img src="https://i.loli.net/2019/01/06/5c31f3b4ad69f.png" alt></p><p>重新启动 web 资源服务器清除 log 信息，再次运行应用，会发现没有再次下载热更新资源。因为对比了 Version 文件后，应用本地的文件已经不需要更新了。</p><p><img src="https://i.loli.net/2019/01/06/5c31f4aa1c424.png" alt></p><p>至此，我们完成了一次完整的热更新。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ET 框架给了我们一种统一的开发体验，提供了方便的热更新切换和调试方案，这足以支撑起一些小游戏的开发需求，有需要的同学可以了解下 <a href="https://github.com/egametang/ET" target="_blank" rel="noopener">ET 框架</a>~</p><p>2019 年立了个 Flag：周更技术博客，欢迎督促和交流，也欢迎常来我博客 <a href="http://frankorz.com">萤火之森</a> 逛！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/34551169" target="_blank" rel="noopener">一些新潮的Unity热更方案</a></li><li><a href="https://answer.uwa4d.com/question/5abdea21425802635474fbb4" target="_blank" rel="noopener">Mono和IL2CPP选哪个更合适？</a></li><li><a href="https://zhuanlan.zhihu.com/p/37291067" target="_blank" rel="noopener">Unity实现c#热更新方案探究（一）</a></li><li><a href="https://answer.uwa4d.com/question/5a9fc420d35eb22c10a0a365" target="_blank" rel="noopener">关于热更新，大家现在都是怎么实现的？</a> 中网友 gx 的回答</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ET-框架简介&quot;&gt;&lt;a href=&quot;#ET-框架简介&quot; class=&quot;headerlink&quot; title=&quot;ET 框架简介&quot;&gt;&lt;/a&gt;ET 框架简介&lt;/h2&gt;&lt;p&gt;正所谓时势造英雄，在 Web 开发领域或者传统软件开发领域中，人们把经过千锤百炼的代码总结出一套开发框架，从而提高开发效率，让开发者能更专注于业务本身。对于游戏领域而言，不同游戏需求的东西也不一样：有的游戏对性能有着苛刻要求，有的游戏需要快速地迭代出来，有的游戏需要联网热更新等等。因此不同的游戏框架应运而生。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/EllanJiang/GameFramework&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Game Framework&lt;/a&gt; 是一个基于 Unity 引擎的游戏框架，主要对游戏开发过程中常用模块进行了封装，很大程度地规范开发过程、加快开发速度并保证产品质量。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liangxiegame/QFramework&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QFramework&lt;/a&gt; 一套渐进式的快速开发框架。框架内部积累了多个项目的在各个技术方向的解决方案。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sschmid/Entitas-CSharp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entitas&lt;/a&gt; 一套基于 C# 和 Unity 的实体组件系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Unity-Technologies/EntityComponentSystemSamples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entities&lt;/a&gt; Unity 官方的实体组件系统实现，不过还是 Beta 版本，详细介绍可以查看&lt;a href=&quot;https://unity.com/unity/features/job-system-ECS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/strangeioc/strangeioc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;StrangeIoC&lt;/a&gt; 一套基于 C# 和 Unity 的控制反转 (Inversion-of-Control) 框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天介绍的是 ET 框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ET是一个开源的游戏客户端（基于unity3d）服务端双端框架，服务端是使用C# .net core开发的分布式游戏服务端，其特点是开发效率高，性能强，双端共享逻辑代码，客户端服务端热更机制完善，同时支持可靠udp tcp websocket协议，支持服务端3D recast寻路等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ET 框架能让我们只用 C# 就能搞定前后端，热更新方面也采用了基于 C# 的 IL 运行时——&lt;a href=&quot;https://ourpalm.github.io/ILRuntime/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ILRuntime&lt;/a&gt;， 贯彻了 “珍爱生命，远离 Lua” 这句话。目前自己接触的大多是客户端部分，因此服务器方面不做介绍。&lt;br&gt;
    
    </summary>
    
      <category term="游戏开发" scheme="http://frankorz.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://frankorz.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 中用有限状态机来实现一个 AI</title>
    <link href="http://frankorz.com/2018/06/22/finite-state-machine-in-unity/"/>
    <id>http://frankorz.com/2018/06/22/finite-state-machine-in-unity/</id>
    <published>2018-06-22T10:19:31.000Z</published>
    <updated>2019-01-06T12:52:05.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在阅读《游戏人工智能编程案例精粹（修订版）》，本文是书中第二章的一篇笔记。</p><p>有限状态机（英语：Finite-state machine, 缩写：FSM），是一个被数学家用来解决问题的严格形式化的设备，在游戏业中也常见有限状态机的身影。</p><p>对于游戏程序员来说，可以用下面这个定义来了解：</p><blockquote><p>一个有限状态机是一个设备（device），或是一个设备模型（a model of a device）。具有有限数量的状态，它可以在任何给定的时间根据输入进行操作，是的从一个状态变换到另一个状态，或者是促使一个输出或者一种行为的发生。一个有限状态机在任何瞬间只能处在一种状态。<br>——《游戏人工智能编程案例精粹（修订版）》 Mat Buckland</p></blockquote><p>有限状态机就是要把一个对象的行为分解成易于处理的“块”或者状态。拿某个开关来说，我们可以把它分成两个状态：开或关。其中开开关这个操作，就是一次<strong>状态转移</strong>，使开关的状态从“关”变换到“开”，反之亦然。<br><a id="more"></a><br>拿游戏来举例，一个 FPS 游戏中的敌人 AI 状态可以分成：巡逻、侦查（听到了玩家）、追逐（玩家出现在 AI 视野）、攻击（玩家进入 AI 攻击范围）、死亡等，这些<strong>有限的</strong>状态都<strong>互相独立</strong>，且要<strong>满足某种条件</strong>才能从一个状态转移到另外一个状态。</p><p>有限状态机由三部分组成：</p><ul><li>存储任务信息的一些<strong>状态（states）</strong>，例如一个 AI 可以有探索状态、追踪状态、攻击状态等等。</li><li>状态之间的一些<strong>变换（transitions）</strong>，转移代表状态的转移，并且描述着状态转移的条件。例如听到了主角的脚步声，就转移到追踪状态。</li><li>需要跟随每个状态的一系列<strong>行为（actions）</strong>。例如在探索状态，要随机移动和找东西。</li></ul><p>下图是只有三种状态的 AI 的有限状态机图示：<br><img src="https://i.loli.net/2018/06/22/5b2cc09f49f70.png" alt></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>实现有限状态机之前，要先了解它的优点：</p><ol><li><strong>编程快速简单</strong>：很多有限状态机的实现都较简单，本文会列出三种实现方法。</li><li><strong>易于调试</strong>：因为行为被分成单一的状态块，因此要调试的时候，可以只跟踪某个异常状态的代码。</li><li><strong>很少的计算开销</strong>：几乎不占用珍贵的处理器时间，因为除了 if-this-then-that 这种思考处理之外，是不存在真正的“思考”的。</li><li><strong>直觉性</strong>：人们总是自然地把事物思考为处在一种或另一种状态。人类并不是像有限状态机一样工作，但我们发现这种方式下考虑行为是很有用的，或者说我们能更好更容易地进行 AI 状态的分解和创建操作 AI 的规则，容易理解的概念也让程序员之间能更好地交流其设计。</li><li><strong>灵活性</strong>：游戏 AI 的有限状态机能很容易地由程序员进行调整，增添新的状态和规则也很容易扩展一个 AI 的行为。</li></ol><p>有限状态机的缺点是：</p><ol><li>当状态过多时，难以维护代码。</li><li>《AI Game Development》的作者 Alex J. Champandard 发表过一篇文章<a href="http://aigamedev.com/open/article/fsm-age-is-over/" target="_blank" rel="noopener">《10 Reasons the Age of Finite State Machines is Over》</a></li></ol><h2 id="if-then-实现"><a href="#if-then-实现" class="headerlink" title="if-then 实现"></a>if-then 实现</h2><p>这是第一种实现有限状态机的方法，用一系列 if-then 语句或者 switch 语句来表达状态。</p><p>下面拿那个只有三个状态的僵尸 AI 举例：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ZombieState</span><br><span class="line">&#123;</span><br><span class="line">    Chase, Attack, Die</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Zombie</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ZombieState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (currentState)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> ZombieState.Chase:</span><br><span class="line">                <span class="keyword">if</span> (currentHealth &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ChangeState(ZombieState.Die);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 玩家在攻击范围内则进入攻击状态</span></span><br><span class="line">                <span class="keyword">if</span> (PlayerInAttackRange())</span><br><span class="line">                &#123;</span><br><span class="line">                    ChangeState(ZombieState.Attack);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZombieState.Attack:</span><br><span class="line">                <span class="keyword">if</span> (currentHealth &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ChangeState(ZombieState.Die);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!PlayerInAttackRange())</span><br><span class="line">                &#123;</span><br><span class="line">                    ChangeState(ZombieState.Chase);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZombieState.Die:</span><br><span class="line">                Debug.Log(<span class="string">"僵尸死亡"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种写法能实现有限状态机，但当游戏对象复杂到一定程度时，case 就会变得特别多，使程序难以理解、调试。另外这种写法也不灵活，难以扩展超出它原始设定的范围。</p><p>此外，我们常需要在<strong>进入状态</strong>和<strong>退出状态</strong>时做些什么，例如僵尸在开始攻击时像猩猩一样锤几下胸口，玩家跑出攻击范围的时候，僵尸要“摇摇头”让自己清醒，好让自己打起精神继续追踪玩家。</p><h3 id="状态变换表"><a href="#状态变换表" class="headerlink" title="状态变换表"></a>状态变换表</h3><p>一个用于组织状态和影响状态变换的更好的机制是一个<strong>状态变换表</strong>。</p><div class="table-container"><table><thead><tr><th>当前状态</th><th style="text-align:center">条件</th><th style="text-align:right">状态转移</th></tr></thead><tbody><tr><td>追踪</td><td style="text-align:center">玩家进入攻击范围</td><td style="text-align:right">攻击</td></tr><tr><td>追踪</td><td style="text-align:center">僵尸生命值小于或等于0</td><td style="text-align:right">死亡</td></tr><tr><td>攻击</td><td style="text-align:center">玩家脱离攻击范围</td><td style="text-align:right">追踪</td></tr><tr><td>攻击</td><td style="text-align:center">僵尸生命值小于或等于0</td><td style="text-align:right">死亡</td></tr></tbody></table></div><p>这表格可以被僵尸 AI 不间断地查询。使得它能基于从游戏环境的变化来进行状态变换。每个状态可以模型化为一个分离的对象或者存在于 AI 外的函数。提供了一个清楚且灵活的结构。</p><p>我们只用告诉僵尸它有多少个状态，僵尸则会根据自己获得的信息（例如玩家是否在它的攻击范围内）来处理规则（转移状态）。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Zombie</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ZombieState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 生命值小于等于0，进入死亡状态</span></span><br><span class="line">        <span class="keyword">if</span> (currentHealth &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ChangeState(ZombieState.Die);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 玩家在攻击范围内则进入攻击状态，反之进入追踪状态</span></span><br><span class="line">        <span class="keyword">if</span> (PlayerInAttackRange())</span><br><span class="line">        &#123;</span><br><span class="line">            ChangeState(ZombieState.Attack);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ChangeState(ZombieState.Chase);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="内置规则"><a href="#内置规则" class="headerlink" title="内置规则"></a>内置规则</h3><p>另一种方法就是将状态转移规则<strong>内置到状态内部</strong>。</p><p>在这里，每一个状态都是一个小模块，虽然每个模块都可以意识到其他模块的存在，但是每个模块都是一个独立的单位，而且不依赖任何外部的逻辑来决定自己是否要进行状态转移。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Zombie</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> State currentState;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CurrentHealth &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState.Execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params">State state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">PlayerInAttackRange</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...游戏逻辑</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Zombie zombie</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChaseState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Zombie zombie</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zombie.CurrentHealth &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            zombie.ChangeState(<span class="keyword">new</span> DieState());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (zombie.PlayerInAttackRange())</span><br><span class="line">        &#123;</span><br><span class="line">            zombie.ChangeState(<span class="keyword">new</span> AttackState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AttackState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Zombie zombie</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zombie.CurrentHealth &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            zombie.ChangeState(<span class="keyword">new</span> DieState());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!zombie.PlayerInAttackRange())</span><br><span class="line">        &#123;</span><br><span class="line">            zombie.ChangeState(<span class="keyword">new</span> ChaseState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DieState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Zombie zombie</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">"僵尸死亡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Update()</code> 函数只需要根据 <code>currentState</code> 来执行代码，当 <code>currentState</code> 改变时，下一次 <code>Update()</code> 的调用也会进行状态转移。这三个状态都作为对象封装，并且都给出了影响状态转移的规则（条件）。</p><p>这个结构被称为<strong>状态设计模式（state design pattern）</strong>，它提供了一种优雅的方式来实现状态驱动行为。这种实现编码简单，容易扩展，也可以容易地为状态增加<strong>进入</strong>和<strong>退出</strong>的动作。下文会给出更完整的实现。</p><h2 id="West-World-项目"><a href="#West-World-项目" class="headerlink" title="West World 项目"></a>West World 项目</h2><p>这项目是关于使用有限状态机创建一个 AI 的实际例子。游戏环境是一个古老西部风格的开采金矿的小镇，称作 West World。一开始只有一个挖金矿工 Bob，后期会加入他的妻子。任何的状态改变或者输出都会出现在控制台窗口中。West World 中有四个位置：金矿，可以存金块的银行，可以解除干渴的酒吧，还有家。矿工 Bob 会挖矿、睡觉、喝酒等，但这些都由 Bob 的当前状态决定。</p><p>项目在这里：<a href="https://github.com/Latias94/programming-game-ai-by-example-in-unity/tree/master/WestWorld" target="_blank" rel="noopener">programming-game-ai-by-example-in-unity/WestWorld/</a><br><img src="https://i.loli.net/2018/06/22/5b2cd71f9ebdb.gif" alt="West World"></p><p>当你看到矿工改变了位置时，就代表矿工改变了状态，其他的事情都是状态中发生的事情。</p><h3 id="Base-Game-Entity-类"><a href="#Base-Game-Entity-类" class="headerlink" title="Base Game Entity 类"></a>Base Game Entity 类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseGameEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 每个实体具有一个唯一的识别数字</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_ID;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 这是下一个有效的ID，每次 BaseGameEntity 被实例化这个值就被更新</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 这项目居民较少，采用预定义 id 的方式，可以忽视</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m_iNextValidID &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BaseGameEntity</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_ID = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> m_ID; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_ID = <span class="keyword">value</span>;</span><br><span class="line">            m_iNextValidID = m_ID + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在 GameManager 的 Update() 函数中调用，相当于实体自己的 Update 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">EntityUpdate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Miner-类"><a href="#Miner-类" class="headerlink" title="Miner 类"></a>Miner 类</h3><p>MIner 类是从 BaseGameEntity 类中继承的，包含很多成员变量，代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Miner</span> : <span class="title">BaseGameEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指向一个状态实例的指针</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> State m_pCurrentState;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 旷工当前所处的位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> LocationType m_Location;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 旷工的包中装了多少金块</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_iGoldCarried;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 旷工在银行存了多少金块</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_iMoneyInBank;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 口渴程度，值越高，旷工越口渴</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_iThirst;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 疲倦程度,值越高，旷工越疲倦</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_iFatigue;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Miner</span>(<span class="params"><span class="keyword">int</span> id</span>) : <span class="title">base</span>(<span class="params">id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Location = LocationType.Shack;</span><br><span class="line">        m_iGoldCarried = <span class="number">0</span>;</span><br><span class="line">        m_iMoneyInBank = <span class="number">0</span>;</span><br><span class="line">        m_iThirst = <span class="number">0</span>;</span><br><span class="line">        m_iFatigue = <span class="number">0</span>;</span><br><span class="line">        m_pCurrentState = GoHomeAndSleepTilRested.Instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 等于 Update 函数，在 GameManager 内被调用，每调用一次就变得越口渴</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">EntityUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_iThirst += <span class="number">1</span>;</span><br><span class="line">        m_pCurrentState.Execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...其他的代码看 Github 项目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Miner-状态"><a href="#Miner-状态" class="headerlink" title="Miner 状态"></a>Miner 状态</h3><p>金矿工人有四种状态：</p><ul><li><strong>EnterMineAndDigForNugget</strong>：如果矿工没在金矿，则改变位置。在金矿里了，就挖掘金块。</li><li><strong>VisitBankAndDepositGold</strong>：矿工会走到银行并且存储他携带的所有天然金矿。</li><li><strong>GoHomeAndSleepTilRested</strong>：矿工会回到他的小木屋睡觉知道他的疲劳值下降到可接受的程度。醒来继续去挖矿。</li><li><strong>QuenchThirst</strong>：去酒吧买一杯威士忌，不口渴了继续挖矿。</li></ul><div class="table-container"><table><thead><tr><th>当前状态</th><th style="text-align:center">条件</th><th style="text-align:right">状态转移</th></tr></thead><tbody><tr><td>EnterMineAndDigForNugget</td><td style="text-align:center">挖矿挖到口袋装不下</td><td style="text-align:right">VisitBankAndDepositGold</td></tr><tr><td>EnterMineAndDigForNugget</td><td style="text-align:center">口渴</td><td style="text-align:right">QuenchThirst</td></tr><tr><td>VisitBankAndDepositGold</td><td style="text-align:center">觉得自己存够钱能安心了</td><td style="text-align:right">GoHomeAndSleepTilRested</td></tr><tr><td>VisitBankAndDepositGold</td><td style="text-align:center">没存够钱</td><td style="text-align:right">EnterMineAndDigForNugget</td></tr><tr><td>GoHomeAndSleepTilRested</td><td style="text-align:center">疲劳值下降到一定程度</td><td style="text-align:right">EnterMineAndDigForNugget</td></tr><tr><td>QuenchThirst</td><td style="text-align:center">不口渴了</td><td style="text-align:right">EnterMineAndDigForNugget</td></tr></tbody></table></div><h3 id="再谈状态设计模式"><a href="#再谈状态设计模式" class="headerlink" title="再谈状态设计模式"></a>再谈状态设计模式</h3><p>之前提到要为状态实现<strong>进入</strong>和<strong>退出</strong>这两个一个状态只执行一次的逻辑，这样可以增加有限状态机的灵活性。下面是威力加强版：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当状态被进入时执行这个函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params">Miner miner</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 旷工更新状态函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Miner miner</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当状态退出时执行这个函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params">Miner miner</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个增加的方法只有在矿工改变状态时才会被调用。我们也需要修改 <code>ChangeState</code> 方法的代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params">State state</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行上一个状态的退出方法</span></span><br><span class="line">    m_pCurrentState.Exit(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 更新状态</span></span><br><span class="line">    m_pCurrentState = state;</span><br><span class="line">    <span class="comment">// 执行当前状态的进入方法</span></span><br><span class="line">    m_pCurrentState.Enter(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，每个具体的状态都添加了<strong>单例模式</strong>，这样可以节省内存资源，不必重复分配和释放内存给改变的状态。以其中一个状态为例子：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnterMineAndDigForNugget</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnterMineAndDigForNugget Instance &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">EnterMineAndDigForNugget</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Instance = <span class="keyword">new</span> EnterMineAndDigForNugget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params">Miner miner</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (miner.Location() != LocationType.Goldmine)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"矿工：走去金矿"</span>);</span><br><span class="line">            miner.ChangeLocation(LocationType.Goldmine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">Miner miner</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        miner.AddToGoldCarried(<span class="number">1</span>);</span><br><span class="line">        miner.IncreaseFatigue();</span><br><span class="line">        Debug.Log(<span class="string">"矿工：采到一个金块 | 身上有 "</span> + miner.GoldCarried() + <span class="string">" 个金块"</span>);</span><br><span class="line">        <span class="comment">// 口袋里金块满了就去银行存</span></span><br><span class="line">        <span class="keyword">if</span> (miner.PocketsFull())</span><br><span class="line">        &#123;</span><br><span class="line">            miner.ChangeState(VisitBankAndDepositGold.Instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 口渴了就去酒吧喝威士忌</span></span><br><span class="line">        <span class="keyword">if</span> (miner.Thirsty())</span><br><span class="line">        &#123;</span><br><span class="line">            miner.ChangeState(QuenchThirst.Instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params">Miner miner</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">"矿工：离开金矿"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这里，大家应该都会很熟悉。这不就是 Unity 中动画控制器 Animator 的功能吗！</p><p>没错，Animator 也是一个状态机，有和我们之前实现十分相似的功能，例如：添加状态转移的条件，每个状态都有进入、执行、退出三个回调方法供使用。</p><p><img src="https://i.loli.net/2018/06/22/5b2ce778774fa.png" alt></p><p>我们可以创建 Behaviour 脚本，对 Animator 中每一个状态的进入、执行、退出等方法进行自定义，所以有些人直接拿 Animator 当状态机来使用，不过我们在下文还会为我们的状态机实现扩展更多的功能。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewState</span> : <span class="title">StateMachineBehaviour</span> &#123;</span><br><span class="line">    <span class="comment">// OnStateEnter is called when a transition starts and the state machine starts to evaluate this state</span></span><br><span class="line">    <span class="comment">//override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks</span></span><br><span class="line">    <span class="comment">//override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// OnStateExit is called when a transition ends and the state machine finishes evaluating this state</span></span><br><span class="line">    <span class="comment">//override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使-State-基类可重用"><a href="#使-State-基类可重用" class="headerlink" title="使 State 基类可重用"></a>使 State 基类可重用</h2><p>由于上面四个状态是矿工独有的状态，如果要新建不同功能的角色，就有必要创建一个分离的 State 基类，这里用泛型实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public abstract class State&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当状态被进入时执行这个函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 旷工更新状态函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当状态退出时执行这个函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态翻转（State-Blip）"><a href="#状态翻转（State-Blip）" class="headerlink" title="状态翻转（State Blip）"></a>状态翻转（State Blip）</h2><p>这个项目其实有点像模拟人生这个游戏，其中有一点有意思的是，当模拟人生的主角做某件事时忽然要上厕所，去完之后会继续做之前停止的事情。这种返回前一个状态的行为就是<strong>状态翻转（State Blip）</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> State&lt;T&gt; m_pCurrentState;</span><br><span class="line"><span class="keyword">private</span> State&lt;T&gt; m_pPreviousState;</span><br><span class="line"><span class="keyword">private</span> State&lt;T&gt; m_pGlobalState;</span><br></pre></td></tr></table></figure><p><code>m_pGlobalState</code> 是一个全局状态，也会在 <code>Update()</code> 函数中和 <code>m_pCurrentState</code> 一起调用。如果有紧急的行为中断状态，就把这行为（例如上厕所）放到全局状态中，等到全局状态为空再进入当前状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StateUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果有一个全局状态存在，调用它的执行方法</span></span><br><span class="line">    <span class="keyword">if</span> (m_pGlobalState != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pGlobalState.Execute(m_pOwner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_pCurrentState != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pCurrentState.Execute(m_pOwner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StateMachine-类"><a href="#StateMachine-类" class="headerlink" title="StateMachine 类"></a>StateMachine 类</h2><p>通过把所有与状态相关的数据和方法封装到一个 StateMachine 类中，可以使得设计更为简洁。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public class StateMachine&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T m_pOwner;</span><br><span class="line">    <span class="keyword">private</span> State&lt;T&gt; m_pCurrentState;</span><br><span class="line">    <span class="keyword">private</span> State&lt;T&gt; m_pPreviousState;</span><br><span class="line">    <span class="keyword">private</span> State&lt;T&gt; m_pGlobalState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateMachine</span>(<span class="params">T owner</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pOwner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCurrentState</span>(<span class="params">State&lt;T&gt; state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pCurrentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPreviousState</span>(<span class="params">State&lt;T&gt; state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pPreviousState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetGlobalState</span>(<span class="params">State&lt;T&gt; state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pGlobalState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StateMachineUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 如果有一个全局状态存在，调用它的执行方法</span></span><br><span class="line">        <span class="keyword">if</span> (m_pGlobalState != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pGlobalState.Execute(m_pOwner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_pCurrentState != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pCurrentState.Execute(m_pOwner);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params">State&lt;T&gt; newState</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pPreviousState = m_pCurrentState;</span><br><span class="line">        m_pCurrentState.Exit(m_pOwner);</span><br><span class="line">        m_pCurrentState = newState;</span><br><span class="line">        m_pCurrentState.Enter(m_pOwner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回之前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RevertToPreviousState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ChangeState(m_pPreviousState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State&lt;T&gt; <span class="title">CurrentState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pCurrentState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State&lt;T&gt; <span class="title">PreviousState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pPreviousState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State&lt;T&gt; <span class="title">GlobalState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pGlobalState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsInState</span>(<span class="params">State&lt;T&gt; state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pCurrentState == state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新人物-Elsa"><a href="#新人物-Elsa" class="headerlink" title="新人物 Elsa"></a>新人物 Elsa</h2><p>第二个项目会演示之前的改进。Elsa 是矿工 Bob 的妻子，她会清理小木屋和上厕所（老喝咖啡）。其中 VisitBathroom 状态是用状态翻转实现的，即上完厕所要回到之前的状态。</p><p>项目地址：<a href="https://github.com/Latias94/programming-game-ai-by-example-in-unity/tree/master/WestWorldWithWoman" target="_blank" rel="noopener">programming-game-ai-by-example-in-unity/WestWorldWithWoman/</a></p><p><img src="https://i.loli.net/2018/06/22/5b2ce58c91280.gif" alt="West World With Woman"></p><h2 id="消息功能"><a href="#消息功能" class="headerlink" title="消息功能"></a>消息功能</h2><p>好的游戏实现趋向于事件驱动。即当一件事情发生了（发射了武器，主角发出了声音等等），事件会被广播给游戏中相关的对象。</p><p>整合事件（观察者模式）的状态机可以实现更灵活的需求，例如：一个足球运动员从队友旁边通过时，传球者可以发送一个（延时）消息，通知队友应该什么时候到相应位置来接球；一个士兵正在开枪攻击敌人，忽然一个队友中了流弹，这时候队友可以发送一个（即时）消息，通知士兵立刻救援队友。</p><h3 id="Telegram-结构"><a href="#Telegram-结构" class="headerlink" title="Telegram 结构"></a>Telegram 结构</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Telegram</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> BaseGameEntity Sender &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> BaseGameEntity Receiver &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> MessageType Message &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> DispatchTime &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; ExtraInfo &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Telegram</span>(<span class="params"><span class="keyword">float</span> time, BaseGameEntity sender, BaseGameEntity receiver, MessageType message,</span></span></span><br><span class="line"><span class="function"><span class="params">        Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; extraInfo = <span class="literal">null</span></span>) : <span class="title">this</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sender = sender;</span><br><span class="line">        Receiver = receiver;</span><br><span class="line">        DispatchTime = time;</span><br><span class="line">        Message = message;</span><br><span class="line">        ExtraInfo = extraInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用结构体来实现消息。要发送的消息可以作为枚举加在 <code>MessageType</code> 中，DispatchTime 是决定立刻发送还是延时发送的时间戳，ExtraInfo 能携带额外的信息。这里只用两种消息做例子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MessageType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 矿工让妻子知道他已经回到小屋了</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    HiHoneyImHome,    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 妻子通知矿工自己什么时候要将晚饭从烤箱中拿出来</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 以及通知矿工食物已经放在桌子上了</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    StewReady,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>下面是 MessageDispatcher 类，用来管理消息的发送。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 管理消息发送的类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 处理立刻被发送的消息，和打上时间戳的消息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageDispatcher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MessageDispatcher Instance &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">MessageDispatcher</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Instance = <span class="keyword">new</span> MessageDispatcher();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MessageDispatcher</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        priorityQueue = <span class="keyword">new</span> HashSet&lt;Telegram&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据时间排序的优先级队列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Telegram&gt; priorityQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 该方法被 DispatchMessage 或者 DispatchDelayedMessages 利用。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 该方法用最新创建的 telegram 调用接受实体的消息处理成员函数 receiver</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Discharge</span>(<span class="params">BaseGameEntity receiver, Telegram telegram</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!receiver.HandleMessage(telegram))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(<span class="string">"消息未处理"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建和管理消息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="delay"&gt;</span>时间的延迟（要立刻发送就用零或负值）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="senderId"&gt;</span>发送者 ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="receiverId"&gt;</span>接受者 ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="message"&gt;</span>消息本身<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="extraInfo"&gt;</span>附加消息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispatchMessage</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">float</span> delay,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> senderId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> receiverId,</span></span></span><br><span class="line"><span class="function"><span class="params">        MessageType message,</span></span></span><br><span class="line"><span class="function"><span class="params">        Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; extraInfo</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获得消息发送者</span></span><br><span class="line">        BaseGameEntity sender = EntityManager.Instance.GetEntityFromId(senderId);</span><br><span class="line">        <span class="comment">// 获得消息接受者</span></span><br><span class="line">        BaseGameEntity receiver = EntityManager.Instance.GetEntityFromId(receiverId);</span><br><span class="line">        <span class="keyword">if</span> (receiver == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(<span class="string">"[MessageDispatcher] 找不到消息接收者"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> currentTime = Time.time;</span><br><span class="line">        <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Telegram telegram = <span class="keyword">new</span> Telegram(<span class="number">0</span>, sender, receiver, message, extraInfo);</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="keyword">string</span>.Format(</span><br><span class="line">                <span class="string">"消息发送时间: &#123;0&#125; ，发送者是：&#123;1&#125;，接收者是：&#123;2&#125;。消息是 &#123;3&#125;"</span>,</span><br><span class="line">                currentTime,</span><br><span class="line">                sender.Name,</span><br><span class="line">                receiver.Name,</span><br><span class="line">                message.ToString()));</span><br><span class="line">            Discharge(receiver, telegram);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Telegram delayedTelegram = <span class="keyword">new</span> Telegram(currentTime + delay, sender, receiver, message, extraInfo);</span><br><span class="line">            priorityQueue.Add(delayedTelegram);</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="keyword">string</span>.Format(</span><br><span class="line">                <span class="string">"延时消息发送时间: &#123;0&#125; ，发送者是：&#123;1&#125;，接收者是：&#123;2&#125;。消息是 &#123;3&#125;"</span>,</span><br><span class="line">                currentTime,</span><br><span class="line">                sender.Name,</span><br><span class="line">                receiver.Name,</span><br><span class="line">                message.ToString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发送延时消息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 这个方法会放在游戏的主循环中，以正确地和及时地发送任何定时的消息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayDelayedMessages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> currentTime = Time.time;</span><br><span class="line">        <span class="keyword">while</span> (priorityQueue.Count &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">               priorityQueue.First().DispatchTime &lt; currentTime &amp;&amp;</span><br><span class="line">               priorityQueue.First().DispatchTime &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Telegram telegram = priorityQueue.First();</span><br><span class="line">            BaseGameEntity receiver = telegram.Receiver;</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="keyword">string</span>.Format(<span class="string">"延时消息开始准备分发，接收者是 &#123;0&#125;，消息是 &#123;1&#125;"</span>,</span><br><span class="line">                receiver.Name,</span><br><span class="line">                telegram.Message.ToString()));</span><br><span class="line">            <span class="comment">// 开始分发消息</span></span><br><span class="line">            Discharge(receiver, telegram);</span><br><span class="line">            priorityQueue.Remove(telegram);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DispatchMessage</code> 函数会管理消息的发送，即时消息会直接由 <code>Discharge</code> 函数发送到接收者，延时消息会进入队列，通过 GameManager 游戏主循环，每一帧调用 <code>DisplayDelayedMessages()</code> 函数来轮询要发送的消息，当发现当前时间超过了消息的发送时间，就把消息发送给接收者。</p><h3 id="处理消息"><a href="#处理消息" class="headerlink" title="处理消息"></a>处理消息</h3><p>处理消息的话修改 BaseGameEntity 来增加处理消息的功能。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseGameEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... 省略无关代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">bool</span> <span class="title">HandleMessage</span>(<span class="params">Telegram message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Miner</span> : <span class="title">BaseGameEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">HandleMessage</span>(<span class="params">Telegram message</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_stateMachine.HandleMessage(message);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StateMachine 代码也要改：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StateMachine&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">HandleMessage</span>(<span class="params">Telegram message</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pCurrentState != <span class="literal">null</span> &amp;&amp; m_pCurrentState.OnMessage(m_pOwner, message))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果当前状态没有代码适当的处理消息</span></span><br><span class="line">        <span class="comment">// 它会发送到实体的全局状态的消息处理者</span></span><br><span class="line">        <span class="keyword">if</span> (m_pCurrentState != <span class="literal">null</span> &amp;&amp; m_pGlobalState.OnMessage(m_pOwner, message))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>State 基类也要修改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public abstract class State&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 处理消息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>接受者<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="message"&gt;</span>要处理的消息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>消息是否成功被处理<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">bool</span> <span class="title">OnMessage</span>(<span class="params">T entity, Telegram message</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Discharge</code> 函数发送消息给接收者，接收者将消息给他 StateMachine 的 <code>HandleMessage</code> 函数处理，消息最后通过 StateMachine 到达各种状态的 <code>OnMessage</code> 函数，开始根据消息的类型来做出处理（例如进行状态转移）。</p><p>具体实现请看项目代码：<a href="https://github.com/Latias94/programming-game-ai-by-example-in-unity/tree/master/WestWorldWithMessaging" target="_blank" rel="noopener">programming-game-ai-by-example-in-unity/WestWorldWithMessaging/</a></p><p><img src="https://i.loli.net/2018/06/22/5b2cf105c1153.png" alt="West World With Messaging"></p><p>这里实现的场景是：</p><ol><li>矿工 Bob 回家后发送 HiHoneyImHome <strong>即时消息</strong>给他的妻子 Elsa，提醒她做饭。</li><li>Elsa 收到消息后，停止手上的活儿，开始进入 CookStew 状态做饭。</li><li>Elsa 进入 CookStew 状态后，把肉放到烤炉里面，并且发送 StewReady <strong>延时消息</strong>提醒自己在一段时间后拿出烤炉中的肉。</li><li>Elsa 收到 StewReady 消息后，发送一个 StewReady <strong>即时消息</strong>给 Bob 提醒他饭已经做好了。如果 Bob 这时不在家，命令行将显示 Discharge 函数中的 Warning “消息未处理”。Bob 在家，就会开心地去吃饭。 </li><li>Bob 收到 StewReady 的消息，状态转移到 EatStew，开始吃饭。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时候我们可能会用到多个状态机来并行工作，例如一个 AI 有多个状态，其中包括攻击状态，而攻击状态又有不同攻击类型（瞄准和射击），像一个状态机包含另一个状态机这种<strong>层次化的状态机</strong>。当然也有其他不同的使用场景，我们不能受限于自己的想象力。</p><p>本文根据《游戏人工智能编程案例精粹（修订版）》进行了 Unity 版本的实现，我对有限状态机也有了更清晰的认识。阅读这本书的同时也会把 Unity 实现放到下面的仓库地址中，下篇文章可能会总结行为树的知识，如果没看到请督促我~</p><p>项目地址：<a href="https://github.com/Latias94/programming-game-ai-by-example-in-unity" target="_blank" rel="noopener">programming-game-ai-by-example-in-unity</a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://book.douban.com/subject/19930152/" target="_blank" rel="noopener">《游戏人工智能编程案例精粹（修订版）》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在阅读《游戏人工智能编程案例精粹（修订版）》，本文是书中第二章的一篇笔记。&lt;/p&gt;
&lt;p&gt;有限状态机（英语：Finite-state machine, 缩写：FSM），是一个被数学家用来解决问题的严格形式化的设备，在游戏业中也常见有限状态机的身影。&lt;/p&gt;
&lt;p&gt;对于游戏程序员来说，可以用下面这个定义来了解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个有限状态机是一个设备（device），或是一个设备模型（a model of a device）。具有有限数量的状态，它可以在任何给定的时间根据输入进行操作，是的从一个状态变换到另一个状态，或者是促使一个输出或者一种行为的发生。一个有限状态机在任何瞬间只能处在一种状态。&lt;br&gt;——《游戏人工智能编程案例精粹（修订版）》 Mat Buckland&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有限状态机就是要把一个对象的行为分解成易于处理的“块”或者状态。拿某个开关来说，我们可以把它分成两个状态：开或关。其中开开关这个操作，就是一次&lt;strong&gt;状态转移&lt;/strong&gt;，使开关的状态从“关”变换到“开”，反之亦然。&lt;br&gt;
    
    </summary>
    
      <category term="游戏开发" scheme="http://frankorz.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://frankorz.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>2D 像素风平台游戏 Aretha’s Journey</title>
    <link href="http://frankorz.com/2018/06/17/arethas-journey/"/>
    <id>http://frankorz.com/2018/06/17/arethas-journey/</id>
    <published>2018-06-17T11:38:10.000Z</published>
    <updated>2018-06-22T13:17:28.793Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>继<a href="https://frankorz.com/2018/04/13/first-board-game/">《我设计的第一个桌游》</a>后，这次带来的是电子游戏的作业—— 2D像素平台游戏 Aretha’s Journey。</p><h2 id="游戏背景"><a href="#游戏背景" class="headerlink" title="游戏背景"></a>游戏背景</h2><p>来自潘达尼亚的女孩 Aretha 已经离乡别井几年了，回乡之际，发现族人们都被神所诅咒而变成了石头，原因是他们的族人曾尝试反抗神。于是 Aretha 便踏上拯救家园之路……<br><a id="more"></a></p><h2 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h2><p>美术风格采用了像素风，游戏一共有五关，第一关为教学关，第五关为 Boss 战，截图如下：</p><p><img src="https://i.loli.net/2018/06/17/5b2624189ebf8.png" alt="Stage01"></p><p><img src="https://i.loli.net/2018/06/17/5b2624185d904.png" alt="Stage02"></p><p><img src="https://i.loli.net/2018/06/17/5b2624187816a.png" alt="Stage03"></p><p><img src="https://i.loli.net/2018/06/17/5b262418800b1.png" alt="Stage04"></p><p><img src="https://i.loli.net/2018/06/17/5b2624f413674.png" alt="Stage05"></p><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>游戏类型是常见的平台游戏。主角可以收集金币，去商人那购买”遗物”（Relic），遗物可以看做是一种装备，穿上能提供一些特殊增益，例如增加血上限、打怪吸血等。本来想设计成 Roguelike 中众多能提供不同能力的道具，但苦于时间不足，因此在游戏中只设计了几个能购买的遗物，有些遗物能在宝箱里面随机开出来。</p><p>游戏地图是用 Unity 2017 的新特性 TileMap 做的，镜头使用 2D Cinemachine。现在回看作品，其实这一类型的游戏并不难，但是我们团队除了我都是第一次接触 Unity，踩过不少坑，也导致到 Due 的时候很多东西都没做完。</p><p>我负责了游戏中除战斗系统外的编程任务，例如：Game Loop、Item Respawn、角色状态、背包系统等功能。可以说很多代码都是重用性很高的，但自己以前没有积累，所以做这游戏的时候也只能从零开始做，在编程中逐渐模块化系统代码。</p><h2 id="Showcase"><a href="#Showcase" class="headerlink" title="Showcase"></a>Showcase</h2><p>不过很开心的是，游戏被入选到学校的 Student Games Showcase 里面，这个 Showcase 里还有其他同学期其他同学所做的优秀的游戏作品。大家有兴趣的话可以在这个网站查看2018年的入选游戏：<a href="http://www.gamesstudio.org/games" target="_blank" rel="noopener">Student Games</a> 。我们游戏在 Showcase 的评委投票和公开投票中都获得第二名的成绩，自己和小组都是很开心的~</p><p><img src="https://i.loli.net/2018/06/17/5b262a27c0eb6.jpg" alt="猜猜我们组在哪~"></p><p><img src="https://i.loli.net/2018/06/17/5b262a292f38c.jpg" alt="评委投票"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>游戏下载：<a href="https://github.com/Latias94/Aretha-s-Journey" target="_blank" rel="noopener">Aretha-s-Journey</a> </p><p>总而言之，游戏设计课认识不少新朋友，也收获了很多，自己在游戏开发的路上又往前走了一步。</p><p>Flag: 以后博客会更新得勤一些，学了啥就写啥，不能等到吃透了一个东西再放上来= =。</p><blockquote><p>Thank you for playing my game.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继&lt;a href=&quot;https://frankorz.com/2018/04/13/first-board-game/&quot;&gt;《我设计的第一个桌游》&lt;/a&gt;后，这次带来的是电子游戏的作业—— 2D像素平台游戏 Aretha’s Journey。&lt;/p&gt;
&lt;h2 id=&quot;游戏背景&quot;&gt;&lt;a href=&quot;#游戏背景&quot; class=&quot;headerlink&quot; title=&quot;游戏背景&quot;&gt;&lt;/a&gt;游戏背景&lt;/h2&gt;&lt;p&gt;来自潘达尼亚的女孩 Aretha 已经离乡别井几年了，回乡之际，发现族人们都被神所诅咒而变成了石头，原因是他们的族人曾尝试反抗神。于是 Aretha 便踏上拯救家园之路……&lt;br&gt;
    
    </summary>
    
    
      <category term="游戏设计" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>我设计的第一个桌游</title>
    <link href="http://frankorz.com/2018/04/13/first-board-game/"/>
    <id>http://frankorz.com/2018/04/13/first-board-game/</id>
    <published>2018-04-13T06:45:07.000Z</published>
    <updated>2018-06-22T13:18:21.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>很久没写文章了，这次带来的是游戏设计课中的桌游大作业。</p><p>小组成员在第一节课就随机分好了，我们一开始选择每人准备一个桌游原型，然后共同选择一个原型来深入设计，最后一起选择了我的设计原型。<br><a id="more"></a></p><h2 id="第一版设计"><a href="#第一版设计" class="headerlink" title="第一版设计"></a>第一版设计</h2><p><img src="https://i.loli.net/2018/04/13/5ad027ce886e5.png" alt="第一版地图"></p><p>我的设计是：每个玩家初始有 4 HP，四个玩家从左下角通过掷骰子的方式在地图的点上往终点走，先到终点者胜，HP为零时需要从起点重新开始。地图中有四种不同功能的点，玩家到达某个点时会触发相应效果：</p><ul><li>黑点：无特殊效果</li><li>绿点：休息点，回 1 HP</li><li>红点：陷阱点，拿一张陷阱卡，立即使用来接受惩罚，如： 扣血、禁一回合等效果</li><li>黄点：宝物点，拿一张宝物卡，可以在当前回合使用，也可以藏起来等以后的回合使用，如：回血、其他玩家倒退三步、禁某玩家一回合等效果</li></ul><p>原型的灵感主要来自于最近常玩的 <a href="http://store.steampowered.com/app/646570/Slay_the_Spire/" target="_blank" rel="noopener">“Slay the Spire”</a> 中的地图，玩家通过选择不同的道路抉择，目标是活着打败关底 BOSS。在第一版设计中，整个的PVE设计下，也考虑了 PVP 因素：两个玩家走到同一个点时可以进行决斗，每人 -1 HP。由于步数主要依赖于随机的骰子得来的数字，所以道路不能设计太多，尽量增加玩家相遇的机会。同时在较长的支路中，宝物点较多，陷阱点也较多，机遇与风险并存。</p><p>这样设计的话，我们主要考虑地图设计的平衡和去扩展卡牌的效果即可。</p><p>但是问题也来了：</p><ul><li>总有运气出奇好的玩家一路趋吉避凶，什么挫折都没遇到就到终点了</li><li>玩家死了之后就要回到起点重新开始，没干劲继续玩了</li><li>游戏性不足，现有的游戏元素还是太少，主要靠骰子和抓牌时的运气，玩家要考虑的实际上不多</li></ul><h2 id="第二版设计"><a href="#第二版设计" class="headerlink" title="第二版设计"></a>第二版设计</h2><p>针对前面的第一点问题，新增了“地形”的设计：</p><p><img src="https://i.loli.net/2018/04/13/5ad02e2f1a8be.png" alt></p><p>地形不是一个能走的点，效果只有在玩家走过（在点上走跨越地形）时触发。相对于点的设计，地形是一个“必须触发”的设计。每个玩家在跨过山脉的时候必须 -1 HP，遇到龙窟的时候也能必得一张宝物卡，这样降低了运气的成分，提高了功能卡的利用率。</p><p>对于上面的第二个问题，我们通过设计“旅馆”的一种地形，玩家走过 +1 HP，同时可以当做玩家的重生点，玩家死后可以从路过的旅馆重生。</p><p>针对第三个问题，我们新增了英雄卡的设计。每个英雄有不同能力，例如坦克天生带 5 HP，一些特殊的英雄还能根据现有元素设计能力。我们也新增了 AP（攻击力）和装备卡的设计，注入更多的 RPG 元素。</p><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><p><img src="https://i.loli.net/2018/04/13/5ad030cf4f485.jpg" alt></p><h3 id="英雄卡"><a href="#英雄卡" class="headerlink" title="英雄卡"></a>英雄卡</h3><p><img src="https://i.loli.net/2018/04/13/5ad031273fd55.jpg" alt></p><h3 id="装备卡及卡背"><a href="#装备卡及卡背" class="headerlink" title="装备卡及卡背"></a>装备卡及卡背</h3><p><img src="https://i.loli.net/2018/04/13/5ad031592c916.jpg" alt></p><h3 id="陷阱卡"><a href="#陷阱卡" class="headerlink" title="陷阱卡"></a>陷阱卡</h3><p>陷阱卡太多就不放上来了，效果主要是退几步、禁一回合、丢到所有的卡牌回到最近的起点等等。</p><h3 id="宝物卡"><a href="#宝物卡" class="headerlink" title="宝物卡"></a>宝物卡</h3><p>效果主要有：</p><ul><li>回血</li><li>偷别人一张卡（宝物卡或者装备卡）</li><li>其他玩家退三步</li><li>多一次掷骰子行动的机会</li><li>+1 HP 并再拿一张宝物卡</li><li>每个玩家拿一张宝物卡（增加卡牌利用率）</li><li>和某玩家决斗！（增加 PVP 的存在感）</li><li>…</li></ul><h3 id="说明书中部分内容"><a href="#说明书中部分内容" class="headerlink" title="说明书中部分内容"></a>说明书中部分内容</h3><p><img src="https://i.loli.net/2018/04/13/5ad033beeed3b.png" alt></p><p><img src="https://i.loli.net/2018/04/13/5ad034060f860.png" alt></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在昨天晚上的游戏设计课里，每个小组都要玩别的小组做的桌游并打分，在五分满分的前提下，参与的小组给我们游戏大多打了四分以上，主要进行游戏设计部分的我还是很开心的！！！在文尾再次感谢小组成员所付出的努力，特别是主要进行美术设计的韩国小哥。</p><p>下一个大作业做电子游戏，准备做 Roguelike，有什么好的建议也可以在评论区提出~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没写文章了，这次带来的是游戏设计课中的桌游大作业。&lt;/p&gt;
&lt;p&gt;小组成员在第一节课就随机分好了，我们一开始选择每人准备一个桌游原型，然后共同选择一个原型来深入设计，最后一起选择了我的设计原型。&lt;br&gt;
    
    </summary>
    
    
      <category term="游戏设计" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>寻路算法-贪婪最佳优先算法</title>
    <link href="http://frankorz.com/2017/12/16/greedy-best-find-search/"/>
    <id>http://frankorz.com/2017/12/16/greedy-best-find-search/</id>
    <published>2017-12-16T15:24:27.000Z</published>
    <updated>2017-12-17T03:46:22.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近开始接触寻路算法，对此不太了解的话建议读者先看这篇文章<a href="http://www.gameres.com/777251.html" target="_blank" rel="noopener">《如何快速找到最优路线？深入理解游戏中寻路算法》</a> 。</p><blockquote><p>所有寻路算法都需要一种方法以数学的方式估算某个节点是否应该被选择。大多数游戏都会使用<strong>启发式</strong>（heuristic） ，以 h(x) 表示，就是估算从某个位置到目标位置的开销。理想情况下，启发式结果越接近真实越好。</p><p>——《游戏编程算法与技巧》</p></blockquote><p>今天主要说的是贪婪最佳优先搜索（Greedy Best-First Search），贪心算法的含义是：求解问题时，总是做出在当前来说最好的选择。通俗点说就是，这是一个“短视”的算法。<br><a id="more"></a><br>为什么说是“短视”呢？首先要明白一个概念：<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">曼哈顿距离</a>。</p><h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h3><p>曼哈顿距离被认为不能沿着对角线移动，如下图中，红、蓝、黄线都代表等距离的曼哈顿距离。绿线代表<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">欧氏距离</a>，如果地图允许对角线移动的话，曼哈顿距离会经常比欧式距离高。</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=591525660,2345357852&amp;fm=27&amp;gp=0.jpg" alt="img"></p><p>在 2D 地图中，曼哈顿距离的计算如下：</p><p><img src="https://i.loli.net/2017/12/16/5a353e6bc0c97.png" alt="img"></p><h3 id="贪婪最佳优先搜索的简介"><a href="#贪婪最佳优先搜索的简介" class="headerlink" title="贪婪最佳优先搜索的简介"></a>贪婪最佳优先搜索的简介</h3><p>贪婪最佳优先搜索的每一步，都会查找相邻的节点，计算它们距离终点的曼哈顿距离，即最低开销的启发式。</p><p>贪婪最佳优先搜索在障碍物少的时候足够的快，但最佳优先搜索得到的都是次优的路径。例如下图，算法不断地寻找当前 h（启发式）最小的值，但这条路径很明显不是最优的。</p><p><img src="https://i.loli.net/2017/12/16/5a352478a9196.png" alt="img"></p><p>贪婪最佳优先搜索“未能远谋”，大多数游戏都要比贪婪最佳优先算法所能提供的更好的寻路，但大多数寻路算法都是基于贪婪算法，所以了解该算法很有必要。</p><p>首先是节点类，每个节点需要存储上一个节点的引用和 h 值，其他信息是为了方便算法的实现。存储上一个节点的引用是为了像一个链表一样，最后能通过引用得到路径中所有的节点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 上一个节点</span></span><br><span class="line"><span class="keyword">public</span> Node parent;</span><br><span class="line"><span class="comment">// 节点的 h(x) 值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> h;</span><br><span class="line"><span class="comment">// 与当前节点相邻的节点</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; adjecent = <span class="keyword">new</span> List&lt;Node&gt;();</span><br><span class="line"><span class="comment">// 节点所在的行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> row;</span><br><span class="line"><span class="comment">// 节点所在的列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> col;</span><br><span class="line"><span class="comment">// 清除节点信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parent = <span class="literal">null</span>;</span><br><span class="line">h = <span class="number">0.0</span>f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是图类，图类最主要的任务就是根据提供的二维数组初始化所有的节点，包括寻找他们的相邻节点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Graph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> rows = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> cols = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> Node[] nodes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Graph</span>(<span class="params"><span class="keyword">int</span>[, ] grid</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rows = grid.GetLength(<span class="number">0</span>);</span><br><span class="line">cols = grid.GetLength(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">nodes = <span class="keyword">new</span> Node[grid.Length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">Node node = <span class="keyword">new</span> Node();</span><br><span class="line">node.row = i / cols;</span><br><span class="line">node.col = i - (node.row * cols);</span><br><span class="line">nodes[i] = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到每一个节点的相邻节点</span></span><br><span class="line"><span class="keyword">foreach</span> (Node node <span class="keyword">in</span> nodes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = node.row;</span><br><span class="line"><span class="keyword">int</span> col = node.col;</span><br><span class="line"><span class="comment">// 墙，即节点不能通过的格子 </span></span><br><span class="line"><span class="comment">// 1 为墙，0 为可通过的格子</span></span><br><span class="line"><span class="keyword">if</span> (grid[row, col] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 上方的节点</span></span><br><span class="line"><span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; grid[row - <span class="number">1</span>, col] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">node.adjecent.Add(nodes[cols * (row - <span class="number">1</span>) + col]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右边的节点</span></span><br><span class="line"><span class="keyword">if</span> (col &lt; cols - <span class="number">1</span> &amp;&amp; grid[row, col + <span class="number">1</span>] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">node.adjecent.Add(nodes[cols * row + col + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下方的节点</span></span><br><span class="line"><span class="keyword">if</span> (row &lt; rows - <span class="number">1</span> &amp;&amp; grid[row + <span class="number">1</span>, col] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">node.adjecent.Add(nodes[cols * (row + <span class="number">1</span>) + col]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边的节点</span></span><br><span class="line"><span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; grid[row, col - <span class="number">1</span>] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">node.adjecent.Add(nodes[cols * row + col - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在算法类中，我们需要记录开放集合和封闭集合。开放集合指的是当前步骤我们需要考虑的节点，例如算法开始时就要考虑初始节点的相邻节点，并从其找到最低的 h(x) 值开销的节点。封闭集合存放已经计算过的节点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开放集合</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; reachable;</span><br><span class="line"><span class="comment">// 封闭集合，存放已经被算法估值的节点</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Node&gt; explored;</span><br></pre></td></tr></table></figure><p>下面是算法主要的逻辑，额外的函数可以查看项目源码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stack&lt;Node&gt; <span class="title">Finding</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 存放查找路径的栈</span></span><br><span class="line">    Stack&lt;Node&gt; path;</span><br><span class="line">    Node currentNode = reachable[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 迭代查找，直至找到终点节点</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode != destination)</span><br><span class="line">    &#123;</span><br><span class="line">        explored.Add(currentNode);</span><br><span class="line">        reachable.Remove(currentNode);</span><br><span class="line">      <span class="comment">// 将当前节点的相邻节点加入开放集合</span></span><br><span class="line">        AddAjacent(currentNode);</span><br><span class="line"><span class="comment">// 查找了相邻节点后依然没有可以考虑的节点，查找失败。</span></span><br><span class="line">        <span class="keyword">if</span> (reachable.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 将开放集合中h值最小的节点当做当前节点</span></span><br><span class="line">        currentNode = FindLowestH();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找成功，则根据节点parent找到查找到的路径</span></span><br><span class="line">    path = <span class="keyword">new</span> Stack&lt;Node&gt;();</span><br><span class="line">    Node node = destination;</span><br><span class="line">    <span class="comment">// 先将终点压入栈，再迭代地把node的前一个节点压入栈</span></span><br><span class="line">    path.Push(node);</span><br><span class="line">    <span class="keyword">while</span> (node.parent != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        path.Push(node.parent);</span><br><span class="line">        node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此以外还有些展示算法的类，代码不在这里展出。下面是算法执行的截图，其中白色格子为可走的格子，灰色格子是不可穿越的，红色格子为查找到的路径，左上角格子为查找起点，右上角格子为查找终点。</p><p><img src="https://i.loli.net/2017/12/16/5a352df416fd6.png" alt="small"></p><p><img src="https://i.loli.net/2017/12/16/5a352f076fc3c.png" alt="big"></p><p>后一个实例也展现了其”短视”的缺点，红线走了共65个格子，但蓝箭头方向只走了45个格子。</p><p><img src="https://i.loli.net/2017/12/16/5a35305e2845e.png" alt></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>还有一种方案就是直接计算起点到终点的路径，这样可以节省一点计算开销。如下方右图，左图为广度优先算法。</p><p><img src="http://di.gameres.com/attachment/forum/201709/30/165420ib4lhsk03dk7k8ub.gif" alt="img"></p><p>本项目源码在<a href="https://github.com/Latias94/PathFindingDemo" target="_blank" rel="noopener">Github-PathFindingDemo</a>。<br>了解了贪婪最佳优先算法后，下一篇文章会在本文基础上讲A* 寻路。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.gameres.com/777251.html" target="_blank" rel="noopener">如何快速找到最优路线？深入理解游戏中寻路算法</a></li><li><a href="http://blog.jobbole.com/71044/" target="_blank" rel="noopener">关于寻路算法的一些思考（1）：A*算法介绍</a></li><li>《游戏编程算法与技巧》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始接触寻路算法，对此不太了解的话建议读者先看这篇文章&lt;a href=&quot;http://www.gameres.com/777251.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《如何快速找到最优路线？深入理解游戏中寻路算法》&lt;/a&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有寻路算法都需要一种方法以数学的方式估算某个节点是否应该被选择。大多数游戏都会使用&lt;strong&gt;启发式&lt;/strong&gt;（heuristic） ，以 h(x) 表示，就是估算从某个位置到目标位置的开销。理想情况下，启发式结果越接近真实越好。&lt;/p&gt;
&lt;p&gt;——《游戏编程算法与技巧》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天主要说的是贪婪最佳优先搜索（Greedy Best-First Search），贪心算法的含义是：求解问题时，总是做出在当前来说最好的选择。通俗点说就是，这是一个“短视”的算法。&lt;br&gt;
    
    </summary>
    
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>3D数学基础-矩阵变换（二）</title>
    <link href="http://frankorz.com/2017/09/24/matrix-transformation-2/"/>
    <id>http://frankorz.com/2017/09/24/matrix-transformation-2/</id>
    <published>2017-09-24T09:13:49.000Z</published>
    <updated>2019-05-14T11:42:39.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>上一篇笔记<a href="http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/">3D 数学基础-向量运算基础和矩阵变换</a>记录了一些向量和矩阵运算的基础，和一些矩阵基本的变换。这篇笔记主要介绍了平移变换、齐次坐标、平移和旋转变换的组合、法线变换和改变坐标系。</p><a id="more"></a><h2 id="平移（Translation）"><a href="#平移（Translation）" class="headerlink" title="平移（Translation）"></a>平移（Translation）</h2><p>前一篇文章总结了旋转、缩放等变换，这里介绍一下平移变换。</p><p>假如我们需要把X坐标从 x 变换到 x + 5，我们需要构造什么样的变换矩阵来实现平移呢？</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z' \end{bmatrix}=\begin{bmatrix} & & \\ & ? & \\ & & \end{bmatrix}\begin{bmatrix}x \\ y \\ z \end{bmatrix}=\begin{bmatrix}x+5 \\ y \\ z \end{bmatrix}</script><p>要注意的是，变换矩阵不能包含 x、y、z 等坐标变量。例如要得到 x + 5，那么矩阵的第一个行向量不能是 <script type="math/tex">(1, 0, 5/z)</script>，因为变换的一个重要性质是<strong>变换矩阵保持不变</strong>。</p><p>我们可以给矩阵多加一个维度 w，令其等于 1，这样就不需要用到 x、y、z 这些坐标变量了。</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z' \\ w' \end{bmatrix}=\begin{bmatrix} 1 & 0 & 0 & 5\\ 0 & 1 & 0 & 0\\ 0 & 0 & 1 & 0\\ 0 & 0 & 0 & 1 \end{bmatrix}\begin{bmatrix}x \\ y \\ z \\ 1 \end{bmatrix}=\begin{bmatrix}x+5 \\ y \\ z \\ 1 \end{bmatrix}</script><p>这里引用到了<a href="https://www.wikiwand.com/zh/%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87" target="_blank" rel="noopener">齐次坐标</a>的概念。</p><h2 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h2><blockquote><p>齐次坐标表示是计算机图形学的重要手段之一，它既能够用来明确区分向量和点，同时也更易用于进行仿射几何变换。<br>—— F.S. Hill, JR 《计算机图形学(OpenGL 版)》作者</p></blockquote><p>想要了解三维坐标是怎么样扩展到四维坐标，可以先了解下二维空间中的齐次坐标 <script type="math/tex">(x, y, w)</script>。</p><p>下图的三维坐标中在 <script type="math/tex">w=1</script> 处有一个二维平面，则该平面上的二维平面坐标可以表示为 <script type="math/tex">(x, y, 1)</script>，图中的 <script type="math/tex">(1.0, 0.8, 1.0)</script> 就是一个在该二维平面上的点。对于不在二维平面上的点，我们则将其投影到二维平面上，所以齐次坐标 <script type="math/tex">(x, y, w)</script> 映射到实际二维平面上的点为 <script type="math/tex">(x/w, y/w)</script>，例如另外一个点 <script type="math/tex">(2.5, 2.0, 2.5)</script> 在 <script type="math/tex">w=1</script> 二维平面投影得到的点为 <script type="math/tex">(1.0, 0.8)</script>。</p><p><img src="https://i.loli.net/2017/09/23/59c657c43c5dd.png" alt></p><p>同理，三维空间的点可以认为是在四维空间中 <script type="math/tex">w=1</script> 的“平面”上，所以齐次坐标 <script type="math/tex">(x, y, z, w)</script> 映射到三维空间上的点为 <script type="math/tex">(x/w, y/w, z/w)</script>，这也就是点的非齐次坐标。</p><script type="math/tex; mode=display">\begin{bmatrix}x \\ y \\ z \\ w \end{bmatrix}=\begin{bmatrix}x/w \\ y/w \\ z/w \\ 1 \end{bmatrix}</script><p>四维齐次坐标的任何常量缩放会得到相同的结果，也就是说，它包含了点的非齐次坐标所有可能的缩放（还记得上面图中的两个点吗？），w 可以等于任何数值：</p><ul><li>如果 w &gt; 0，这表示一个真实物理世界的点，我们可以用 x，y，z 三个坐标除以 w 得到这个真实的点。</li><li>如果 w = 0，这表示一个无穷远处的点。在实际应用中，通常表示一个向量。</li></ul><p>齐次坐标的优点：</p><ul><li>让我们可以同时考虑所有的变换，如平移、观察、旋转、透视投影等。（如果我们要做缩放变换，可以直接变换 x、y、z 的值并且保持 w 不变。）</li><li>整个渲染管线都以 4 * 4 的齐次坐标矩阵以及对应的四维向量为基础，只有在最后要表示真实点的位置的时候，才需要把齐次坐标变为非齐次。（计算机里除法是个非常复杂的操作，需要花费更多的时间周期，但齐次坐标只需在渲染管线最后一步做除法。）</li><li>不会出现特殊情况。有时考虑判断直线是否相交，当它们平行的时候，有些公式会出错，但无穷远点已经在齐次坐标中约定了 w=0。</li><li>四阶矩阵和齐次坐标是计算机图形软件和硬件中普遍使用的标准。</li></ul><p>下面表示的是一个点向量加上一个平移变量：</p><script type="math/tex; mode=display">P{}'=TP=\begin{bmatrix} 1 & 0 & 0 & T_{x}\\ 0 & 1 & 0 & T_{y}\\ 0 & 0 & 1 & T_{z}\\ 0 & 0 & 0 & 1 \end{bmatrix}\begin{bmatrix}x \\ y \\ z \\ 1 \end{bmatrix}=\begin{bmatrix}x+T_{x} \\ y+T_{y} \\ z+T_{z} \\ 1 \end{bmatrix}=P+T</script><p>有时候平移矩阵 T 内的左上角部分会直接用单位矩阵来表示，其中 <script type="math/tex">I_{3}</script> 表示 3 * 3 的单位矩阵。</p><script type="math/tex; mode=display">T=\begin{bmatrix} 1 & 0 & 0 & T_{x}\\ 0 & 1 & 0 & T_{y}\\ 0 & 0 & 1 & T_{z}\\ 0 & 0 & 0 & 1 \end{bmatrix}=\begin{bmatrix} I_{3} & T\\ 0 & 1 \end{bmatrix}</script><h2 id="组合平移和旋转变换"><a href="#组合平移和旋转变换" class="headerlink" title="组合平移和旋转变换"></a>组合平移和旋转变换</h2><p>当要对一个点进行两种变换的时候，就会涉及到变换顺序的问题，是先平移再旋转，还是先旋转再平移？</p><h3 id="先旋转再平移"><a href="#先旋转再平移" class="headerlink" title="先旋转再平移"></a>先旋转再平移</h3><script type="math/tex; mode=display">P{}'=\left ( TR \right )P=MP=RP+T</script><p>其中 T 为平移矩阵，R 为旋转矩阵，矩阵 P 通过平移再旋转后得到矩阵 P’。注意，在上面的公式中做的是标准的向量计算，在计算时才用齐次坐标计算。</p><p>由于我们使用的是列矩阵，矩阵的阅读顺序应该从右到左。也就是说对于 TR 这个旋转矩阵而言，（TR）P 这个操作，就是对矩阵 P 先 R 旋转，再进行 T 平移。</p><script type="math/tex; mode=display">M=\begin{bmatrix} 1 & 0 & 0 & T_{x}\\ 0 & 1 & 0 & T_{y}\\ 0 & 0 & 1 & T_{z}\\ 0 & 0 & 0 & 1 \end{bmatrix}\begin{bmatrix} R_{11} & R_{12} & R_{13} & 0\\ R_{21} & R_{22} & R_{23} & 0\\ R_{31} & R_{32} & R_{33} & 0\\ 0 & 0 & 0 & 1 \end{bmatrix}=\begin{bmatrix} R_{11} & R_{12} & R_{13} & T_{x}\\ R_{21} & R_{22} & R_{23} & T_{y}\\ R_{31} & R_{32} & R_{33} & T_{z}\\ 0 & 0 & 0 & 1 \end{bmatrix}=\begin{bmatrix} R & T \\ 0 & 1 \end{bmatrix}</script><script type="math/tex; mode=display">MP=\begin{bmatrix} R & T \\ 0 & 1 \end{bmatrix}\begin{bmatrix} P & 0 \\ 0 & 1 \end{bmatrix}=\begin{bmatrix} RP & T \\ 0 & 1 \end{bmatrix}=RP+T</script><h3 id="先平移再旋转"><a href="#先平移再旋转" class="headerlink" title="先平移再旋转"></a>先平移再旋转</h3><script type="math/tex; mode=display">P{}'=(RT)P=MP=R(P+T)=RP+RT</script><script type="math/tex; mode=display">M=\begin{bmatrix} R_{11} & R_{12} & R_{13} & 0\\ R_{21} & R_{22} & R_{23} & 0\\ R_{31} & R_{32} & R_{33} & 0\\ 0 & 0 & 0 & 1 \end{bmatrix}\begin{bmatrix} 1 & 0 & 0 & T_{x}\\ 0 & 1 & 0 & T_{x}\\ 0 & 0 & 1 & T_{x}\\ 0 & 0 & 0 & 1 \end{bmatrix}=\begin{bmatrix} R_{3\times 3} & R_{3\times 3}T_{3\times 1}\\ 0_{1\times 3} & 1 \end{bmatrix}</script><script type="math/tex; mode=display">MP=\begin{bmatrix} R_{3\times 3} & R_{3\times 3}T_{3\times 1}\\ 0_{1\times 3} & 1 \end{bmatrix}\begin{bmatrix} P & 0\\ 0 & 1 \end{bmatrix}=\begin{bmatrix} RP & RT\\ 0 & 1 \end{bmatrix}=RP+RT</script><p>对比先平移再旋转的结果，可以看到不同的地方是 T 变成了 RT，也就是说旋转也施加在了平移的方向上。在下图中可看到小人在 Y 轴方向发生了平移，所以<strong>先旋转再平移</strong>可能会更容易得到理想的结果，但两种变换组合都是可行的。（在 gluLookAt 的推导中需要先做平移，gluLookAt 是 OpenGL 中观察变换的一个关键函数。）</p><p><img src="https://ooo.0o0.ooo/2017/09/24/59c771e4d39f0.png" alt></p><h2 id="法线变换"><a href="#法线变换" class="headerlink" title="法线变换"></a>法线变换</h2><p>在图形学中曲面法线的方向也很重要。</p><h3 id="法线（Normal）"><a href="#法线（Normal）" class="headerlink" title="法线（Normal）"></a>法线（Normal）</h3><blockquote><p>法线是始终垂直于某平面的虚线。在数学几何中法线指平面上垂直于曲线在某点的切线的一条线。<br>——百度百科</p></blockquote><p><img src="https://i.loli.net/2017/09/24/59c6f8e40b986.png" alt></p><p>切线的位置实际上就是曲面上的几何位置，因此它们的变换矩阵和曲面的变换矩阵保持一致。</p><script type="math/tex; mode=display">t\rightarrow Mt</script><p>而法线变换是另外一个矩阵，我们称之为 Q。</p><script type="math/tex; mode=display">n\rightarrow Qn~~Q=?</script><p>法线必须垂直于这些切线，因此法线和切线的点积等于 0。</p><script type="math/tex; mode=display">n^{T}t=0</script><p>变换后法线和切点依然互相垂直，可得：</p><script type="math/tex; mode=display">(Qn)^{T}=(n^{T}Q^{T})(Mt)=0</script><p>在该等式中，只有当 <script type="math/tex">Q^{T}M=I</script> 时，矩阵才容易求解。</p><script type="math/tex; mode=display">n^{T}Q^{T}Mt=0~~\Rightarrow ~~ Q^{T}M=I</script><p>最后可得法线变换公式，其中 <script type="math/tex">M^{-1}</script> 只对左上角的 3 * 3 矩阵求逆和转置：</p><script type="math/tex; mode=display">Q=(M^{-1})^{T}</script><p>要进行法线变换，这个公式要施加在曲面上所有的法线上。</p><p>另外要注意的是法线是一个向量，不会随着平移而改变，因此平移变换对法线没影响。</p><h2 id="改变坐标系"><a href="#改变坐标系" class="headerlink" title="改变坐标系"></a>改变坐标系</h2><p><img src="https://i.loli.net/2017/09/24/59c70f36b057b.jpg" alt></p><p>在图中，点 (2, 1) 要平移到 (1, 1) 处，可以直接把点向左平移，也可以看成是坐标系的改变，将坐标系向右平移。</p><p>引出坐标系的概念是因为，在很多情形下，我们需要一个特定的物理位置在不同的坐标系间变换，例如上一篇文章<a href="http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/#正交坐标系">正交坐标系</a>中所举的例子。下图中，有世界坐标系、相机坐标系和点 P。</p><p><img src="https://i.loli.net/2017/09/24/59c72df0ddea8.jpg" alt></p><p>点 P 在两个坐标系中的坐标是不同的，而在图形学中，我们经常要做这样的变换。</p><p><img src="https://i.loli.net/2017/09/24/59c72e3657a2a.jpg" alt></p><p>如果我们在世界坐标系中有一个点，要计算出其在相机坐标系中的位置，则要同时考虑相机旋转的坐标系、相机的位置和观察的位置（视点）。</p><p>在<a href="http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/#二维空间下的旋转">二维空间下的旋转</a>中能看到二维旋转矩阵的推导过程，在此基础上，可以看作坐标系向右旋转了θ度，这样点 P 就在新坐标系中到达目标位置 P’ 了。</p><p><img src="https://i.loli.net/2017/09/24/59c73178738e1.jpg" alt></p><p>这样我们就能通过旋转矩阵来得到新的 uv 坐标系了！</p><script type="math/tex; mode=display">\begin{bmatrix} u\\v \end{bmatrix}=\begin{bmatrix} cos\theta & -sin\theta \\ sin\theta & cos\theta \end{bmatrix}\begin{bmatrix} x\\y \end{bmatrix}</script><hr><p>之前讨论的都是三维的变换，下篇笔记会介绍图形学中的观察（Viewing）。3D 数学基础知识有点枯燥，但这是入门图形魔法的必经之路。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/1400419/" target="_blank" rel="noopener">3D 数学基础：图形与游戏开发</a></li><li><a href="https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3" target="_blank" rel="noopener">edx-Computer Graphics</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇笔记&lt;a href=&quot;http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/&quot;&gt;3D 数学基础-向量运算基础和矩阵变换&lt;/a&gt;记录了一些向量和矩阵运算的基础，和一些矩阵基本的变换。这篇笔记主要介绍了平移变换、齐次坐标、平移和旋转变换的组合、法线变换和改变坐标系。&lt;/p&gt;
    
    </summary>
    
      <category term="图形学" scheme="http://frankorz.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="3D数学" scheme="http://frankorz.com/tags/3D%E6%95%B0%E5%AD%A6/"/>
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>3D数学基础-向量运算基础和矩阵变换</title>
    <link href="http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/"/>
    <id>http://frankorz.com/2017/09/22/basic-of-vector-and-matrix-transformation/</id>
    <published>2017-09-22T03:05:50.000Z</published>
    <updated>2018-01-31T07:53:10.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在跟公开课 edx 的 <a href="https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3" target="_blank" rel="noopener">Computer Graphics</a>（想一起学的告诉我！），这篇笔记主要介绍了图形学中会用到的比较基础的3D数学，重拾大学线性代数知识。</p><a id="more"></a><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><h3 id="点积（Dot-Product）"><a href="#点积（Dot-Product）" class="headerlink" title="点积（Dot Product）"></a>点积（Dot Product）</h3><p>将向量相乘得到一个标量<br>可以通过两个向量除以它们的模得到两个向量之间的夹角</p><p>用途：</p><ul><li>求两个向量之间的夹角（光源和表面之间夹角的余弦值对于投影来说非常重要）</li><li>找到一个向量在另一向量上的投影也非常重要（比如我们想知道一个点在新的坐标系下的坐标）。</li><li>点积在笛卡尔坐标系下很有用</li></ul><p><img src="https://i.loli.net/2017/09/22/59c4580a4526e.png" alt><br><img src="https://i.loli.net/2017/09/20/59c275ef5ad97.png" alt></p><h3 id="叉积（Cross-Product）"><a href="#叉积（Cross-Product）" class="headerlink" title="叉积（Cross Product）"></a>叉积（Cross Product）</h3><p>将向量相乘得到一个正交向量（垂直于向量a和向量b）</p><p><img src="https://i.loli.net/2017/09/22/59c4585e45f5a.png" alt></p><p><img src="https://i.loli.net/2017/09/21/59c2f0c604b26.png" alt></p><p>叉积所得到的向量的方向可以通过右手坐标系来得到：</p><p><img src="https://i.loli.net/2017/09/21/59c2f0ae5357d.png" alt></p><p>用右手食指代表叉积中前一个向量，用中指代表叉积中后一个向量，则大拇指的方向就是叉积得到的向量方向。这简单的方法能提醒你：将进行叉积的两个向量顺序调换的话，得到的向量方向会相反。</p><p><img src="https://ooo.0o0.ooo/2017/09/21/59c2f15017b3b.png" alt><br><img src="https://i.loli.net/2017/09/21/59c2f2e8931f9.png" alt></p><p>叉积可以用向量 a 的对偶矩阵来完成，所以可以将它表示成A星(A*)乘以b，其中A*是向量a的对偶矩阵（<a href="https://zh.wikipedia.org/zh-hans/%E5%85%B1%E8%BD%AD%E8%BD%AC%E7%BD%AE" target="_blank" rel="noopener">共轭转置</a>）。</p><h3 id="正交坐标系"><a href="#正交坐标系" class="headerlink" title="正交坐标系"></a>正交坐标系</h3><p>正交基和坐标系对于表示点的位置非常重要，因为在图形学中，我们通常需要很多不同的坐标系，来表示点在不同参照物下的位置。例如：要表示自己身前一台电脑的位置，可以在自己的位置建立一个坐标系来表示电脑的位置；要表示北极的位置时，用地球的坐标系表示北极的位置会更容易。</p><p><img src="https://i.loli.net/2017/09/21/59c2f8a2d4ed7.png" alt><br><img src="https://ooo.0o0.ooo/2017/09/21/59c2f9bd606b9.png" alt></p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>图形学中矩阵很重要，因为大多数变换都涉及一个矩阵乘以一个向量，矩阵可以用来变换点。下面简单的列一下矩阵的性质，更多的性质可以参考下维基页面<a href="https://www.wikiwand.com/zh-hans/%E7%9F%A9%E9%98%B5" target="_blank" rel="noopener">矩阵</a>。</p><h4 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h4><p><img src="https://i.loli.net/2017/09/22/59c45933d1131.png" alt></p><p>矩阵相乘时，乘积处(i,j)处的元素是：第一个矩阵的 i 行和第二个矩阵 j 列的点积，这也是为什么要求第一个矩阵的列数等于第二个矩阵的行数。</p><h4 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h4><p><img src="https://i.loli.net/2017/09/22/59c458eacdbd6.png" alt><br><img src="https://i.loli.net/2017/09/22/59c4590d452de.png" alt><br><img src="https://i.loli.net/2017/09/22/59c45964cb258.png" alt></p><h4 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h4><p><img src="https://i.loli.net/2017/09/22/59c45a25d31be.png" alt><br><img src="https://i.loli.net/2017/09/22/59c45a6c47117.png" alt><br><img src="https://i.loli.net/2017/09/22/59c45a7998963.png" alt></p><p>矩阵与矩阵的逆相乘得到单位矩阵：</p><p><img src="https://i.loli.net/2017/09/22/59c45a96aea14.png" alt></p><h2 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h2><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>二维空间下和三维空间下的缩放很简单，直接乘上相应的缩放倍数即可。</p><p><img src="https://i.loli.net/2017/09/22/59c453fdb5b93.png" alt><br><img src="https://i.loli.net/2017/09/21/59c34830cf218.png" alt></p><h3 id="切变"><a href="#切变" class="headerlink" title="切变"></a>切变</h3><p><img src="https://i.loli.net/2017/09/22/59c45377c6df7.png" alt></p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><h4 id="二维空间下的旋转"><a href="#二维空间下的旋转" class="headerlink" title="二维空间下的旋转"></a>二维空间下的旋转</h4><p>二维空间下，物体的旋转可以靠矩阵在X方向的变换于矩阵在Y方向的变换叠加得到，但不适用于三维空间。</p><p>下面是推导过程：</p><p><img src="https://i.loli.net/2017/09/21/59c3a241c6dd6.png" alt></p><p><img src="https://ooo.0o0.ooo/2017/09/21/59c35fd14cf71.png" alt></p><p>这三种矩阵变换<strong>不符合交换律</strong>，也就是说变换的顺序改变会得到不同的结果，要恢复变换的话也要从最后一次变换开始恢复。（Unity的默认变换顺序是先缩放，再旋转，最后平移）</p><p><img src="https://i.loli.net/2017/09/21/59c39af8088e2.png" alt></p><h4 id="三维空间下的旋转"><a href="#三维空间下的旋转" class="headerlink" title="三维空间下的旋转"></a>三维空间下的旋转</h4><p>下图分别给出了绕Z轴旋转、X轴旋转和Y轴旋转的变换矩阵：</p><p><img src="https://i.loli.net/2017/09/21/59c3b45f62ef9.png" alt></p><p>二维旋转可以看作是绕着Z轴的特殊旋转，因为Z轴保持不变。因此Rz（绕着Z轴的旋转）可以直接在二维空间旋转矩阵外的Z轴处填充1和0来使用，同理可得绕X轴的旋转矩阵和Y轴的旋转矩阵。</p><h5 id="绕任意轴旋转"><a href="#绕任意轴旋转" class="headerlink" title="绕任意轴旋转"></a>绕任意轴旋转</h5><p><img src="https://i.loli.net/2017/09/21/59c3b89114b72.png" alt></p><p>在这其中，三个正交向量（相互垂直）可以构成一个旋转矩阵，这样就可以将点映射到新的坐标系下。这个概念非常重要，因为在图形学中常常需要这样的变换，如把每个3D模型的顶点的法线从模型空间转到剪裁空间（不同的坐标系）再统一进行计算。</p><p>这个旋转矩阵的逆只需要将XYZ轴换成u，v，w即可。</p><p><img src="https://i.loli.net/2017/09/22/59c4467c7cf99.png" alt></p><p>详见<a href="https://baike.baidu.com/item/%E7%BD%97%E5%BE%B7%E9%87%8C%E6%A0%BC%E6%97%8B%E8%BD%AC%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">罗德里格旋转公式</a></p><hr><p>下一篇笔记会写更多关于三维空间下的矩阵变换。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/1400419/" target="_blank" rel="noopener">3D数学基础：图形与游戏开发</a></li><li><a href="https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3" target="_blank" rel="noopener">edx-Computer Graphics</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在跟公开课 edx 的 &lt;a href=&quot;https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x-3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Computer Graphics&lt;/a&gt;（想一起学的告诉我！），这篇笔记主要介绍了图形学中会用到的比较基础的3D数学，重拾大学线性代数知识。&lt;/p&gt;
    
    </summary>
    
      <category term="图形学" scheme="http://frankorz.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="3D数学" scheme="http://frankorz.com/tags/3D%E6%95%B0%E5%AD%A6/"/>
    
      <category term="游戏开发" scheme="http://frankorz.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows 效率软件推荐</title>
    <link href="http://frankorz.com/2017/08/05/recommandation-of-some-efficient-software/"/>
    <id>http://frankorz.com/2017/08/05/recommandation-of-some-efficient-software/</id>
    <published>2017-08-05T09:08:08.000Z</published>
    <updated>2017-08-05T07:08:33.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>用了几年苹果电脑之后，最近开始用回 Windows 系统，找到一些十分好用的效率向的工具，同时受 <a href="http://www.ituring.com.cn/article/469111" target="_blank" rel="noopener">效率必备，软件推荐</a> 启发，写篇文章推荐一下。</p><a id="more"></a><h2 id="ShareX"><a href="#ShareX" class="headerlink" title="ShareX"></a>ShareX</h2><p><a href="https://getsharex.com/" target="_blank" rel="noopener">ShareX</a> 是一款主打捕获屏幕、文件分享、和生产力的开源工具。下面是我用 ShareX 来录制软件界面的 GIF 动图，可以看看其丰富的功能。</p><p><img src="https://i.loli.net/2017/08/05/59855a1a27551.gif" alt></p><p>和 QQ 自带的截图功能和国人开发的 Snipaste 不同，ShareX 的截图不仅仅止于截图后进行批注。ShareX 除了支持和 Snipaste 相似的捕捉窗格（活动的窗口、窗口内的元素等）截图功能外，还支持各种后续的动作，形成一个动作链以节省时间。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>例如截完图后可以打开编辑窗口编辑，同时保存图片到自定的目录和剪贴板等等，自己可以自定义其动作链。建议勾选复制到剪贴板，文后会完成一个利用快捷键完成截图上传的动作链（你也可以直接配置截图完进行上传，看个人习惯）。</p><p><img src="https://i.loli.net/2017/08/05/59855c41b3c13.png" alt></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p><img src="https://i.loli.net/2017/08/05/59855f6348f83.png" alt></p><p>ShareX 的上传分为图片上传、文字上传和 URL 短链分享。图片可以上传到不同的图床：Imgur、Google Photos、TinyPic 等等，同样的，文件也可以上传到不同的文件共享网站：Dropbox、OneDrive 等，不过软件内置的多是国外的服务。开放性十足的 ShareX 还允许开发者共享自定义上传插件，这些上传插件可以在 <a href="https://github.com/ShareX/CustomUploaders" target="_blank" rel="noopener">CustomUploaders</a> 里找到。</p><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><p>由于不同上传的设置类似，这里只写图片上传的一些个人配置。</p><p>我自己使用的图床是开放了 API 的 <a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a> 图床，这图床背后的大佬就是卖 t.tt 域名给罗永浩的那位，据他说自己的流量多的用不完就拿来做点公益项目….SM.MS 图床的上传插件可以在 <a href="https://github.com/ShareX/CustomUploaders/blob/master/sm.ms.sxcu" target="_blank" rel="noopener">这里</a> 下载，下载后双击即可导入。导入后可以在软件界面的 [上传至…] -&gt; [上传至…设置] -&gt; 左列表最底端的自定义上传者，在目标类型选上 Image uploader 再点更新就能完成上传插件的配置。</p><p><img src="https://ooo.0o0.ooo/2017/08/05/598562961f2ff.png" alt></p><p>接着在 [上传至…] 选项里勾选好对应的上传插件就完成配置了。</p><p><img src="https://ooo.0o0.ooo/2017/08/05/598563005b31f.png" alt></p><h4 id="上传后的动作"><a href="#上传后的动作" class="headerlink" title="上传后的动作"></a>上传后的动作</h4><p><img src="https://i.loli.net/2017/08/05/598563e94e64e.png" alt></p><p>与截图后的动作类似，上传后的动作也十分实用，这里我只选了 URL 复制到剪贴板。</p><h3 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h3><p>目前截图、上传这两动作都已经配置好，可以开始配置快捷键了。</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><img src="https://i.loli.net/2017/08/05/5985658c61a01.png" alt></p><p>这里我增加了一个从剪贴板上传的快捷键，这样的话 [快捷键截图] -&gt; 截图保存到剪贴板 -&gt; [快捷键上传] -&gt; 剪贴板内的截图上传到相应图床 -&gt; 返回图片 URL 到剪贴板的动作链就完成了。这对于经常在电脑写东西的我来说很实用，在写这篇文章时也利用这软件节省了不少时间。</p><p>你可以在 <a href="https://getsharex.com/" target="_blank" rel="noopener">ShareX 官网</a> 进行下载，其文件托管在 github。</p><h2 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h2><p>macOS 系统内置了一个好用的功能，就是空格查看文件内容，现在 QuickLook 也为 Windows 提供类似的体验。</p><h3 id="空格查看-markdown-文件"><a href="#空格查看-markdown-文件" class="headerlink" title="空格查看 markdown 文件"></a>空格查看 markdown 文件</h3><p><img src="https://i.loli.net/2017/08/05/5985685e65c3e.png" alt></p><h3 id="空格查看代码文件"><a href="#空格查看代码文件" class="headerlink" title="空格查看代码文件"></a>空格查看代码文件</h3><p><img src="https://i.loli.net/2017/08/05/598568e01542e.png" alt></p><h3 id="空格查看压缩包"><a href="#空格查看压缩包" class="headerlink" title="空格查看压缩包"></a>空格查看压缩包</h3><p><img src="https://i.loli.net/2017/08/05/598569121426e.png" alt></p><p>你可以在 <a href="http://pooi.moe/QuickLook/" target="_blank" rel="noopener">QuickLook 官网</a> 下载安装包，QuickLook 也能在 <a href="https://www.microsoft.com/store/apps/9nv4bs3l1h4s?ocid=badge" target="_blank" rel="noopener">Windows 应用商店</a> 下载。</p><h2 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h2><p>受 macOS 平台上 Dash 代码 API 文档查询软件的启发，Zeal 是一款免费开源的支持 Windows 和 Linux 系统的代码 API 文档查询软件。</p><h3 id="丰富的文档"><a href="#丰富的文档" class="headerlink" title="丰富的文档"></a>丰富的文档</h3><p><img src="https://ooo.0o0.ooo/2017/08/05/59856b2f6673b.png" alt></p><h3 id="查询关键词"><a href="#查询关键词" class="headerlink" title="查询关键词"></a>查询关键词</h3><p><img src="https://i.loli.net/2017/08/05/59856a27b4431.png" alt></p><h3 id="与编辑器联动"><a href="#与编辑器联动" class="headerlink" title="与编辑器联动"></a>与编辑器联动</h3><p>开发者为 Atom、VSCode、Jetbrain 全家桶 IDE 等提供了相关的插件，例如 Atom 的 <a href="https://github.com/blakeembrey/atom-dash" target="_blank" rel="noopener">atom-dash</a>，VSCode 的 <a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash" target="_blank" rel="noopener">Dash</a>，Jetbrain 全家桶的 <a href="https://plugins.jetbrains.com/plugin/7351-dash" target="_blank" rel="noopener">Dash</a>。</p><p>有了这些插件，你可以做到在写 Python 代码的时候，调用快捷键查询 Zeal 中 Python 文档对应的 API。</p><p>你可以在 <a href="https://zealdocs.org/" target="_blank" rel="noopener">Zeal 官网</a> 获得 Zeal。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面提到的三款效率软件都是开源并能免费下载使用，现在越发钦佩开源者了~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了几年苹果电脑之后，最近开始用回 Windows 系统，找到一些十分好用的效率向的工具，同时受 &lt;a href=&quot;http://www.ituring.com.cn/article/469111&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;效率必备，软件推荐&lt;/a&gt; 启发，写篇文章推荐一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="http://frankorz.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>自己的阅读兴趣</title>
    <link href="http://frankorz.com/2017/08/04/my-reading-habit/"/>
    <id>http://frankorz.com/2017/08/04/my-reading-habit/</id>
    <published>2017-08-04T03:01:58.000Z</published>
    <updated>2017-08-04T01:09:37.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文是为了响应图灵社区自己的兴趣爱好的撰文活动，搬来博客刷下活跃度。</p><p><img src="https://i.loli.net/2017/08/03/5982fcf675064.png" alt="番茄土豆"></p><a id="more"></a><p>才发现自己的完成番茄数就在不久前破千了！趁着活动还在，来社区写一篇文章总结下。</p><p>翻了翻番茄的记录，最早的番茄是在今年的2月10日凌晨完成的，直至今天共过了175天，这么算来一天才完成5.73个番茄，这远远达不到自己当初设定每天八个番茄的目标，但是这习惯也算是坚持下来了。自己当初使用 <a href="https://pomotodo.com/" target="_blank" rel="noopener">番茄土豆</a> 记录番茄的初衷，就是想从懒散的生活节奏中挤出一点时间，分给阅读、学习、写作和英语（除去上课的时间）。现在看统计图，阅读占了其中一大半的时间。</p><p><img src="https://ooo.0o0.ooo/2017/08/03/5982e59516955.png" alt="阅读时间"></p><p>自己阅读了将近248个小时，显然阅读已经成为了我的兴趣爱好。</p><p>自己看书看的题材很广泛、也很狭窄。广泛的是编程什么领域都会看一点，编程语言如 Swift、Golang、Python等，技术如算法、前端向的 Angular、后端向的 Rails on Ruby、Django、移动端的 iOS 等等，狭窄的就是很少去看计算机外的书。</p><p>现在看来，什么都想了解的兴趣能够让你翻开一本书，但是兴趣太广泛则不是什么好事情，自己现在还没有构建技术栈。好处也有，什么都略懂一点，这也是自己社区简介中 “全栈 Hello World 工程师” 的由来。如今这学期又要学网络和游戏开发（又要学习新领域…），苦也~</p><p>前段时间在简书读过一篇文章 <a href="http://www.jianshu.com/p/7525dabdd65a" target="_blank" rel="noopener">为什么我们不再购买技术类书籍</a>，我赞同其中“除读书外还有很多学习技术的途径”，但不认同其中的“技术书籍无用论”。当然，这些学习途径本身就不能拿来比较，因为 <strong>有价值的是这些载体其中承载的知识</strong>，不同类型的知识有不同的作用。对于一些 bug 的报错、紧跟技术潮流的资讯、小知识点等，我一向喜欢从别人的博客或者问题的回答中寻找答案。而对于一连串成体系的知识点，我更青睐去阅读相关的评价较高的技术书籍。系统地阅读，能够使我理解和构建好这门技术的体系结构，从而打好自己的基础，而这往往是作者在写书前就需要花心思构建好的大纲所体现出来的。</p><p>但是阅读技术书籍也容易使我走进一些误区。读完一本技术书的充实感容易使我“飘飘然”，误认为自己已经搞定了一本书，不去下手写代码，从而变成一个“花瓶”程序员。再者，书上的代码和经验往往是正确的，自己跟着作者的思路写代码，能很快地了解一门技术背后的逻辑和设计，却让读者丧失了思考、推理逻辑的过程。因此，我更喜欢去阅读书中带习题、倾向于引导读者思考的书籍，这样能时刻警醒自己，不要沉溺于莫名的“技术满足感”之中。</p><p>当我习惯了阅读之后，无论是学校上课，还是深入一些领域，我都更倾向于参考相关的好书。一方面，对于一个知识点，我喜欢把老师的描述和其他书中作者的描述相对比，以作查漏补缺。另一方面，上课前看其他书提前预习将要教授的知识点，能够使我跟着老师的思路去思考，而不会被生疏的名词、知识点打断了自己上课思考的过程。自己前天的游戏开发课就是使用 Unity3D 来教授，自己提前看了眼大纲，找了本书预习了 C# 和 Unity3D 开发的一些简单的概念和过程。后来的上机课顺利地把一周的作业以满分的标准完成（老师有给出作业的完成标准，按照完成程度打分），还能抽出时间问读书过程中和写代码过程中不懂的问题，而不是浪费时间在提问基础知识上。</p><p>晒晒六月份放假的时候写的一些日记，那时候在刷图灵书。</p><p><img src="https://i.loli.net/2017/08/03/5982f8ce4ee46.jpg" alt="日记"></p><p>以前图灵半价、京东亚马逊优惠买的书，我一定会回来翻阅你们的！</p><p>感谢图灵社区，提供这么多高质量的技术书籍翻译，一些书还拿到了电子版权出了电子版，真是海外党福音~最后希望大家能开卷有益！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是为了响应图灵社区自己的兴趣爱好的撰文活动，搬来博客刷下活跃度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/03/5982fcf675064.png&quot; alt=&quot;番茄土豆&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://frankorz.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《流畅的 Python》读书笔记</title>
    <link href="http://frankorz.com/2017/07/01/fluent-python-note/"/>
    <id>http://frankorz.com/2017/07/01/fluent-python-note/</id>
    <published>2017-07-01T01:06:19.000Z</published>
    <updated>2017-07-19T22:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h2><h3 id="学了-Python-基础就够了吗？"><a href="#学了-Python-基础就够了吗？" class="headerlink" title="学了 Python 基础就够了吗？"></a>学了 Python 基础就够了吗？</h3><p>前言的引言给出了答案：</p><blockquote><p>要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用 0.9.6 版的 Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼） 。<br>—— Tim Peters<br>传奇的核心开发者， “Python 之禅”作者</p></blockquote><a id="more"></a><h3 id="这本书的目的是什么？"><a href="#这本书的目的是什么？" class="headerlink" title="这本书的目的是什么？"></a>这本书的目的是什么？</h3><p>第十一章的杂谈里给出了答案：</p><blockquote><p>这正是本书的主要目的：着重讲解这门语言的基本惯用法，让你的代码简洁、高效且可读，把你打造成熟练的 Python 程序员。</p></blockquote><p>另外本书的<a href="http://www.ituring.com.cn/book/tupubarticle/13727" target="_blank" rel="noopener">前言</a>里也有提及书本的目标读者和非目标读者。</p><blockquote><p>如果你才刚刚开始学 Python，本书的内容可能会显得有些“超纲”。比难懂更糟的是，如果在学习 Python 的过程中过早接触本书的内容，你可能会误以为所有的 Python 代码都应该利用特殊方法和元编程（metaprogramming）技巧。我们知道，不成熟的抽象和过早的优化一样，都会坏事。</p></blockquote><h2 id="对内容的一些评价"><a href="#对内容的一些评价" class="headerlink" title="对内容的一些评价"></a>对内容的一些评价</h2><p>从书目录结构来看，作者的眼界十分开阔，每章最后有小结、延伸阅读、和相关的一些杂谈。书的前一部分从 Python 特性出发，参考了很多语言的相关做法和实现，来解释 Python 的设计。</p><p>书中时常引用一些参考资料，有些是邮件列表里的讨论、维基百科、一些十分优秀的程序员的撰写的文章和演讲视频。这意味着你可以在某一个概念看到不同的观点，看到优秀的程序员是怎么思考一个问题的。</p><p>作者从1998年成为了 Python 程序员，是巴西一家培训机构的共同所有者，也为巴西的媒体、银行和政府部门教授 Python 课程，由此可见本书的代码会是十分透彻和浅显易懂的，事实也的确如此。从代码示例来看，作者为大部分代码提供了 doctest 测试，并且在为某一个知识点提供代码示例时，追求的是简单、直接，同时示例的难度是循序渐进的。加上作者在大部分代码行提供了说明，让读者能十分流畅地理解概念。（对比：《Go 程序设计语言》讲复数语法时用 Mandelbrot 图像作为示例，苦笑）</p><h2 id="对翻译的一些评价"><a href="#对翻译的一些评价" class="headerlink" title="对翻译的一些评价"></a>对翻译的一些评价</h2><p>整体翻译还是不错的，几百页的书的勘误也才十多个，部分术语可能还要参考书里的术语翻译表，个人认为容易弄混的有特性（properties）和属性（attributes），还有函数（function）和方法（method）。后者的区别可以参考<a href="https://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" target="_blank" rel="noopener">Difference between a method and a function</a>，简单的说法就是函数（function）定义在类外面，而方法（method）定义在类里面，是类的一部分。两者也可以根据是否独立于对象来判断。</p><blockquote><p>黄志斌：这本书第2次印刷时已经把“期物”改为“future”了。  </p></blockquote><p>P21 前面那种方式显然能够节省内存。 前者指的是 genexp，即生成器表达式。</p><h2 id="章节简介"><a href="#章节简介" class="headerlink" title="章节简介"></a>章节简介</h2><p>这本书的结构十分优秀，每一章节都有前言和小结，因此章节简介我偏向于写些零散的知识点和个人感受，会比较乱。大部分章节的章节简介最后会有个人阅读时做的笔记，章节简介没提及的内容可以看看我的笔记。</p><p>全部的笔记还可以在这里找到：<a href="https://github.com/Latias94/fluent-python-notes" target="_blank" rel="noopener">Latias94/fluent-python-notes</a></p><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p>第一章作者就介绍了 Python 中的特殊方法，特殊方法也是贯穿这本书的基础。</p><p>读这本书之前，自己通常会遇到<code>__init__</code>、<code>__new__</code>、<code>__name__ == &#39;__main__&#39;</code>等等的带双下划线的特殊方法，但是通过零散的知识点很难形成体系，而这本书涵盖了绝大部分的特殊方法，并且分章节详细地讨论其背后特殊方法的作用，而这一章就是了解特殊方法的第一步。</p><p>作者提到了合理的字符串表示形式：<code>__repr__</code> 和 <code>__str__</code>。前者方便我们调试和记录日志，后者则是给终端用户看的。</p><p>作者开篇就提出了两个问题，第一个问题是：</p><blockquote><p>为什么说 Python 最好的品质之一是一致性？</p></blockquote><p>并且在第十二页给出了答案：</p><blockquote><p>不能让特例特殊到开始破坏既定规则。</p></blockquote><p>第二个问题是：</p><blockquote><p><code>len(collection)</code> 和 <code>collection.len()</code> 有什么不同？和“Python 风格” （Pythonic）有什么关系？</p></blockquote><p>核心开发者 Raymond Hettinger 的答案是：</p><blockquote><p>实用胜于纯粹<br>practicality beats purity<br>——《<a href="https://www.python.org/doc/humor/#the-zen-of-python" target="_blank" rel="noopener">The Zen of Python</a>》</p></blockquote><p>作者给出解释：</p><blockquote><p>len 是特殊方法，是为了让 Python 自带的数据结构可以走后门，abs 也是同理。（解释：因为如果 x 是一个内置类型的实例，<code>len(x)</code>的背后会用 CPython 直接从 C 结构体中读取对象的长度，不调用任何方法，以至于 <code>len(x)</code> 会非常快。）<br>…<br>这种处理方式在保持内置类型的效率和保证语言的一致性之间找到了一个平衡点，也印证了“Python 之禅”中的另外一句话：”不能让特例特殊到开始破坏既定规则。”</p></blockquote><p>从这两个问题就能看出作者想要强调的是：「<strong>Python 风格</strong> 无处不在」。为了更好地理解 Python 实现，最好了解 Python 的设计风格。</p><p>笔记传送门：<a href="https://my.mindnode.com/z2mHiiCMKpYW5CpEC1voainyDyh7zqaA2jqnK6AU" target="_blank" rel="noopener">特殊方法</a></p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p>第二三四章主讲 Python 数据结构及其背后的实现，而第二章主要讲了可变类型与不可变类型的区别。</p><p>要想写出准确、高效和地道的 Python 代码，对标准库里的序列类型的掌握是不可或缺的。数据结构的产生就是为了满足各种不同的需求，例如能让用户在不复制内容的情况下操作同一个数组的不同切片的 memoryview，能高效处理矩阵、矢量等高级数值运算的 NumPy 和专为线性代数、数值积分和统计学而设计并基于 NumPy 的 SciPy。计算机科学家主要抽象了几大数据类型：字典、数组、列表等，这些数据类型都有不同的使用环境，使用好这些工具能让你事半功倍、节省不必要的消耗。</p><p>另外，在读这本书的前几天，我刚好在 Segmentfault 里面看到一个问题 <a href="https://segmentfault.com/q/1010000009754631" target="_blank" rel="noopener">python小白 问关于a+=a 和a=a+a的区别</a>，当时看完答案还有点似懂非懂的感觉，而读完这章我能完全理解其区别所在了。</p><p>扩展阅读：<a href="https://facert.gitbooks.io/python-data-structure-cn" target="_blank" rel="noopener">problem-solving-with-algorithms-and-data-structure-using-python 中文版</a></p><p>笔记传送门：<a href="https://my.mindnode.com/rabZb1p3GadkxZD7sWms2Wyzaz6mELZAKaGX9De2" target="_blank" rel="noopener">序列构成的数组</a></p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><p>前一章提到了列表、元组这两种序列，以及它们的生成器表达式。这一章则介绍了散列表的基本概念、其背后的算法和由散列表实现的数据类型：字典和集合。</p><ul><li>由于字典是由散列表实现的，因此字典的键必须是可散列的。</li><li>set 类型本身不是可散列的（因为 set 是可变的），但其元素必须可散列。（这也是为什么 list 不能作为字典键的原因）</li><li>frozenset 是可散列的。</li><li>散列表的实现导致它实现的数据类型效率很高，但这是以牺牲空间的代价所带来的。</li></ul><blockquote><p>“优化往往是可维护性的对立面”<br>由于字典使用了散列表，而散列表又必须是稀疏的，这导致它在空间上的效率低下。举例而言，如果你需要存放数量巨大的记录，那么放在由元组或是具名元组构成的列表中会是比较好的选择；最好不要根据 JSON 的风格，用由字典组成的列表来存放这些记录。用元组取代字典就能节省空间的原因有两个：其一是避免了散列表所耗费的空间，其二是无需把记录中字段的名字在每个元素里都存一遍。</p></blockquote><p>笔记传送门：<a href="https://my.mindnode.com/sy6m2gQJ5CdFBQz7cyCRq6YjKLzzkqQXofC8w26V" target="_blank" rel="noopener">字典和集合</a></p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><p>目前没遇到过编码问题，不看。</p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><p>第五章的主题是：高阶函数没这么重要了。</p><p>先来一段吐槽：</p><blockquote><p>Lundh 提出的 lambda 表达式重构秘笈如果使用 lambda 表达式导致一段代码难以理解，Fredrik Lundh 建议像下面这样重构。<br>(1) 编写注释，说明 lambda 表达式的作用。<br>(2) 研究一会儿注释，并找出一个名称来概括注释。<br>(3) 把 lambda 表达式转换成 def 语句，使用那个名称来定义函数。<br>(4) 删除注释。<br>摘自“Functional Programming HOWTO” </p></blockquote><p>现在函数式编程十分流行，但 Python 独特的语法使得 lambda、map、filter 和 reduce 这些函数没这么重要了，因为我们有 sum、all 等归约函数，还有 sorted、min、max 和 functools 这样的内置的高阶函数。</p><p>最后（5.10.2小节）讲了一个和函数柯里化（Currying）十分相像的概念——偏函数（Partial Application），这两者概念其实不一样。</p><p>笔记传送门：<a href="https://my.mindnode.com/EpbDRnypkaZgmDb6cLwgPcenxExjWA75689ah91p" target="_blank" rel="noopener">一等函数</a></p><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><p>作者从策略模式开始，讨论了一等函数在设计模式中的角色，并用一等函数简化了设计模式的实现方式，以此来展示 Pythonic 的设计模式应该是什么样子的。</p><p>扩展阅读：<a href="https://github.com/wklken/py-patterns" target="_blank" rel="noopener">设计模式的python实现</a></p><p>笔记传送门：<a href="https://my.mindnode.com/rwYjfffMs8Zi8cKSWyU1ybshb6mgXiiFp4MbDrj6" target="_blank" rel="noopener">使用一等函数实现设计模式</a></p><h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><p>第七章介绍了装饰器和闭包，作者给闭包下了一个清晰的定义：</p><blockquote><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。</p></blockquote><p>作者用一个闭包实例和作用相同的类来比较，引出了自由变量（free variable）的概念，以此指出闭包与普通函数不一样的地方——闭包会保留定义函数时存在的自由变量的绑定。在此之后，再引出可变类型与不可变类型对自由变量的影响，从而引出可能导致闭包失效的原因（第二章的主题：可变类型与不可变类型的区别），同时给出了解决办法：nonlocal 声明。</p><p>本章结尾的杂谈提到了「一般来说，实现“装饰器”模式时最好使用类表示装饰器和要包装的组件。」，也就是通过实现 <code>__call__</code> 方法的类来实现装饰器。遗憾的是本书只通过函数来解说装饰器以助于理解，类装饰器没有提及多少。</p><p>笔记传送门：<a href="https://my.mindnode.com/bZa9sX9dA7qcbsGbVqnU6c3ryky8g2QDWfiHqqhm" target="_blank" rel="noopener">函数装饰器和闭包</a></p><h3 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h3><blockquote><p>不可变集合不变的是所含对象的标识。</p></blockquote><p>第八章中，作者从「元组是不可变的，但是其中的值可以改变」引申到浅复制和深复制的区别。</p><p><img src="https://ooo.0o0.ooo/2017/06/30/5956006435780.jpg" alt></p><p>浅复制带来的影响可以参考 <a href="http://www.pythontutor.com/visualize.html#code=l1%20%3D%20%5B3,%20%5B66,%2055,%2044%5D,%20%287,%208,%209%29%5D%0Al2%20%3D%20list%28l1%29%20%0Al1.append%28100%29%0Al1%5B1%5D.remove%2855%29%0Aprint%28&#39;l1%3A&#39;,%20l1%29%0Aprint%28&#39;l2%3A&#39;,%20l2%29%0Al2%5B1%5D%20%2B%3D%20%5B33,%2022%5D%0Al2%5B2%5D%20%2B%3D%20%2810,%2011%29%20%0Aprint%28&#39;l1%3A&#39;,%20l1%29%0Aprint%28&#39;l2%3A&#39;,%20l2%29&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" rel="noopener">example</a>（点 foward 显示下一步）</p><p>作者还提到了两个容易忽略的函数参数引用问题：</p><ol><li>不要使用可变类型作为参数的默认值</li><li>防御可变参数</li></ol><p>最后一节讨论垃圾回收、del 命令，以及如何使用弱引用“记住”对象，而无需对象本身存在。</p><p>另外这章有意思的地方在于作者提到了一个常见的说法错误：「对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟对象在赋值之前就创建了。」</p><p>笔记传送门：<a href="https://my.mindnode.com/6ZayEUVKgEVAApAPc6aDmjByaB3Qq4hUPQSWBdK2" target="_blank" rel="noopener">对象引用、可变性和垃圾回收</a></p><h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><blockquote><p>要构建符合 Python 风格的对象，就要观察真正的 Python 对象的行为。<br>——古老的中国谚语</p></blockquote><p>第九章主要讲如何编写 Pythonic 的对象。作者从构建一个 Vector 类型来介绍符合 Python 风格的类需要注意的地方，例如<code>__repr__</code>不要硬编码类名、类属性的私有化、格式规范微语言、散列化要注意的条件等。</p><p>作者还讲了构建一个可散列的类型所需要实现的条件：</p><ol><li>正确的实现<code>__hash__</code>和<code>__eq__</code>方法</li><li>不一定要实现只读属性，但是要保证实例的散列值绝不能变化。</li></ol><p>类属性用于为实例属性提供默认值。Django 的类视图也大量用到了这个特性。</p><p>个人十分喜欢名称改写（属性的私有化）中的一张示意图：<br>「避免意外访问，但不能防止故意做错事。」，以此来提醒名称改写所实现的私有化自身的缺陷。</p><p><img src="https://ooo.0o0.ooo/2017/06/30/5956006706191.jpg" alt></p><p>笔记传送门：<a href="https://my.mindnode.com/sJg5G9wfSRP4Le67FDqErjYGGqxhEPNYpMCnpj1Q" target="_blank" rel="noopener">符合 Python 风格的对象</a></p><h3 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h3><blockquote><p>不要检查它是不是鸭子、它的叫声像不像鸭子、它的走路姿势像不像鸭子，等等。具体检查什么取决于你想使用语言的哪些行为。 （comp.lang.python，2000 年 7 月 26 日）<br>——Alex Martelli</p></blockquote><p>其中介绍了鸭子类型，指忽略对象的真正类型，转而关注对象有没有实现所需的方法、签名和语义。在 Python 中指免使用 isinstance 检查对象的类型。</p><p>如果我想实现一个序列，可以实现<code>__init__</code>、<code>__len__</code>、<code>__getitem__</code>等一序列的方法，使其行为像序列，那么这就是一个序列，这也就是人们所称的鸭子类型（duck typing）。</p><p>自己的理解：要明白自己希望的鸭子有哪些特性，只要我实现出来了，那么这就是鸭子。</p><p>Tips:</p><ul><li>可以用 <code>dir(slice)</code> 来查看序列的属性</li><li>当 Python 库文档查询不到方法的文档的时候，可以尝试用 <code>help(slice.indices)</code> 来查询。（ 直接查询<code>__doc__</code>属性的信息 ）</li></ul><p>第四小节讲可切片的序列需要关注的两个问题：</p><ol><li><p>如果创建的序列内部由数组（或其他序列）实现，那么就要考虑切片对象的实现：切片返回的是自创建的序列对象 还是数组（或其他序列）？如果需要考虑，就是在 <code>__getitem__</code> 方法里修改其实现方式。</p></li><li><p>动态存取属性，使序列能通过名称访问序列的属性（v.x,v.y代替v[0],v[1]）。也提到了实现 <code>__getitem__</code> 时可能会产生的问题，和解决方法。</p></li></ol><p>章节末尾的杂谈提到了要遵循 KISS 原则（Keep it simple, stupid），不要过度设计协议。</p><p>笔记传送门：<a href="https://my.mindnode.com/EMWUZqqSPmCA2JtZZhgWaCi7ugQfiLyiLrsy1Tqb" target="_blank" rel="noopener">序列的修改、散列和切片</a></p><h3 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h3><blockquote><p>本章讨论的话题是接口：从鸭子类型的代表特征动态协议，到使接口更明确、能验证实现是否符合规定的抽象基类（Abstract Base Class，ABC）</p></blockquote><p>我们可能不需要写抽象基类，但是阅读本章能够教我们怎么阅读标准库和其他包中的抽象基类源码。</p><p>其中，作者引用了 Alex Martelli 的一篇文章，用表型系统学(phenetics)和支序系统学（cladistics）用水禽来类比抽象基类。(⊙﹏⊙)b</p><p>其中有第十章提到的「鸭子类型」，还有以前没提过的、描述一种新的 Python 编程风格的「白鹅类型」（goose typing）。</p><blockquote><p>白鹅类型指，只要 cls 是抽象基类，即 cls 的元类是 <code>abc.ABCMeta</code>，就可以使用 <code>isinstance(obj, cls)</code>。</p></blockquote><p>对此，作者在章节小结里面提到：</p><blockquote><p>借助「白鹅类型」，可以使用抽象基类明确声明接口，而且类可以子类化抽象基类或使用抽象基类注册（无需在继承关系中确立静态的强链接），宣称它实现了某个接口。  </p></blockquote><p>本章最后还介绍了和 Go 语言协议的功能十分类似的 <code>__subclasshook__</code> 方法。</p><p>笔记传送门：<a href="https://my.mindnode.com/SiejkpsT7xLeNL7wCH2Mrp5SaMN7Ex2EyJ5VivGL" target="_blank" rel="noopener">接口：从协议到抽象基类</a></p><h3 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h3><p>分析 GUI 工具包 Tkhinter 的多重继承，并且展开分析了多次继承所带来的「菱形问题」，以及 Python 对应的解决方案——方法解析顺序（Method Resolution Order，MRO)，最后作者给了八条关于处理多重继承的建议。</p><p><a href="https://docs.python.org/3/tutorial/classes.html#multiple-inheritance" target="_blank" rel="noopener">9.5.1. Multiple Inheritance</a> 里面提到了继承顺序是深度优先从左至右不重复。</p><blockquote><p>For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as <strong>depth-first, left-to-right, not searching twice in the same class</strong> where there is an overlap in the hierarchy. </p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/30/595600652d904.jpg" alt></p><p>笔记传送门：<a href="https://my.mindnode.com/qn4fVVx826kDNss71p4f3d6P2rxHsFwo5h7pQb1q" target="_blank" rel="noopener">继承的优缺点</a></p><h3 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h3><p>第十三章介绍了重载运算符的时候要考虑多重情况。</p><blockquote><p>In the face of ambiguity, refuse the temptation to guess.<br>面对太多的可能，不要尝试猜测。（ZoomQuiet禅译）<br>——《<a href="https://www.python.org/doc/humor/#the-zen-of-python" target="_blank" rel="noopener">The Zen of Python</a>》</p></blockquote><p>我们要严谨地对待可能会出现的操作数。</p><p>对于为什么需要重载运算符，在杂谈中作者提到了对于一部分人来说，重载运算符是十分重要的，<strong>符合人类直觉的表示法</strong>十分重要，例如金融工作会接触到一些由不同类型的参数（整数、或其他精度的数字）组成的公式。相比于不支持运算符重载的 Go 与 Java 语言，Python 采取了折中的方式，允许重载运算符，也有一些限制，如：不能重载内置类型的运算符、不能新建运算符、一些运算符也不能重载（is、and、or、not）。</p><p>笔记传送门：<a href="https://my.mindnode.com/keGv1PsLvmtApbmt6bzFjhjtwwgziGGUqyx9vN8y" target="_blank" rel="noopener">正确重载运算符</a></p><h3 id="第十四章"><a href="#第十四章" class="headerlink" title="第十四章"></a>第十四章</h3><p>作者分别介绍了迭代器、生成器表达式和生成器函数，并详细地列举了每个标准库生成器函数的用法。</p><p>前面介绍过 Python 内置的数据类型，如列表和元组，能让我们高效地访问数据集，但这些序列只能表示已知且<strong>长度有限</strong>的数据集。要表示无限长度的数据集，例如斐波拉契数列，就需要用到新的构造方式，这也是本章的话题的由来。</p><blockquote><p>扫描内存中放不下的数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项。这就是迭代器模式（Iterator pattern） 。</p></blockquote><p>其中作者依然很注意用词，生成器是 “yields or produces” 生成值，而不是 “returns” 返回值，这样有助于理解生成器获取结果的过程，因为生成器不是以「常规」方式返回值的。</p><p>笔记传送门：<a href="https://my.mindnode.com/rbWsvgTKPcs7v9TmzxrzryuYPs631RCrXW4USZqR" target="_blank" rel="noopener">可迭代的对象、迭代器和生成器</a></p><h3 id="第十五章"><a href="#第十五章" class="headerlink" title="第十五章"></a>第十五章</h3><p>介绍了 else 的三种用法与上下文管理器和 with 的作用，作者用<code>__enter__</code>、<code>__exit__</code>等方法手动地实现了一个上下文管理器，还介绍了 <code>@contextmanager</code> 作为另外一种更优雅的实现上下文管理器的方法。其中 <code>@contextmanager</code> 的 <code>yield</code> 语句也引出了第十六章中协程的概念。</p><p>笔记传送门：<a href="https://my.mindnode.com/eTfDEjFxWMpScyZYGfzZYGaGpooKF2LJGFvbdbRF" target="_blank" rel="noopener">上下文管理器和else块</a></p><h3 id="第十六章"><a href="#第十六章" class="headerlink" title="第十六章"></a>第十六章</h3><p>建议看第十六、十七、十八章之前先理解五个概念：线程、进程、协程、并发和并行。</p><p>自己参考了：</p><ul><li><p><a href="http://www.jianshu.com/p/f11724034d50" target="_blank" rel="noopener">进程，线程，协程与并行，并发- 简书</a></p></li><li><p><a href="https://www.zhihu.com/question/20511233" target="_blank" rel="noopener">协程的好处是什么？- 知乎</a></p></li><li><p><a href="http://www.jianshu.com/p/02b7a279c588" target="_blank" rel="noopener">Python进程、线程、回调与协程 总结笔记</a></p></li></ul><p>在本章中，作者介绍了如何构建协程，和协程的一些使用场景，章节末尾，作者举了一个离散事件仿真示例，说明如何使用生成器代替线程和回调，实现并发。</p><p>在前些章节的基础上，作者在这章提到 yield 可以看做是控制流程的方式，即 yield 能获取值（<code>.send(foo)</code>），也能产出值（<code>foo = yield</code>），还能不获取和产出值（yield 后没有表达式）。因此，我们能用它来构建协程。</p><blockquote><p>不管数据如何流动，yield 都是一种流程控制工具，使用它可以实现协作式多任务：协程可以把控制器让步给中心调度程序，从而激活其他的协程。</p></blockquote><p>除了调用 <code>.send(...)</code> 方法发送数据，本章还介绍使用 <code>yield from</code> 结构驱动的生成器函数。</p><p>扩展阅读：</p><ul><li><p><a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/" target="_blank" rel="noopener">SICP in Python</a> 有一段关于并行计算的非常精彩的解释：<a href="https://wizardforcel.gitbooks.io/sicp-py/content/ch4.html#43-并行计算" target="_blank" rel="noopener">4.3 并行计算</a></p></li><li><p><a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/" target="_blank" rel="noopener">SICP in Python</a> 中协程的一节里着重讲了将复杂程序解构为小型、模块化组件的技巧：<a href="https://wizardforcel.gitbooks.io/sicp-py/content/ch5.html#53-协程" target="_blank" rel="noopener">5.3 协程</a></p></li></ul><p>笔记传送门：<a href="https://my.mindnode.com/4qpfqK3UY5ZdNVyEje4sXnFJ9PoXTFpNJVsn2pZx" target="_blank" rel="noopener">协程</a></p><h3 id="第十七章"><a href="#第十七章" class="headerlink" title="第十七章"></a>第十七章</h3><blockquote><p>并发是计算机科学中最难的概念之一（通常最好别去招惹它） 。<br>——David Beazley Python 教练和科学狂人</p></blockquote><p>在第十七章，作者用一个下载国旗图片的例子来介绍网络下载的三种风格：依序下载、<code>concurrent.futures</code> 模块（<code>ThreadPoolExecutor</code> 和 <code>ProcessPoolExecutor</code> 类）实现的并发下载和 asyncio 包实现的并发下载。作者还介绍了阻塞性 I/O 和 GIL，最后介绍了如何借助 <code>concurrent.futures.ProcessPoolExecutor</code> 类使用多进程。 </p><p>future 指一种对象，表示异步执行的操作。</p><p>早期的计算机从单用户操作系统（同一时间只能运行一个任务）转变成多任务操作系统（同一时间可以运行多个任务），又由于多任务操作系统中程序经常抢夺系统资源而引发死锁这种缺陷，在 20 世纪 60 年代，计算机科学家就开始探索并发编程的道路，并发指交替执行多个任务，解决的就是前面提到的多任务操作系统的缺陷。直到现在，很多编程语言都为并发提供了支持，其中包括原生支持并发的 Go 语言，和有相关模块支持的 Python。</p><blockquote><p>并发（concurrency）不是并行（parallelism）。并行是让不同的代码片段同时在不同的物理处理器上执行。并行的关键是同时做很多事情，而并发是指同时管理很多事情，这些事情可能只做了一半就被暂停去做别的事情了。在很多情况下，并发的效果比并行好，因为操作系统和硬件的总资源一般很少，但能支持系统同时做很多事情。<br>——《Go 语言实战》</p></blockquote><p>笔记传送门：<a href="https://my.mindnode.com/A6WWkGQgdYx9LtzvnziszgHXwKcxidy2cKKbww8r" target="_blank" rel="noopener">使用future处理并发</a></p><h3 id="第十八章"><a href="#第十八章" class="headerlink" title="第十八章"></a>第十八章</h3><blockquote><p>并发是指一次处理多件事。<br>并行是指一次做多件事。<br>二者不同，但是有联系。<br>一个关于结构，一个关于执行。<br>并发用于制定方案，用来解决可能（但未必）并行的问题。<br>——Rob Pike Go 语言的创造者之一</p></blockquote><p>第十八章中，作者主要介绍了新的并发编程方式，对比了 <code>asyncio.Task</code> （协程）对象与 <code>threading.Thread</code> （线程）对象的区别，包括 Python 包使用方式的区别和中断时协程与线程的区别：锁的保留。章节尾，作者介绍了 asyncio 包的使用和并发编程需要注意的地方。</p><p>笔记待补</p><h3 id="第十九章"><a href="#第十九章" class="headerlink" title="第十九章"></a>第十九章</h3><p>第十九章主要介绍了动态属性编程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = Foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.b = property(<span class="keyword">lambda</span> self: self.a + <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.b</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>这就叫做动态属性（dynamic attribute），不同于属于静态语言的 Java 需要依靠 setter 和 getter 方法，Python 能十分方便地设置属性和读取属性。</p><p>作者拿 FrozenJSON 类做例子：把嵌套的字典和列表转换成嵌套的 FrozenJSON 实例和实例列表。FrozenJSON 类的代码展示了如何使用特殊的 <code>__getattr__</code> 方法（处理属性的函数）在读取属性时即时转换数据结构。</p><p>作者还介绍了很多处理属性的属性和函数以及利用特性(@properties)来修改设置属性和读取属性的方式。</p><p>笔记传送门：<a href="https://my.mindnode.com/ByXkheqCf71cuELJZyYHHwt47HiaeoVqrSY3nxZB" target="_blank" rel="noopener">动态属性和特性</a></p><h3 id="第二十章"><a href="#第二十章" class="headerlink" title="第二十章"></a>第二十章</h3><p>有时候看书看着就忘了一些名词是什么了，因此参考了下<a href="https://harveyqing.gitbooks.io/python-read-and-write/content/python_advance/python_descriptor.html" target="_blank" rel="noopener">【译】Python描述符指南</a>，描述符类就是实现描述符协议的类。</p><p>相比于第十九章中利用特性（@properties）来修改属性的存取逻辑，第二十章主要介绍了描述符——对多个属性运用相同存取逻辑的一种方式。两者的区别是特性有时更合适和简单，而描述符更灵活。这章还介绍了覆盖型与非覆盖型描述符的对比，最后也给出了使用描述符的建议和优缺点。</p><p>笔记传送门：<a href="https://my.mindnode.com/GVWcPSN148gphwzVNEok3gGhFNCVWyPkVjmFe2yY" target="_blank" rel="noopener">属性描述符</a></p><h3 id="第二十一章"><a href="#第二十一章" class="headerlink" title="第二十一章"></a>第二十一章</h3><blockquote><p>（元类）是深奥的知识，99% 的用户都无需关注。如果你想知道是否需要使用元类，我告诉你，不需要（真正需要使用元类的人确信他们需要，无需解释原因） 。<br>——Tim Peters<br>Timsort 算法的发明者，活跃的 Python 贡献者</p></blockquote><p>上面是第二十一章的引言，我听从这位传奇开发者的建议，没有看。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整本书都在强调如何最大限度地利用 Python 标准库以及讲述 Python 背后的设计思想。身处众多动态编程语言中间，Python 无疑是独行独立的，这也是为什么很多 Python 开发者骄傲地宣称自己是一名 Pythonista。</p><p>自己只是不求甚解地通读了一遍书，学到了很多，但书中仍有太多不熟悉的知识点。因为假期不多了，只能等日后二刷这本书。过一遍这本书最大的收获莫过于在面对问题的时候，自己的工具箱又多了不少工具，即使这工具还不太「趁手」。其中感受最深的就是现在看一些 Segmentfault 或 StackOverflow 问题的答案的时候不再那么毫无头绪，并开始试着从前辈们的角度思考问题。另外书中多次提到 Django 的一些实现方式，对自己日后读源码的时候有帮助。</p><blockquote><p>仓促本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心它，而想去做别的事。<br>——罗伯特 · M · 波西格 《禅与摩托车维修艺术》</p></blockquote><p>自己的确因为阅读计划的期限而读的仓促了一些，这句话放到文尾，提醒自己在读下一本书的时候，尽量做到静下心来。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两个问题&quot;&gt;&lt;a href=&quot;#两个问题&quot; class=&quot;headerlink&quot; title=&quot;两个问题&quot;&gt;&lt;/a&gt;两个问题&lt;/h2&gt;&lt;h3 id=&quot;学了-Python-基础就够了吗？&quot;&gt;&lt;a href=&quot;#学了-Python-基础就够了吗？&quot; class=&quot;headerlink&quot; title=&quot;学了 Python 基础就够了吗？&quot;&gt;&lt;/a&gt;学了 Python 基础就够了吗？&lt;/h3&gt;&lt;p&gt;前言的引言给出了答案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用 0.9.6 版的 Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼） 。&lt;br&gt;—— Tim Peters&lt;br&gt;传奇的核心开发者， “Python 之禅”作者&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://frankorz.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://frankorz.com/tags/Python/"/>
    
      <category term="读后感" scheme="http://frankorz.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言的网络编程简介</title>
    <link href="http://frankorz.com/2017/04/29/go-from-tcp-to-http/"/>
    <id>http://frankorz.com/2017/04/29/go-from-tcp-to-http/</id>
    <published>2017-04-29T07:48:53.000Z</published>
    <updated>2017-04-30T01:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文通过 Go 语言写几个简单的通信示例，从 TCP 服务器过渡到 HTTP 开发，从而简单介绍 net 包的运用。</p><a id="more"></a><h2 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h2><p>首先来看一个 TCP 服务器例子</p><figure class="highlight go"><figcaption><span>tcp-write/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// net 包提供方便的工具用于 network I/O 开发，包括TCP/IP, UDP 协议等。</span></span><br><span class="line"><span class="comment">// Listen 函数会监听来自 8080 端口的连接，返回一个 net.Listener 对象。</span></span><br><span class="line">li, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放连接，通过 defer 关键字可以让连接在函数结束前进行释放</span></span><br><span class="line"><span class="comment">// 这样可以不关心释放资源的语句位置，增加代码可读性</span></span><br><span class="line"><span class="keyword">defer</span> li.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断循环，不断接收来自客户端的请求</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// Accept 函数会阻塞程序，直到接收到来自端口的连接</span></span><br><span class="line"><span class="comment">// 每接收到一个链接，就会返回一个 net.Conn 对象表示这个连接</span></span><br><span class="line">conn, err := li.Accept()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字符串写入到客户端</span></span><br><span class="line">fmt.Fprintln(conn, <span class="string">"Hello from TCP server"</span>)</span><br><span class="line"></span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对应的文件夹下启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>模拟客户端程序发出请求，这里使用 netcat 工具，也就是 nc 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nc localhost 8080</span><br><span class="line">Hello from TCP server</span><br></pre></td></tr></table></figure><p>通过 net 包，我们可以很简单的去写一个 TCP 服务器，代码可读性强。</p><h2 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h2><p>那么我们能不能用 Go 语言来模拟客户端，从而连接前面的服务器呢？答案是肯定的。</p><figure class="highlight go"><figcaption><span>tcp-read/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// net 包的 Dial 函数能创建一个 TCP 连接</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 别忘了关闭连接</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">// 通过 ioutil 来读取连接中的内容，返回一个 []byte 类型的对象</span></span><br><span class="line"><span class="keyword">byte</span>, err := ioutil.ReadAll(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// []byte 类型的数据转成字符串型，再将其打印输出</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="keyword">byte</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行服务器后，再在所在的文件夹下启动客户端，会看到来自服务器的问候。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Hello from TCP server</span><br></pre></td></tr></table></figure><h2 id="TCP-协议模拟-HTTP-请求"><a href="#TCP-协议模拟-HTTP-请求" class="headerlink" title="TCP 协议模拟 HTTP 请求"></a>TCP 协议模拟 HTTP 请求</h2><p>我们知道 TCP/IP 协议是传输层协议，主要解决的是数据如何在网络中传输。而 HTTP 是应用层协议，主要解决的是如何包装这些数据。</p><p>下面的七层网络协议图也能看到 HTTP 协议是处于 TCP 的上层，也就是说，HTTP 使用 TCP 来传输其报文数据。</p><p><img src="https://ooo.0o0.ooo/2017/04/29/59047bbfe298f.png" alt="七层网络协议图"></p><p>现在我们写一个基于 TCP 协议的服务器，并能模拟。在这其中，我们需要模拟发送 HTTP 响应头信息，我们可以用 <code>curl -i</code> 命令先来查看一下其他网站的响应头信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i <span class="string">"www.baidu.com"</span></span><br><span class="line">HTTP/1.1 200 OK  <span class="comment"># HTTP 协议及请求码</span></span><br><span class="line">Server: bfe/1.0.8.18<span class="comment"># 服务器使用的WEB软件名及版本</span></span><br><span class="line">Date: Sat, 29 Apr 2017 07:30:33 GMT  <span class="comment"># 发送时间</span></span><br><span class="line">Content-Type: text/html   <span class="comment"># MIME类型</span></span><br><span class="line">Content-Length: 277<span class="comment"># 内容长度</span></span><br><span class="line">Last-Modified: Mon, 13 Jun 2016 02:50:23 GMT</span><br><span class="line">...  <span class="comment"># balabala</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;  <span class="comment"># 消息体</span></span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来，我们尝试写出能输出对应格式响应内容的服务器。</p><figure class="highlight go"><figcaption><span>tcp-server-for-http/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">li, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> li.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := li.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数前添加 go 关键字，就能使其拥有 Go 语言的并发功能</span></span><br><span class="line"><span class="comment">// 这样我们可以同时处理来自不同客户端的请求</span></span><br><span class="line"><span class="keyword">go</span> handle(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">// 回应客户端的请求</span></span><br><span class="line">respond(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respond</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">// 消息体</span></span><br><span class="line">body := <span class="string">`&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charet="UTF-8"&gt;&lt;title&gt;Go example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line"><span class="comment">// HTTP 协议及请求码</span></span><br><span class="line">fmt.Fprint(conn, <span class="string">"HTTP/1.1 200 OK\r\n"</span>)</span><br><span class="line"><span class="comment">// 内容长度</span></span><br><span class="line">fmt.Fprintf(conn, <span class="string">"Content-Length: %d\r\n"</span>, <span class="built_in">len</span>(body)) </span><br><span class="line"><span class="comment">// MIME类型</span></span><br><span class="line">fmt.Fprint(conn, <span class="string">"Content-Type: text/html\r\n"</span>)</span><br><span class="line">fmt.Fprint(conn, <span class="string">"\r\n"</span>)</span><br><span class="line">fmt.Fprint(conn, body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>go run main.go</code> 启动服务器之后，跳转到 <a href="localhost:8080" target="_blank" rel="noopener">localhost:8080</a>，就能看到网页内容，并且用开发者工具能看到其请求头。</p><p><img src="https://ooo.0o0.ooo/2017/04/29/59047bb81e615.jpg" alt></p><h2 id="最简单的-HTTP-服务器"><a href="#最简单的-HTTP-服务器" class="headerlink" title="最简单的 HTTP 服务器"></a>最简单的 HTTP 服务器</h2><p>几行代码就能实现一个最简单的 HTTP 服务器。</p><figure class="highlight go"><figcaption><span>simple-http/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开后会发现显示「404 page not found」，这说明 HTTP 已经开始服务了！</p><h2 id="ListenAndServe"><a href="#ListenAndServe" class="headerlink" title="ListenAndServe"></a>ListenAndServe</h2><blockquote><p>Go 是通过一个函数 ListenAndServe 来处理这些事情的，这个底层其实这样处理的：初始化一个server 对象，然后调用了 net.Listen(“tcp”, addr)，也就是底层用 TCP 协议搭建了一个服务，然后监控我们设置的端口。</p><footer><strong>《Build web application with golang》</strong><cite>astaxie</cite></footer></blockquote><p>前面我们已经对 TCP 服务器有点熟悉了，而 HTTP 使用 TCP 来传输其报文数据，接下来看看如何用 net/http 包来实现在其上的 HTTP 层。</p><p>查文档可以发现 http 包下的 ListenAndServe 函数第一个参数是地址，而第二个是 Handler 类型的参数，我们想要显示内容就要在第二个参数下功夫。</p><figure class="highlight go"><figcaption><span>ListenAndServe</span><a href="https://golang.org/src/net/http/server.go?s" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>再次查文档，得知 Handler 是一个接口，也就是说只要我们给某一个类型创建 <code>ServeHTTP(ResponseWriter, *Request)</code> 方法，就能符合接口的要求，也就实现了接口。</p><figure class="highlight go"><figcaption><span>http.Handler</span><a href="https://golang.org/src/net/http/server.go?s" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">        ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>servehttp/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 创建一个 foo 类型</span></span><br><span class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 为 foo 类型创建 ServeHTTP 方法，以实现 Handle 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Implement the Handle interface."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建对象，类型名写后面..</span></span><br><span class="line"><span class="keyword">var</span> f foo</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>,f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码后打开能看到输出的字符串。</p><p><img src="https://ooo.0o0.ooo/2017/04/29/59047bb28f70d.jpg" alt></p><h3 id="http-Request"><a href="#http-Request" class="headerlink" title="*http.Request"></a>*http.Request</h3><p>上面我们实现的小服务器里，我们无论访问 <a href="localhost:8080" target="_blank" rel="noopener">localhost:8080</a> 还是 <a href="localhost:8080/foo" target="_blank" rel="noopener">localhost:8080/foo</a> 都是一样的页面，这说明我们之前设定的是默认的页面，还没有为特定的路由(route)设置内容。</p><p>路由这些信息实际上就存在 ServeHTTP 函数的第二个参数 <code>*http.Request</code> 中， <code>*http.Request</code> 存放着客户端发送至服务器的请求信息，例如请求链接、请求方法、响应头、消息体等等。</p><p>现在我们可以把上面的代码改造一下。</p><figure class="highlight go"><figcaption><span>serveHTTP/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 创建一个 foo 类型</span></span><br><span class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 为 foo 类型创建 ServeHTTP 方法，以实现 Handle 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 根据 URL 的相对路径来设置网页内容（不优雅）</span></span><br><span class="line"><span class="keyword">switch</span> r.URL.Path &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/boy"</span>:</span><br><span class="line">fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/girl"</span>:</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hehe."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建对象，类型名写后面..</span></span><br><span class="line"><span class="keyword">var</span> f foo</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>,f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再优雅一点"><a href="#再优雅一点" class="headerlink" title="再优雅一点"></a>再优雅一点</h3><p>我们可以用 HTTP 请求多路复用器(HTTP request multiplexer) 来实现分发路由，而<code>http.NewServeMux()</code> 返回的 <code>*ServeMux</code> 对象就能实现这样的功能。下面是 <code>*ServeMux</code> 的部分源码，能看到通过 <code>*ServeMux</code> 就能为每一个路由设置单独的一个 handler 了，简单地说就是不同的内容。</p><figure class="highlight go"><figcaption><span>ServeMux</span><a href="https://golang.org/src/net/http/server.go?s" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</span><br><span class="line">mu    sync.RWMutex         <span class="comment">// 读写锁</span></span><br><span class="line">m     <span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry  <span class="comment">// 路由信息（键值对）</span></span><br><span class="line">hosts <span class="keyword">bool</span>                 <span class="comment">// 是否包含 hostnames</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">explicit <span class="keyword">bool</span>     <span class="comment">// 是否精确匹配</span></span><br><span class="line">h        Handler  <span class="comment">// muxEntry.Handler 是接口</span></span><br><span class="line">pattern  <span class="keyword">string</span>   <span class="comment">// 路由</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>*ServeMux</code> 来写一个例子。</p><figure class="highlight go"><figcaption><span>newServeMux/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> boy <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b boy)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> girl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g girl)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hehe."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b boy</span><br><span class="line"><span class="keyword">var</span> g girl</span><br><span class="line"><span class="keyword">var</span> f foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个 *ServeMux 对象</span></span><br><span class="line">mux := http.NewServeMux()  </span><br><span class="line">mux.Handle(<span class="string">"/boy/"</span>, b)</span><br><span class="line">mux.Handle(<span class="string">"/girl/"</span>, g)</span><br><span class="line">mux.Handle(<span class="string">"/"</span>, f)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, mux)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能为每一个路由设置单独的页面了。</p><h3 id="再再优雅一点"><a href="#再再优雅一点" class="headerlink" title="再再优雅一点"></a>再再优雅一点</h3><p><code>http.Handle(pattern string, handler Handler)</code> 还能帮我们简化代码，它默认创建一个 <code>DefaultServeMux</code>，也就是默认的 <code>ServeMux</code> 来存 handler 信息，这样就不需要 <code>http.NewServeMux()</code> 函数了。这看起来虽然没有什么少写多少代码，但是这是下一个更加优雅方法的转折点。</p><figure class="highlight go"><figcaption><span>defaultServeMux/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> boy <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b boy)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> girl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g girl)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hehe."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b boy</span><br><span class="line"><span class="keyword">var</span> g girl</span><br><span class="line"><span class="keyword">var</span> f foo</span><br><span class="line"></span><br><span class="line">http.Handle(<span class="string">"/boy/"</span>, b)</span><br><span class="line">http.Handle(<span class="string">"/girl/"</span>, g)</span><br><span class="line">http.Handle(<span class="string">"/"</span>, f)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再再再优雅一点"><a href="#再再再优雅一点" class="headerlink" title="再再再优雅一点"></a>再再再优雅一点</h3><p><code>http.HandleFunc(pattern string, handler func(ResponseWriter, *Request))</code> 可以看做 <code>http.Handle(pattern string, handler Handler)</code> 的一种包装。前者的第二个参数变成了一个函数，这样我们就不用多次新建对象，再为对象实现 <code>ServeHTTP()</code> 方法来实现不同的 handler 了。下面是 <code>http.HandleFun()</code> 的部分源码。</p><figure class="highlight go"><figcaption><span>http.HandleFun()</span><a href="https://golang.org/src/net/http/server.go?s" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 同样利用 DefaultServeMux 来存路由信息</span></span><br><span class="line">DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 是不是似曾相识？</span></span><br><span class="line">mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>http.HandleFun()</code> 来重写之前的例子。</p><figure class="highlight go"><figcaption><span>handleFun/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">boy</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">girl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hehe."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/boy/"</span>, boy)</span><br><span class="line">http.HandleFunc(<span class="string">"/girl/"</span>, girl)</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, foo)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HandlerFunc"><a href="#HandlerFunc" class="headerlink" title="HandlerFunc"></a>HandlerFunc</h3><p>另外，http 包里面还定义了一个类型 <code>http.HandlerFunc</code>，该类型默认实现 Handler 接口，我们可以通过 <code>HandlerFunc(foo)</code> 的方式来实现类型强转，使 <code>foo</code> 也实现了 Handler 接口。</p><figure class="highlight go"><figcaption><span>HandlerFunc</span><a href="https://golang.org/src/net/http/server.go?s" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 实现 <span class="title">Handler</span> 接口</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>handleFun/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">boy</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">girl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hehe."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// http.Handler() 的第二个参数是要实现了 Handler 接口的类型</span></span><br><span class="line"><span class="comment">// 可以通过类型强转来重新使用该函数来实现</span></span><br><span class="line">http.Handle(<span class="string">"/boy/"</span>, http.HandlerFunc(boy))</span><br><span class="line">http.Handle(<span class="string">"/girl/"</span>, http.HandlerFunc(girl))</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.HandlerFunc(foo))</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>本文从搭建 TCP 服务器一步步到搭建 HTTP 服务器，展示了 Go 语言网络库的强大，我认为 Go 语言是熟悉网络协议的一个很好的工具。自己从熟悉了拥有各种 feature 的 Swift 语言之后再入门到看似平凡无奇的 Go 语言，经历了从为语言的平庸感到惊讶不解到为其遵循规范和良好的工业语言设计而感到惊叹和兴奋的转变。</p><p>最后希望本文能为有基础的同学理清思路，也能吸引更多同学来学习这门优秀的语言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过 Go 语言写几个简单的通信示例，从 TCP 服务器过渡到 HTTP 开发，从而简单介绍 net 包的运用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://frankorz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go 学习资源集合</title>
    <link href="http://frankorz.com/2017/04/03/go-learning-source/"/>
    <id>http://frankorz.com/2017/04/03/go-learning-source/</id>
    <published>2017-04-03T06:39:18.000Z</published>
    <updated>2017-06-11T08:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><center>![](https://ooo.0o0.ooo/2017/04/06/58e5cd73cf67c.png)</center><p>之前在写移动应用的时候，深刻体会到自己很有必要学会写后端，于是进了 Golang 的坑。以下是我在学习的时候遇到的好资源（多为英文），先写在这里。</p><a id="more"></a><p>事实上，Go 语言的 <a href="https://github.com/golang/go/wiki" target="_blank" rel="noopener">wiki</a> 上已经包含了很多资源，下文只是个人关注过的一些资源的总结。</p><h3 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h3><div class="table-container"><table><thead><tr><th>视频</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://tour.golang.org/welcome/1" target="_blank" rel="noopener">A Tour of Go</a></td><td>官方的线上教程，内容为 Go 语言基础。</td></tr><tr><td><a href="http://www.bilibili.com/video/av8845689/" target="_blank" rel="noopener">「教程」Go语言基础 (O’Reilly)</a></td><td>O’Reilly 的 Go 语言基础教程，鬼知道我怎么发现的…</td></tr><tr><td><a href="http://exercism.io/languages/go/about" target="_blank" rel="noopener">Exercism</a></td><td>通过解决练手用的问题来锻炼编写 Go，这网站还有其他三十多种语言的练手项目喔。</td></tr><tr><td><a href="http://www.golang-book.com/guides/bootcamp" target="_blank" rel="noopener">Go Web Programming Bootcamp</a></td><td>Todd McLeod 在别的学校开过的训练营视频，从 Go 基础讲到基础的服务器开发和 GAE。</td></tr><tr><td><a href="https://www.udemy.com/go-programming-language/learn/v4/?couponCode=OB1KBE" target="_blank" rel="noopener">Web Development w/ Google’s Go (golang) Programming Language</a></td><td>付费，Todd McLeod 讲的 Go 的 web development 入门课程。</td></tr><tr><td><a href="https://jaggerwang.net/develop-and-deploy-api-service-with-go-and-docker-intro/" target="_blank" rel="noopener">Go + Docker API服务开发和部署</a></td><td>Jagger Wang 在开发「在球场」这款体育社交类应用过程中的技术总结。</td></tr></tbody></table></div><p><a href="https://github.com/golang/go/wiki/Courses" target="_blank" rel="noopener">更多课程</a></p><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><div class="table-container"><table><thead><tr><th>书名</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://go-zh.org/doc/" target="_blank" rel="noopener">Go 中文文档</a></td><td><a href="https://golang.org/doc/" target="_blank" rel="noopener">官方文档</a>的翻译，注意文档翻译时间。</td></tr><tr><td><a href="http://docs.plhwin.com/gopl-zh/index.html" target="_blank" rel="noopener">Go 语言圣经（中文版）</a></td><td>Go 语言圣经 <a href="http://gopl.io/" target="_blank" rel="noopener">《The Go Programming Language》</a> 的中文版本，入门必读。本书对编程新手可能有难度，其中部分例子有点高大上，但本书的质量可以完全放心。</td></tr><tr><td><a href="https://github.com/bingoHuang/effective-go-zh-en" target="_blank" rel="noopener">Effective Go（中英双语版）</a></td><td><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a> 的中英双语版，入门必读。</td></tr><tr><td><a href="https://www.amazon.com/Network-Programming-Go-Essential-Securing/dp/1484226917" target="_blank" rel="noopener">Network programming with Go: Essential Skills for Using and Securing Networks</a></td><td>细讲 Go 语言网络编程的书，<a href="https://github.com/astaxie" target="_blank" rel="noopener">astaxie</a> 发起过翻译，中文译本在<a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="noopener">NPWG_zh</a></td></tr><tr><td><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">build-web-application-with-golang</a></td><td><a href="https://github.com/astaxie" target="_blank" rel="noopener">astaxie</a> 写的 web 开发向的 Go 教程，该教程被翻译成多种语言，总共有将近 1W5 个 star。</td></tr><tr><td><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="noopener">Go 简易教程</a></td><td><a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="noopener">《The Little Go Book》</a>中文译本，中文正式名《Go 简易教程》。</td></tr><tr><td><a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">雨痕的学习笔记</a></td><td>雨痕个人学习笔记，Go 语言部分的源码剖析内容很有价值。</td></tr><tr><td><a href="http://www.golangbootcamp.com/book/frontmatter" target="_blank" rel="noopener">Go Bootcamp</a></td><td>又一本 Go 入门的免费电子书</td></tr><tr><td><a href="https://iromin.files.wordpress.com/2016/01/golanguagestudycourse.pdf" target="_blank" rel="noopener">Go Language Study Course</a></td><td>来源自<a href="https://rominirani.com/go-language-study-group-an-analysis-1562b59642f0" target="_blank" rel="noopener">「Go Language Study Group — An Analysis」</a>。Romin Irani 和 Satish Talim 开设网课后总结的讲义，有参考价值。</td></tr><tr><td><a href="https://github.com/thewhitetulip/web-dev-golang-anti-textbook/" target="_blank" rel="noopener">Webapps in Go</a></td><td>免费，教你不依赖框架写一个 web app。</td></tr><tr><td><a href="https://github.com/Checkmarx/Go-SCP" target="_blank" rel="noopener">Go-SCP</a></td><td>免费，关于 Go 语言在生产环境中安全问题的应用。<a href="https://www.gitbook.com/book/checkmarx/go-scp/details" target="_blank" rel="noopener">GitBook</a></td></tr><tr><td><a href="https://gobyexample.com" target="_blank" rel="noopener">Go by Example</a></td><td>通过大量的小例子来学习 Go。</td></tr><tr><td><a href="http://www.epubit.com.cn/book/details/4291" target="_blank" rel="noopener">Go 语言实战</a></td><td>付费，<a href="https://www.amazon.com/Go-Action-William-Kennedy/dp/1617291781/" target="_blank" rel="noopener">《Go in action》</a>的中文版，适合有其他编程语言基础的同学来入门，可以配合圣经一起看。</td></tr><tr><td><a href="https://book.douban.com/subject/27016236/" target="_blank" rel="noopener">Go 并发编程实战（第2版）</a></td><td>付费，深入 Go 语言及其并发原理。</td></tr><tr><td><a href="https://www.amazon.com/Web-Development-Go-Building-Scalable/dp/1484210530/" target="_blank" rel="noopener">Web Development with Go: Building Scalable Web Apps and RESTful Services</a></td><td>付费，我认为出彩之处是里面会教你写一个有 JWT 验证的 API Server 项目。</td></tr><tr><td><a href="https://www.amazon.com/Go-Programming-Blueprints-Mat-Ryer-ebook/dp/B01GQCQ8OW" target="_blank" rel="noopener">Go Programming Blueprints - Second Edition</a></td><td>付费，Go 语言进阶。</td></tr><tr><td><a href="https://www.amazon.com/Writing-Interpreter-Go-Thorsten-Ball/dp/300055808X/" target="_blank" rel="noopener">Writing An Interpreter In Go</a></td><td>付费，用 Go 语言写一个解释器。</td></tr></tbody></table></div><p><a href="https://github.com/golang/go/wiki/Books" target="_blank" rel="noopener">更多书籍</a></p><p>dariubs 收集的列表：<a href="https://github.com/dariubs/GoBooks" target="_blank" rel="noopener">GoBooks</a></p><p>推荐 Go 语言书的推特号：<a href="https://twitter.com/gopherbook" target="_blank" rel="noopener">Gopher Book</a></p><!--### 相关问题[Best tutorials/screencasts/courses to learn go?](https://www.reddit.com/r/golang/comments/5zxqu8/best_tutorialsscreencastscourses_to_learn_go/)--><h3 id="Youtube-频道"><a href="#Youtube-频道" class="headerlink" title="Youtube 频道"></a>Youtube 频道</h3><div class="table-container"><table><thead><tr><th>频道名</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://www.youtube.com/watch?v=CF9S4QZuV30" target="_blank" rel="noopener">Learn Go Syntax in one video</a></td><td>一小时教你 Go 语法的视频</td></tr><tr><td><a href="https://www.youtube.com/channel/UCElzlyMtkoXaO3kFa5HL0Xw" target="_blank" rel="noopener">Todd McLeod</a></td><td>非常热爱分享 Go 教程的大叔，本文开头的 Udemy 课程就是他发布的。</td></tr><tr><td><a href="https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA" target="_blank" rel="noopener">Go In 5 Minutes</a></td><td>五分钟学一个小知识点。</td></tr><tr><td><a href="https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw" target="_blank" rel="noopener">JustForFunc</a></td><td>新发现的爱发教程的 Gopher，风格奇特。</td></tr><tr><td><a href="https://www.youtube.com/user/joncalhoun/playlists" target="_blank" rel="noopener">Jon Calhoun</a></td><td>一系列 Go 实现的算法视频</td></tr></tbody></table></div><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><div class="table-container"><table><thead><tr><th>博客名</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://appliedgo.net" target="_blank" rel="noopener">Applied Go</a></td><td>Go 相关的教程</td></tr><tr><td><a href="https://www.goinggo.net" target="_blank" rel="noopener">Going Go Programming</a></td><td><a href="https://book.douban.com/subject/27015617/" target="_blank" rel="noopener">《Go 语言实战》</a>作者之一的博客</td></tr></tbody></table></div><p><a href="https://github.com/golang/go/wiki/Blogs" target="_blank" rel="noopener">更多博客</a></p><h3 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h3><div class="table-container"><table><thead><tr><th>播客名</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://changelog.com/gotime" target="_blank" rel="noopener">Go Time</a></td><td>A panel of Golang experts and special guests discuss the Go programming language, the community, and everything in between.</td></tr></tbody></table></div><h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><div class="table-container"><table><thead><tr><th>论坛名</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://forum.golangbridge.org" target="_blank" rel="noopener">Go Forum</a></td><td>蛮活跃的 Go 论坛</td></tr><tr><td><a href="https://www.reddit.com/r/golang/" target="_blank" rel="noopener">Reddit/golang</a></td><td>Reddit 的 Go 语言节点</td></tr></tbody></table></div><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><div class="table-container"><table><thead><tr><th>标题</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/" target="_blank" rel="noopener">Create A Real Time Chat App With Golang, Angular 2, And Websockets</a></td><td>对于用 Go 语言来入门后端的我来说，如何和其它技术结合使用令我耳目一新（尽管看起来不难），我很感激这篇文章：）</td></tr><tr><td><a href="https://medium.com/@IndianGuru/how-do-i-go-about-learning-go-3a58a3a29a0b" target="_blank" rel="noopener">How do I go about learning Go?</a></td><td></td></tr><tr><td><a href="https://dave.cheney.net/resources-for-new-go-programmers" target="_blank" rel="noopener">Resources for new Go programmers</a></td><td></td></tr><tr><td><a href="http://blog.tamizhvendan.in/blog/2017/05/01/using-golang-in-production-my-experiences/" target="_blank" rel="noopener">Using Golang in Production - My Experiences</a></td></tr></tbody></table></div><p>&lt;未完待续&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;![](https://ooo.0o0.ooo/2017/04/06/58e5cd73cf67c.png)&lt;/center&gt;

&lt;p&gt;之前在写移动应用的时候，深刻体会到自己很有必要学会写后端，于是进了 Golang 的坑。以下是我在学习的时候遇到的好资源（多为英文），先写在这里。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://frankorz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>聊聊慕课与时间管理工具</title>
    <link href="http://frankorz.com/2017/03/29/mooc-and-pomotodo/"/>
    <id>http://frankorz.com/2017/03/29/mooc-and-pomotodo/</id>
    <published>2017-03-29T00:13:14.000Z</published>
    <updated>2017-04-06T05:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在图灵社区活动「分享学习方法」中写了这篇文章，现在搬运过来，浅浅地普及下慕课这种学习新方式和目前所选用的时间管理工具。</p><a id="more"></a><h2 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h2><p>我以前有过看视频学编程的时光，视频里老师写一点代码，我就写一点代码。如今想起来这种方法虽然浪费时间，但是对小白而言是一个很好的入门方法，能够有效的让小白熟悉 IDE 和手把手入门编程。</p><p>MOOC 则是最近又让我眼前一亮的学习方式，其代表有：<a href="http://coursera.org" target="_blank" rel="noopener">Coursera</a>、<a href="http://edx.org" target="_blank" rel="noopener">Edx</a> 、<a href="http://cn.udacity.com" target="_blank" rel="noopener">Udacity</a>等。同样是看视频学习，Coursera 使用了短视频+限时作业+考试的方法来让学生能轻松上课的同时，用 deadline 督促学生。其次付费证书和其课堂论坛也是亮点，你上完一个课程，可以付费购买课程的证书以彰显你的努力，论坛则是开放给全球各地上同样一节课的学生。Coursera 里有部分课程都是有中文字幕的，例如普林斯顿大学的「<a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="noopener">Algorithms</a>」课。算法红宝书《算法（第4版）》的作者就是这门课的老师，Robert Sedgewick 老师在课程中给的图例和制作的动画都十分清晰精致，并且配合课件能循序渐进地分解算法。其中小课程一般一节讲一个算法或知识点，内容充实并且需要学生课下消化。这种方式和看《算法（第4版）》结合起来，学习效率事半功倍。PS：上课的同时也请完成红宝书中的课后练习。</p><p>我认为 MOOC 可贵的一个地方还是它的课程质量，因为国外 CS 课程的授课老师往往同时有很强的 academic 和 industry 的背景，所以课程通常会兼顾深度和实用性。美国大学一门课收费大约在五千刀左右，所以请努力争取白赚这些钱吧~</p><p>在这里随便列举几门课程：有被称为第一神课的「<a href="https://www.coursera.org/learn/programming-languages" target="_blank" rel="noopener">程序设计语言</a>」、斯坦福密码学大牛 Dan Boneh 讲的「<a href="https://www.coursera.org/learn/crypto" target="_blank" rel="noopener">Cryptography I</a>」、Coursera 创始人吴恩达讲的「<a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">机器学习</a>」等等。</p><p>遗憾的是 Coursera 改版之后删除了很多经典神课，例如以 CSAPP 为教材的「<a href="https://courses.cs.washington.edu/courses/cse351/16sp/videos.html" target="_blank" rel="noopener">The Hardware/Software Interface</a>」，斯坦福大学的编译原理课「Compilers」、斯坦福的另外一门偏理论的算法课「Algorithms: Design and Analysis」等等，这些课程需要自己去学校官网上找，或者去 Youtube 看视频。同时科学上网会有更好的上课体验，另外英语的学习也是很有必要的，毕竟不是门门课都有志愿者翻译成中文。</p><p>PS: 斯坦福大学也有自己的 mooc 网站，<a href="https://lagunita.stanford.edu" target="_blank" rel="noopener">Stanford Online</a></p><p>已经翻译了的公开课也有志愿者搬运到了 B 站（汗…）、网易公开课、学堂在线等平台。例如哈佛大学的计算机入门课「<a href="http://open.163.com/special/opencourse/cs50.html" target="_blank" rel="noopener">计算机科学 cs50</a>」、麻省理工学院的「<a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="noopener">算法导论</a>」课、线性代数神课「<a href="https://www.bilibili.com/video/av6731067/" target="_blank" rel="noopener">线性代数的本质</a>」、用 Python 讲解的计算机科学入门课「<a href="http://www.xuetangx.com/courses/course-v1:MITx+6_00_1x+sp/about" target="_blank" rel="noopener">计算机科学和Python编程导论</a>」、B 站 UP 主翻译的斯坦福密码学课「<a href="http://www.bilibili.com/video/av1269426/" target="_blank" rel="noopener">密码学</a>」、微软信仰中心翻译的「<a href="http://space.bilibili.com/18340402/#!/channel/detail?cid=1436" target="_blank" rel="noopener">UWP 开发入门教程</a>」等等。</p><p>更多课程及查看评分：<br><a href="http://mooc.guokr.com" target="_blank" rel="noopener">mooc 学院</a><br><a href="http://blog.coursegraph.com/coursera课程下载和存档计划四计算机科学基础公开课" target="_blank" rel="noopener">Coursera课程下载和存档计划四：计算机科学基础公开课</a><br><a href="https://www.zhihu.com/question/21095181" target="_blank" rel="noopener">三大 MOOC 网站：Coursera 与 Udacity 和 edX 比较，哪个更适合中国人？你有何经验分享？</a></p><h2 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h2><p>近年来时间管理话题变得十分火热，番茄工作法大家应该都耳熟能详了，我就不详细介绍了。很多番茄工作法的应用如雨后春笋般出现，由于受限于单平台，我没有坚持使用下来。今天推荐一款我在用一段时间的「<a href="http://pomotodo.com" target="_blank" rel="noopener">番茄土豆</a>」服务，番茄土豆拥有全平台应用，涵盖了我的苹果本、iPhone 和 iPad。另外一点就是能方便地回溯自己的番茄时间。</p><p>例如下面是在 Coursera 上算法课的统计，右下角统计了时间。</p><p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca5de499.jpg" alt></p><p>下面是最近看书学 Go 语言的记录。</p><p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca6c13fa.jpg" alt></p><p>查看自己花在阅读上的时间。</p><p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca64e605.jpg" alt></p><p>我认为每完成一个番茄就记录这段时间所做的事，这样能够培养主动记录的习惯，也方便自己对时间的统计分析。建议在记录任务的时候分配好标签，记录完整在做的事情，这样利用很短的时间就能代替追踪时间的效果。</p><p>一般免费版就足够用了，我购买了高级版是因为能够补充线下没有统计的番茄时间，高级版对于学生或教师有半价。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习方法太多了，我敢写在这的都是我感觉的确对我有帮助的方法。自己也是个菜鸟，还在探索自己的学习方法。现在越学习越清楚英语的重要性，希望大家学好英语，这样你可用的学习资源也会多出几十倍来，而不需要靠别人翻译拾人牙慧。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在图灵社区活动「分享学习方法」中写了这篇文章，现在搬运过来，浅浅地普及下慕课这种学习新方式和目前所选用的时间管理工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://frankorz.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>装饰器模式（Swift）</title>
    <link href="http://frankorz.com/2017/02/20/decorator-in-swift/"/>
    <id>http://frankorz.com/2017/02/20/decorator-in-swift/</id>
    <published>2017-02-20T14:00:02.000Z</published>
    <updated>2017-04-06T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac04972e7f3.jpg" alt></p><p>阅读《大话设计模式》和《精通 Swift 设计模式》中的装饰器模式，本文为笔记。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>装饰器模式，可以用于在运行时选择性地修改对象的行为，在处理无法修改的类时能发挥其强大的能力。</p><p>我们可以在想修改<strong>对象的行为</strong>时，又不想修改<strong>对象所属的类或其使用者</strong>，就可以使用装饰器模式。如果想修改对象的类实现，则不推荐使用装饰器模式，此时直接修改类往往更简单。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>阅读前请下载 OS X 命令工具行初始项目 <a href="https://github.com/Latias94/Decorator_in_Swift/tree/master/Decorator_start" target="_blank" rel="noopener">Decorator_start</a>，项目中注释较详细，如有问题请联系我。</p><p>项目地址：<a href="https://github.com/Latias94/Decorator_in_Swift" target="_blank" rel="noopener">Decorator_in_Swift</a></p><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03cfe0d06.png" alt="初始项目 UML 图"></p><p>Purchase 类表示顾客在商店买了什么，其中定义了两个属性来存储商品名称和价格，还有两个计算属性把信息提供给外界。</p><p>CustomerAccount 类表示一组 Purchase 对象，代表了顾客所购买的商品，<code>addPurchase(Purchase)</code>方法代表顾客购买了新商品。</p><p>Options 类中包含三个类，为前两个类提供了礼品服务，例如：2 元的礼品包装、1 元的彩带和 5 元的礼品配送。这里利用继承在 Options 类创建了三个装饰器类解决一个小问题——在不修改原来的两个类时添加了礼品服务功能。</p><p>Purchase 类和 CustomerAccount 类实现了创建一个用户对象，然后买一个特定价格的商品，如：张三购买了 10 元的帽子。后三个类则扩展了功能，能为每一个商品增加一个礼品服务的选项，如：张三购买了有彩带包装的 10 元的帽子。</p><p>但是已有的代码实现不了为一个商品添加多个礼品服务，如：张三购买了有礼品和彩带包装的 10 元的帽子。</p><p>源码运行结果：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Purchase Red Hat, Price ￥10.00</span><br><span class="line">Purchase Scarf, Price ￥20.00</span><br><span class="line">Purchase Scarf + delivery, Price ￥25.00</span><br><span class="line">Total due: ￥55.00</span><br></pre></td></tr></table></figure><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式通过创建装饰器类解决上述组合问题（礼品包装+彩带、礼品包装+彩带+礼品配送等），装饰器类是指用于封装原始类并改变其行为的类。</p><p>装饰器类提供的 API 和封装的原始类相同，为了创建其他组合，装饰器还可以封装其他装饰器。</p><p>这里的单个礼品服务类 <code>Options.swift</code> 可以看做是一个小小的装饰器。</p><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03d000641.png" alt="装饰器模式"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>装饰器类需要继承无法修改的类，来创建一个拥有该类所有方法和属性的类，用来替换原始类的功能。装饰器需要定义一个用来存储被封装对象的私有属性，从而为外界提供该对象的基本功能。</p><p>Options.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePurchasDecorator</span> : <span class="title">Purchase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>) &#123;</span><br><span class="line">    wrappedPurchase = purchase</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 礼品包装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithGiftWrap</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + giftwrap"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 礼带</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithRibbon</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + ribbon"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 礼品配送</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithDelivery</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + delivery"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在开头创建了一个继承自 Purchase 类的礼品服务的基类 BasePurchasDecorator，并把原有礼品服务类的父类修改成了它。在 BasePurchasDecorator 类中，不仅定义了一个私有属性 <code>wrappedPurchase</code> 来保存 Purchase 对象（<a href="http://frankorz.com/2017/02/20/decorator-in-swift/#增加新功能">增加新功能</a>小节能看到用途），还会对礼品服务类的属性（<code>description</code> 和 <code>totalPrice</code>）进行处理，以供继承的子类去根据自身的配送描述和价格修改其内容。</p><p>main.swift 修改为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> account = <span class="type">CustomerAccount</span>(name: <span class="string">"Joe"</span>)</span><br><span class="line">account.addPurchase(<span class="type">Purchase</span>(product: <span class="string">"Red Hat"</span>, price: <span class="number">10</span>))</span><br><span class="line">account.addPurchase(<span class="type">Purchase</span>(product: <span class="string">"Scarf"</span>, price: <span class="number">20</span>))</span><br><span class="line"><span class="comment">// 礼品配送服务</span></span><br><span class="line"><span class="comment">//account.addPurchase(PurchaseWithDelivery(product: "Scarf", price: 20))</span></span><br><span class="line"><span class="comment">// 带礼品配送服务的20元围巾</span></span><br><span class="line">account.addPurchase(</span><br><span class="line">  <span class="type">PurchaseWithDelivery</span>(purchase:</span><br><span class="line">    <span class="type">Purchase</span>(product: <span class="string">"Scarf"</span>, price: <span class="number">20</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 带礼品包装和礼品配送服务的25元太阳眼镜</span></span><br><span class="line">account.addPurchase(</span><br><span class="line">  <span class="type">PurchaseWithDelivery</span>(purchase:</span><br><span class="line">    <span class="type">PurchaseWithGiftWrap</span>(purchase:</span><br><span class="line">      <span class="type">Purchase</span>(product: <span class="string">"Sunglasses"</span>, price:<span class="number">25</span>))))</span><br><span class="line"></span><br><span class="line">account.printAccount()</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Purchase Red Hat, Price ￥10.00</span><br><span class="line">Purchase Scarf, Price ￥20.00</span><br><span class="line">Purchase Scarf + delivery, Price ￥25.00</span><br><span class="line">Purchase Sunglasses + giftwrap + delivery, Price ￥32.00</span><br><span class="line">Total due: ￥87.00</span><br></pre></td></tr></table></figure><h3 id="增加新功能"><a href="#增加新功能" class="headerlink" title="增加新功能"></a>增加新功能</h3><p>如果我们还想要用装饰器为原对象增加新的方法或属性，例如节日打折，我们可以继续定义一个折扣装饰器 <code>DiscountDecorator</code>，并创建子类实现不同折扣。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 新增了折扣功能的装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiscountDecorator</span>: <span class="title">Purchase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.wrappedPurchase = purchase</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.description</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// 优惠了多少元</span></span><br><span class="line">  <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// 判断产品是否适用折扣优惠，计算已用折扣数</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">countDiscounts</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 注意这里对象本身就已经是一个折扣，wrappedPurchase 是折扣后跟着的purchase对象，还是折扣的话折扣数+1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> discounter = wrappedPurchase <span class="keyword">as</span>? <span class="type">DiscountDecorator</span> &#123;</span><br><span class="line">      total += discounter.countDiscounts()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 黑色星期五打8折</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackFridayDecorator</span>: <span class="title">DiscountDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice - discountAmount</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice * <span class="number">0.20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 清仓大甩卖打3折</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EndOfLineDecorator</span>: <span class="title">DiscountDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice - discountAmount</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice * <span class="number">0.70</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我们根据 <code>wrappedPurchase</code> 属性是否继承自折扣装饰器，来判断方法所包含的对象是否是有折扣的商品。例如下面代码中的 <code>EndOfLineDecorator(Purchase)</code> 方法所包含的对象： <code>BlackFirdayDecorator(purchase:      PurchaseWithDelivery(purchase:        PurchaseWithGiftWrap(purchase:          Purchase(product: &quot;Towel&quot;, price: 12))))</code> 有黑五折扣的礼品配送和礼品包装服务的12元太阳眼镜。</p><p>main.swift 中新增用了折扣的商品的代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... 忽略部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带礼品配送+礼品包装服务的12元太阳眼镜共19元，3折加8折后4.56元。</span></span><br><span class="line">account.addPurchase(</span><br><span class="line">  <span class="type">EndOfLineDecorator</span>(purchase:</span><br><span class="line">    <span class="type">BlackFridayDecorator</span>(purchase:</span><br><span class="line">      <span class="type">PurchaseWithDelivery</span>(purchase:</span><br><span class="line">        <span class="type">PurchaseWithGiftWrap</span>(purchase:</span><br><span class="line">          <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>))))))</span><br><span class="line"></span><br><span class="line">account.printAccount()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出每个商品的折扣数</span></span><br><span class="line"><span class="keyword">for</span> purchase <span class="keyword">in</span> account.purchases &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> discountPurchase = purchase <span class="keyword">as</span>? <span class="type">DiscountDecorator</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(discountPurchase)</span> has <span class="subst">\(discountPurchase.countDiscounts()</span>) discounts"</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(purchase)</span> has no discounts"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Purchase Red Hat, Price ￥10.00</span><br><span class="line">Purchase Scarf, Price ￥20.00</span><br><span class="line">Purchase Scarf + delivery, Price ￥25.00</span><br><span class="line">Purchase Sunglasses + giftwrap + delivery, Price ￥32.00</span><br><span class="line">Purchase Towel + giftwrap + delivery, Price ￥4.56</span><br><span class="line">Total due: ￥91.56</span><br><span class="line">Red Hat has no discounts</span><br><span class="line">Scarf has no discounts</span><br><span class="line">Scarf + delivery has no discounts</span><br><span class="line">Sunglasses + giftwrap + delivery has no discounts</span><br><span class="line">Towel + giftwrap + delivery has 2 discounts</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03d361786.png" alt="UML 图"></p><p>如果想要让折扣只作用在产品价格而不对礼品服务做影响，也是很简单的。</p><p>main.swift </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带礼品配送+礼品包装服务的12元太阳眼镜共19元，黑五8折只对产品价格有效，之后再打清仓3折后4.98元。</span></span><br><span class="line">account.addPurchase(</span><br><span class="line">  <span class="type">EndOfLineDecorator</span>(purchase:</span><br><span class="line">    <span class="type">PurchaseWithDelivery</span>(purchase:</span><br><span class="line">      <span class="type">PurchaseWithGiftWrap</span>(purchase:</span><br><span class="line">        <span class="type">BlackFridayDecorator</span>(purchase:</span><br><span class="line">          <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>))))))</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Purchase Towel + giftwrap + delivery, Price ￥4.98</span><br><span class="line">...</span><br><span class="line">Towel + giftwrap + delivery has 1 discounts</span><br></pre></td></tr></table></figure><p>计算折扣数的时候有点小问题，但是价格是对的。</p><p>用装饰器的时候需要谨慎，要评估对应用其他部分带来哪些影响，特别是已经使用了其他装饰器的情况下。</p><h3 id="合并装饰器"><a href="#合并装饰器" class="headerlink" title="合并装饰器"></a>合并装饰器</h3><p>装饰器可以为原始类新增新功能，也能合并装饰器。</p><p>注意：</p><ul><li>装饰器的作用应该是增强或者拓展原始类的功能，而不是给现有的 API 渗透功能。</li><li>小项目中直接用多个独立的装饰器类会比较简单，对于复杂的项目会不便于维护，所以将相关联的装饰器类合并会比较合适。</li></ul><p>Options.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 合并装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GiftOptionDecorator</span>: <span class="title">Purchase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> options: [<span class="type">Option</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Option</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> giftWrap</span><br><span class="line">    <span class="keyword">case</span> ribbon</span><br><span class="line">    <span class="keyword">case</span> delivery</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>, options: [<span class="type">Option</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span>.wrappedPurchase = purchase</span><br><span class="line">    <span class="keyword">self</span>.options = options</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = wrappedPurchase.description</span><br><span class="line">    <span class="keyword">for</span> option <span class="keyword">in</span> options &#123;</span><br><span class="line">      <span class="keyword">switch</span> option &#123;</span><br><span class="line">      <span class="keyword">case</span> .giftWrap:</span><br><span class="line">        result = <span class="string">"<span class="subst">\(result)</span> + giftwrap"</span></span><br><span class="line">      <span class="keyword">case</span> .ribbon:</span><br><span class="line">        result = <span class="string">"<span class="subst">\(result)</span> + ribbon"</span></span><br><span class="line">      <span class="keyword">case</span> .delivery:</span><br><span class="line">        result = <span class="string">"<span class="subst">\(result)</span> + delivery"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = wrappedPurchase.totalPrice</span><br><span class="line">    <span class="keyword">for</span> option <span class="keyword">in</span> options &#123;</span><br><span class="line">      <span class="keyword">switch</span> option &#123;</span><br><span class="line">      <span class="keyword">case</span> .giftWrap:</span><br><span class="line">        result += <span class="number">2</span></span><br><span class="line">      <span class="keyword">case</span> .ribbon:</span><br><span class="line">        result += <span class="number">1</span></span><br><span class="line">      <span class="keyword">case</span> .delivery:</span><br><span class="line">        result += <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用合并装饰器实现：带礼品配送+礼品包装服务的12元太阳眼镜共19元，3折加8折后4.56元。</span></span><br><span class="line">account.addPurchase(<span class="type">EndOfLineDecorator</span>(purchase:</span><br><span class="line">  <span class="type">BlackFridayDecorator</span>(purchase:</span><br><span class="line">    <span class="type">GiftOptionDecorator</span>(purchase:</span><br><span class="line">      <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>),</span><br><span class="line">                        options: [<span class="type">GiftOptionDecorator</span>.<span class="type">Option</span>.giftWrap,</span><br><span class="line">                                  <span class="type">GiftOptionDecorator</span>.<span class="type">Option</span>.delivery]))))</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Purchase Towel + giftwrap + delivery, Price ￥4.56</span><br><span class="line">...</span><br><span class="line">Towel + giftwrap + delivery has 2 discounts</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac06eae716c.png" alt="完整项目 UML 图"></p><p>结果一样，但是实现方式简洁了不少。</p><p>合并装饰器的优点是能把类的核心职责和装饰功能区分开，去除相关类重复的装饰逻辑。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整的项目放在 <a href="https://github.com/Latias94/Decorator_in_Swift/tree/master/Decorator_end" target="_blank" rel="noopener">Decorator_end</a>。</p><p>如果我们错误地实现了装饰器模式，那么装饰器所做的修改会对所有对象产生影响，或者另应用多出一些和对象无关的功能。</p><p>如<a href="http://frankorz.com/2017/02/20/decorator-in-swift/#增加新功能">增加新功能</a>小节中所提及的，实现装饰器模式后，要注意装饰顺序，否则不同的折扣就应用到不同的范围上了。</p><p>重申一遍，装饰器模式是在<strong>已有功能</strong>上加<strong>更多</strong>功能的一种方式，不能修改原始类的已有功能和属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/02/21/58ac04972e7f3.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;阅读《大话设计模式》和《精通 Swift 设计模式》中的装饰器模式，本文为笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="设计模式" scheme="http://frankorz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IRB 中操作 MongoDB</title>
    <link href="http://frankorz.com/2017/02/16/mongodb_operate_in_irb/"/>
    <id>http://frankorz.com/2017/02/16/mongodb_operate_in_irb/</id>
    <published>2017-02-16T09:50:50.000Z</published>
    <updated>2017-02-16T10:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>又在 Coursera 里面选了门课坑自己</p></blockquote><p>最近又学了很多东西，其中记不住的做笔记记下来，这篇文章是为 Ruby on Rails 运用 MongoDB 做准备。</p><a id="more"></a><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>Mac 下安装 MongoDB 可以参考 <a href="http://hcysun.me/2015/11/21/Mac下使用brew安装mongodb/" target="_blank" rel="noopener">Mac下使用brew安装mongodb</a>。</p><p>启动数据库</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% mongod</span><br></pre></td></tr></table></figure><p>进入命令行模式</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% mongo</span><br></pre></td></tr></table></figure><h3 id="导入-MongoDB-提供的示例数据"><a href="#导入-MongoDB-提供的示例数据" class="headerlink" title="导入 MongoDB 提供的示例数据"></a>导入 MongoDB 提供的示例数据</h3><center><a id="download" href="http://media.mongodb.org/zips.json" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> 示例数据下载</span></a></center><p>在 json 文件所在的文件夹下导入数据库。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% mongoimport --db <span class="built_in">test</span> --collection zips --drop --file zips.json</span><br></pre></td></tr></table></figure><h3 id="irb-Shell-中的一些基础操作"><a href="#irb-Shell-中的一些基础操作" class="headerlink" title="irb Shell 中的一些基础操作"></a>irb Shell 中的一些基础操作</h3><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">irb</span><br><span class="line"><span class="meta">2.3.3 :001 &gt;</span> require <span class="string">'mongo'</span></span><br><span class="line"> =&gt; true</span><br><span class="line"><span class="meta">2.3.3 :002 &gt;</span> db = Mongo::Client.new(<span class="string">'mongodb://localhost:27017'</span>)</span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">651134</span> <span class="comment">#39047] DEBUG -- : MONGODB | Topology type 'unknown' initializing.</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">651314</span> <span class="comment">#39047] DEBUG -- : MONGODB | Server localhost:27017 initializing.</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654477</span> <span class="comment">#39047] DEBUG -- : MONGODB | Topology type 'unknown' changed to type 'single'.</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654581</span> <span class="comment">#39047] DEBUG -- : MONGODB | Server description for localhost:27017 changed from 'unknown' to 'standalone'.</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654674</span> <span class="comment">#39047] DEBUG -- : MONGODB | There was a change in the members of the 'single' topology.</span></span><br><span class="line"> =&gt; #&lt;Mongo::Client:0x70333621287660 cluster=localhost:27017&gt;</span><br><span class="line"><span class="meta">2.3.3 :003 &gt;</span> db = db.use(<span class="string">'test'</span>)</span><br><span class="line"> =&gt; #&lt;Mongo::Client:0x70333622110940 cluster=localhost:27017&gt;</span><br><span class="line"><span class="meta">2.3.3 :004 &gt;</span> db.database.name</span><br><span class="line"> =&gt; <span class="string">"test"</span></span><br><span class="line"><span class="meta">2.3.3 :005 &gt;</span> db.database.collection_names</span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">11</span><span class="symbol">:</span><span class="number">07</span>.<span class="number">299786</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.listCollections | STARTED | &#123;"listCollections"=&gt;1, "cursor"=&gt;&#123;&#125;, "filter"=&gt;&#123;:name=&gt;&#123;"$not"=&gt;/system\.|\$/&#125;&#125;&#125;</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">11</span><span class="symbol">:</span><span class="number">07</span>.<span class="number">326259</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.listCollections | SUCCEEDED | 0.025663000000000002s</span></span><br><span class="line"> =&gt; [<span class="string">"zips"</span>]</span><br><span class="line"><span class="meta">2.3.3 :006 &gt;</span> db[<span class="symbol">:zips</span>].find.first</span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">12</span><span class="symbol">:</span><span class="number">51.044213</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.find | STARTED | &#123;"find"=&gt;"zips", "filter"=&gt;&#123;&#125;&#125;</span></span><br><span class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">12</span><span class="symbol">:</span><span class="number">51.059517</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.find | SUCCEEDED | 0.015213s</span></span><br><span class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br></pre></td></tr></table></figure><p>Win 系统下可以用 <code>system(&#39;cls&#39;)</code> 命令来清空 irb shell<br>Mac OS X 和 Linux 系统可以用 Ctrl + L 来清空屏幕</p><h3 id="精简输出"><a href="#精简输出" class="headerlink" title="精简输出"></a>精简输出</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2.3.3 :008 &gt; Mongo::Logger.logger.level = ::Logger::INFO</span><br><span class="line"> =&gt; 1</span><br><span class="line">2.3.3 :009 &gt; db[:zips].find.first</span><br><span class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-72.622739, 42.070206], <span class="string">"pop"</span>=&gt;15338, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-and-Read"><a href="#Create-and-Read" class="headerlink" title="Create and Read"></a>Create and Read</h2><p>介绍 CRUD 增查改删操作的前两步操作</p><h3 id="“C”reate"><a href="#“C”reate" class="headerlink" title="“C”reate"></a>“C”reate</h3><ul><li>Select a collection on the client and call <code>insert_one</code> or <code>insert_many</code></li><li><code>insert_one</code>: insert <strong>one</strong> document to collection</li><li><code>insert_many</code>: insert <strong>multiple</strong> documents to the collection</li></ul><h4 id="insert-one"><a href="#insert-one" class="headerlink" title="insert_one"></a>insert_one</h4><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"100"</span>,<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span>], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>,<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>)</span><br></pre></td></tr></table></figure><p>用 find 和 count 来搜索数据</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).count</span><br></pre></td></tr></table></figure><p>插入一项数据，并且测试该项数据的存在</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :010 &gt;</span> db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"100"</span>,<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span>], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>,<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>)</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70333617635280 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :011 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).count</span><br><span class="line"> =&gt; <span class="number">1</span></span><br><span class="line"><span class="meta">2.3.3 :012 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"100"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city01"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">76.059227</span>, <span class="number">39.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">4678</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="insert-many"><a href="#insert-many" class="headerlink" title="insert_many"></a>insert_many</h4><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db[<span class="symbol">:zips</span>].insert_many([</span><br><span class="line">&#123; <span class="symbol">:_id</span> =&gt; <span class="string">"200"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>,</span><br><span class="line">  <span class="symbol">:loc</span> =&gt; [ -<span class="number">74.05922700000001</span>, <span class="number">37.564894</span> ], </span><br><span class="line">  <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;,</span><br><span class="line">&#123; <span class="symbol">:_id</span> =&gt; <span class="string">"201"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city03"</span>, </span><br><span class="line">  <span class="symbol">:loc</span> =&gt; [ -<span class="number">75.05922700000001</span>, <span class="number">35.564894</span> ],</span><br><span class="line">  <span class="symbol">:pop</span> =&gt; <span class="number">3000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>同时插入多项数据</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :013 &gt;</span> db[<span class="symbol">:zips</span>].insert_many([</span><br><span class="line"><span class="meta">2.3.3 :014 &gt;</span>       &#123; <span class="symbol">:_id</span> =&gt; <span class="string">"200"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>,</span><br><span class="line"><span class="meta">2.3.3 :015 &gt;</span>           <span class="symbol">:loc</span> =&gt; [ -<span class="number">74.05922700000001</span>, <span class="number">37.564894</span> ],</span><br><span class="line"><span class="meta">2.3.3 :016 &gt;</span>           <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;,</span><br><span class="line"><span class="meta">2.3.3 :017 &gt;</span>       &#123; <span class="symbol">:_id</span> =&gt; <span class="string">"201"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city03"</span>,</span><br><span class="line"><span class="meta">2.3.3 :018 &gt;</span>           <span class="symbol">:loc</span> =&gt; [ -<span class="number">75.05922700000001</span>, <span class="number">35.564894</span> ],</span><br><span class="line"><span class="meta">2.3.3 :019 &gt;</span>           <span class="symbol">:pop</span> =&gt; <span class="number">3000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;</span><br><span class="line"><span class="meta">2.3.3 :020?&gt;</span>     ])</span><br><span class="line"> =&gt; #&lt;Mongo::BulkWrite::Result:0x007fefa58136d8 @results=&#123;"n_inserted"=&gt;<span class="number">2</span>, <span class="string">"n"</span>=&gt;<span class="number">2</span>, <span class="string">"inserted_ids"</span>=&gt;[<span class="string">"200"</span>, <span class="string">"201"</span>]&#125;&gt;</span><br><span class="line"><span class="meta">2.3.3 :021 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="string">"city"</span> =&gt; <span class="string">"city02"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"200"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city02"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">74.059227</span>, <span class="number">37.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"CA"</span>&#125;]</span><br><span class="line"><span class="meta">2.3.3 :022 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="string">"city"</span> =&gt; <span class="string">"city03"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"201"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city03"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">75.059227</span>, <span class="number">35.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">3000</span>, <span class="string">"state"</span>=&gt;<span class="string">"CA"</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="“R”ead"><a href="#“R”ead" class="headerlink" title="“R”ead"></a>“R”ead</h3><ul><li>find command</li><li>find – returns a <strong>cursor</strong> object – allows us to <strong>iterate</strong> over the selected document(s)</li><li>Can be used with <strong>query</strong> criteria</li></ul><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># basic find</span></span><br><span class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"BALTIMORE"</span>)</span><br><span class="line"><span class="comment"># find first</span></span><br><span class="line">db[<span class="symbol">:zips</span>].find.first</span><br><span class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>).first</span><br><span class="line"><span class="comment"># find with double conditions and count them</span></span><br><span class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"NY"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"GERMANTOWN"</span>).count</span><br><span class="line"><span class="comment"># find distinct</span></span><br><span class="line">db[<span class="symbol">:zips</span>].find.distinct(<span class="symbol">:state</span>)</span><br></pre></td></tr></table></figure><p>使用 pp (pretty-printing) 来美化命令行的输出，并且找到符合条件的第一项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :035 &gt;</span> require <span class="string">'pp'</span></span><br><span class="line"> =&gt; true</span><br><span class="line"><span class="meta">2.3.3 :036 &gt;</span> pp db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"NY"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"GERMANTOWN"</span>).first</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"12526"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"GERMANTOWN"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">73.862451</span>, <span class="number">42.1219</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4061</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"NY"</span>&#125;</span><br><span class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"12526"</span>, <span class="string">"city"</span>=&gt;<span class="string">"GERMANTOWN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">73.862451</span>, <span class="number">42.1219</span>], <span class="string">"pop"</span>=&gt;<span class="number">4061</span>, <span class="string">"state"</span>=&gt;<span class="string">"NY"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="Cursor-Iterations"><a href="#Cursor-Iterations" class="headerlink" title="Cursor Iterations"></a>Cursor Iterations</h4><p>print all</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db[<span class="symbol">:zips</span>].find().each &#123; <span class="params">|r|</span> puts r &#125;</span><br></pre></td></tr></table></figure><p>pretty printing</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'pp'</span></span><br><span class="line">db[<span class="symbol">:zips</span>].find().each &#123; <span class="params">|r|</span> pp r &#125;</span><br></pre></td></tr></table></figure><h4 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h4><ul><li><strong>Limits</strong> the fields to return from all matching documents</li><li>We can <strong>specify</strong> inclusion or exclusion.</li><li>_id is automatically included by default.</li><li>true or 1: inclusive</li><li>false or 0: exclusive</li></ul><p>限制返回项的输出，例如只输出 <code>state</code> 属性，<code>_id</code> 是默认输出的，我们也可以取消输出 <code>_id</code> 项。</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :040 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>&#125;).projection(<span class="symbol">state:</span>true).first</span><br><span class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"20331"</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;</span><br><span class="line"><span class="meta">2.3.3 :041 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>&#125;).projection(<span class="symbol">state:</span>true, <span class="symbol">_id:</span>false).first</span><br><span class="line"> =&gt; &#123;<span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><ul><li>Paging is accomplished with skip and limit</li><li><code>skip(n)</code> - tells mongodb that it should skip ‘n’ results</li><li><code>limit(n)</code> - instructs mongodb that it should limit the result length to ‘n’ results</li></ul><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>限制搜索只有三项输出</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :044 &gt;</span> db[<span class="symbol">:zips</span>].find.limit(<span class="number">3</span>).each&#123; <span class="params">|r|</span> pp r&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">15338</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01002"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">36963</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01005"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4546</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333637935980 @view=#&lt;Mongo::Collection::View:0x70333616708020 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"limit"=&gt;<span class="number">3</span>&#125;&gt;&gt;<span class="symbol">:each&gt;</span></span><br></pre></td></tr></table></figure><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p>跳过前三项，显示后三项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :045 &gt;</span> db[<span class="symbol">:zips</span>].find.skip(<span class="number">3</span>).limit(<span class="number">3</span>).each &#123; <span class="params">|r|</span> pp r&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01007"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BELCHERTOWN"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.410953</span>, <span class="number">42.275103</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">10579</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01008"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BLANDFORD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.936114</span>, <span class="number">42.182949</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">1240</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01010"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BRIMFIELD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.188455</span>, <span class="number">42.116543</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3706</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333639364960 @view=#&lt;Mongo::Collection::View:0x70333639398700 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"skip"=&gt;<span class="number">3</span>, <span class="string">"limit"</span>=&gt;<span class="number">3</span>&#125;&gt;&gt;<span class="symbol">:each&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><p>sort - Specifies the order in which the query returns matching documents.</p><p><code>{ field: value }</code></p><p>1 for Ascending, -1 for Descending.</p><p>搜索后以城市名升序输出，若改为<code>{:city =&gt; -1 }</code>则为逆序输出。</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :046 &gt;</span> db[<span class="symbol">:zips</span>].find.limit(<span class="number">3</span>).sort(&#123;<span class="symbol">:city</span> =&gt; <span class="number">1</span> &#125;).each &#123; <span class="params">|r|</span> pp r&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"42601"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AARON"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">85.199114</span>, <span class="number">36.812827</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">270</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"KY"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"16820"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AARONSBURG"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">77.387977</span>, <span class="number">40.876944</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">100</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"PA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"31794"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"ABAC"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">83.498867</span>, <span class="number">31.451722</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">27906</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"GA"</span>&#125;</span><br><span class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333639793460 @view=#&lt;Mongo::Collection::View:0x70333626982300 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"limit"=&gt;<span class="number">3</span>, <span class="string">"sort"</span>=&gt;&#123;<span class="string">"city"</span>=&gt;<span class="number">1</span>&#125;&#125;&gt;&gt;<span class="symbol">:each&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Advanced-Find"><a href="#Advanced-Find" class="headerlink" title="Advanced Find"></a>Advanced Find</h2><p>Find By Criteria</p><ul><li>‘lt’ &amp; ‘gt’</li><li>Evaluations</li><li>Regex</li><li>Exists</li><li>Not</li><li>Type</li></ul><h3 id="lt-and-gt"><a href="#lt-and-gt" class="headerlink" title="lt and gt"></a>lt and gt</h3><p>lt -&gt; less than<br>gt -&gt; great than</p><p>找到城市名比「P」小的，且比「B」大的三项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :049 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$lt =&gt; <span class="string">'P'</span>, <span class="symbol">:</span>$gt =&gt; <span class="string">'B'</span>&#125;).limit(<span class="number">3</span>).to_a.each &#123; <span class="params">|r|</span> pp r&#125;;nil</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01002"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">36963</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01005"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4546</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01007"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BELCHERTOWN"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.410953</span>, <span class="number">42.275103</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">10579</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure><p>小 Tips：<br>我们已经用 pp 来格式化输出了，可以在语句结尾加<code>;nil</code>来精简额外的输出，如上所示。</p><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>Regex – supports regular expression capabilities for pattern matching <strong>strings</strong> in queries.</p><p>用正则表达式匹配城市名含有 X 的项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :052 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$regex =&gt; <span class="string">'X'</span>&#125;).limit(<span class="number">3</span>).each &#123;<span class="params">|r|</span> pp r&#125;;nil</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01240"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"LENOX"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">73.271322</span>, <span class="number">42.364241</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">5001</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01537"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"NORTH OXFORD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">71.885953</span>, <span class="number">42.16549</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3031</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01540"</span>,</span><br><span class="line"> <span class="string">"city"</span>=&gt;<span class="string">"OXFORD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">71.868677</span>, <span class="number">42.11285</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">9557</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure><p><code>X&amp;</code> :Displays cities ending with X<br><code>^X</code> :Displays cities starting with X<br><code>^[A- E]</code> :Displays cities that match the regex (A to E)</p><h3 id="exist"><a href="#exist" class="headerlink" title="$exist"></a>$exist</h3><p>Will check to see of the document exists when the boolean is <strong>true</strong></p><p>mongo 中的 documents 可能会没有一些 values，我们可以用<code>$exist</code>来找出存在相关 values 的项。</p><p>找出 <code>:city</code> 属性不为空的三项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :053 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$exists =&gt; true&#125;).projection(&#123;<span class="symbol">:_id</span> =&gt; false&#125;).limit(<span class="number">3</span>).to_a.each &#123;<span class="params">|r|</span> pp r&#125;</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>], <span class="string">"pop"</span>=&gt;<span class="number">36963</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"> =&gt; [&#123;<span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;, &#123;<span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>], <span class="string">"pop"</span>=&gt;<span class="number">36963</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;, &#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h3><p><code>$not</code> performs a logical NOT operation<br>Selects the documents that do not match the <operator- expression></operator-></p><p>找到 :pop 属性不大于9500的项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :012 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:pop</span> =&gt;&#123;<span class="string">'$not'</span> =&gt; &#123;<span class="string">'$gt'</span> =&gt; <span class="number">9500</span>&#125;&#125;).projection(&#123;<span class="symbol">_id:</span>false&#125;).limit(<span class="number">3</span>).to_a.each &#123;<span class="params">|r|</span> pp r&#125;;nil</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BLANDFORD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.936114</span>, <span class="number">42.182949</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">1240</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BRIMFIELD"</span>,</span><br><span class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.188455</span>, <span class="number">42.116543</span>],</span><br><span class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3706</span>,</span><br><span class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h3><p><code>$type</code> - selects the documents where the value of the field is an instance of the specified numeric BSON type.</p><p>简而言之，<code>$type</code>的作用就是验证相关属性的类型。这在我们不知道数据类型的时候很好用，我们可以在 <a href="https://docs.mongodb.com/manual/reference/bson-types/" target="_blank" rel="noopener">BSON Types</a> 页面中查看各数字代表着什么，例如 1 代表 Double 类型，2 代表 String 类型。</p><p>在下面示例中，<code>:state</code> 属性应是 String 类型，所以 <code>:&amp;type =&gt; 2</code> 会有结果。<code>:&amp;type =&gt; 1</code>没有结果，是因为 <code>:state</code> 不是 Double 类型。</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :014 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state=&gt;</span> &#123;<span class="symbol">:</span>$type =&gt; <span class="number">2</span>&#125;&#125;).first</span><br><span class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</span><br><span class="line"><span class="meta">2.3.3 :015 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state=&gt;</span> &#123;<span class="symbol">:</span>$type =&gt; <span class="number">1</span>&#125;&#125;).first</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure><h2 id="Replace-Update-and-Delete"><a href="#Replace-Update-and-Delete" class="headerlink" title="Replace, Update and Delete"></a>Replace, Update and Delete</h2><p>介绍 Replace 和 CRUD 的后两项操作</p><ul><li>replace_one</li><li>update_one</li><li>update_many</li><li>delete_one</li><li>delete_many</li><li>upsert</li></ul><h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h3><h4 id="replace-one"><a href="#replace-one" class="headerlink" title="replace_one"></a>replace_one</h4><p>replace_one – <strong>Replace</strong> a document in the collection according to the <strong>specified parameters</strong>.</p><p>替换<code>:_id =&gt; &quot;101&quot;</code>项的所有信息</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :017 &gt;</span> db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"citytemp"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span> ], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>, <span class="symbol">:state</span> =&gt; <span class="string">"MD"</span> )</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374694180 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :018 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt;<span class="string">"101"</span>).replace_one(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">78.22</span>, <span class="number">36.22</span> ], <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"MD"</span> )</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70126384942080 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :019 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city02"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">78.22</span>, <span class="number">36.22</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="“U”pdate"><a href="#“U”pdate" class="headerlink" title="“U”pdate"></a>“U”pdate</h3><h4 id="update-one"><a href="#update-one" class="headerlink" title="update_one"></a>update_one</h4><p>update_one – <strong>Update</strong> a <strong>single</strong> document in the collection according to the <strong>specified arguments</strong>.</p><p>只更新单项中的属性，例如改城市名或同时更改多个属性</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :022 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).update_one(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"name2"</span>&#125;)</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374531300 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :023 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"name2"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">78.22</span>, <span class="number">36.22</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</span><br><span class="line"><span class="meta">2.3.3 :024 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).update_one(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"name3"</span>, <span class="symbol">:loc</span> =&gt; [ <span class="number">11.11</span>, <span class="number">11.11</span> ]&#125;)</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70126373842240 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :025 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"name3"</span>, <span class="string">"loc"</span>=&gt;[<span class="number">11.11</span>, <span class="number">11.11</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"XX"</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="update-many"><a href="#update-many" class="headerlink" title="update_many"></a>update_many</h4><p>update_many – <strong>Updates single or multiple</strong> documents in the collection according to the <strong>specified arguments</strong>.</p><p>更新多项属性，例如把所有州名为<code>MD</code>的项中的州名更改为<code>XX</code></p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :026 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).count</span><br><span class="line"> =&gt; <span class="number">422</span></span><br><span class="line"><span class="meta">2.3.3 :027 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).update_many(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span>&#125;)</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374300980 documents=[&#123;"n"=&gt;<span class="number">422</span>, <span class="string">"nModified"</span>=&gt;<span class="number">422</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :028 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br><span class="line"><span class="meta">2.3.3 :029 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span>).count</span><br><span class="line"> =&gt; <span class="number">422</span></span><br></pre></td></tr></table></figure><h3 id="“D”elete"><a href="#“D”elete" class="headerlink" title="“D”elete"></a>“D”elete</h3><h4 id="delete-one"><a href="#delete-one" class="headerlink" title="delete_one"></a>delete_one</h4><p>delete_one – will <strong>delete</strong> a <strong>single</strong> document in the collection according to the <strong>specified arguments</strong>.</p><p>删除之前添加的城市名为 <code>name3</code> 的项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :005 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).count</span><br><span class="line"> =&gt; <span class="number">1</span></span><br><span class="line"><span class="meta">2.3.3 :006 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).delete_one()</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70293222869840 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :007 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="delete-many"><a href="#delete-many" class="headerlink" title="delete_many"></a>delete_many</h4><p>delete_many – <strong>deletes single or multiple</strong> documents in the collection according to the <strong>specified arguments</strong>.</p><p>删除所有州名为<code>XX</code>的项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :009 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).count</span><br><span class="line"> =&gt; <span class="number">421</span></span><br><span class="line"><span class="meta">2.3.3 :010 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).delete_many()</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70293222986380 documents=[&#123;"n"=&gt;<span class="number">421</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :011 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h3><p>If upsert is <strong>true</strong> and <strong>no</strong> document matches the query criteria, update() inserts a <strong>single</strong> document.</p><p>如果把 upsert （更新插入）设为 true，即使没有找到相关的项（条件不满足），也会执行 <code>update_one</code>来创建一个项</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.3 :014 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE1"</span>).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br><span class="line"><span class="meta">2.3.3 :015 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br><span class="line"><span class="meta">2.3.3 :016 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt;<span class="string">"ODENVILLE1"</span>).update_one(&#123;<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>&#125;&#125;, <span class="symbol">:upsert</span> =&gt; true)</span><br><span class="line"> =&gt; #&lt;Mongo::Operation::Result:70293217700720 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">0</span>, <span class="string">"upserted"</span>=&gt;[&#123;<span class="string">"index"</span>=&gt;<span class="number">0</span>, <span class="string">"_id"</span>=&gt;BSON::ObjectId(<span class="string">'58a5746b62b11bdc607226a8'</span>)&#125;], <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</span><br><span class="line"><span class="meta">2.3.3 :017 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE1"</span>).count</span><br><span class="line"> =&gt; <span class="number">0</span></span><br><span class="line"><span class="meta">2.3.3 :018 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).count</span><br><span class="line"> =&gt; <span class="number">1</span></span><br><span class="line"><span class="meta">2.3.3 :019 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).to_a</span><br><span class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;BSON::ObjectId(<span class="string">'58a5746b62b11bdc607226a8'</span>), <span class="string">"city"</span>=&gt;<span class="string">"ODENVILLE2"</span>&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;又在 Coursera 里面选了门课坑自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近又学了很多东西，其中记不住的做笔记记下来，这篇文章是为 Ruby on Rails 运用 MongoDB 做准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://frankorz.com/tags/MongoDB/"/>
    
      <category term="Ruby" scheme="http://frankorz.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>iOS 动画笔记</title>
    <link href="http://frankorz.com/2017/01/22/ios-animations-note/"/>
    <id>http://frankorz.com/2017/01/22/ios-animations-note/</id>
    <published>2017-01-22T06:30:10.000Z</published>
    <updated>2017-02-23T09:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><em>大坑未填完，发布下博文降低罪恶感..</em></p><blockquote><p>人生的意义就是不断地挖坑，并不断地去填补。<br>——猫冬</p></blockquote><p>本文为《iOS Animations by Tutorials》笔记上篇，代码用 swift 3 编写。</p><a id="more"></a><h2 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h2><h3 id="简单的动画"><a href="#简单的动画" class="headerlink" title="简单的动画"></a>简单的动画</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> heading: <span class="type">UILabel</span>!</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">      <span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.3</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="comment">// 动画后位置 </span></span><br><span class="line">    <span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width</span><br><span class="line">  &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">  <span class="comment">// 动画前位置</span></span><br><span class="line">  heading.center.x -= view.bounds.width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的作用是把在屏幕左边的标题通过动画移动到相应位置。</p><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddb3f39.jpg" alt></p><p>这里使用了动画方法：<code>animate(withDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:)</code></p><ul><li>withDuration: 动画持续时间。</li><li>delay: 动画开始前的延迟时间，值为0时动画效果立刻显示。</li><li>options: 表现动画的一系列方式，如淡入淡出等，可以直接用[]表示无动画选项。</li><li>animations: 代码块中提供你的动画效果，注意代码块中无参数和返回值。</li><li>completion: 动画执行后要干什么。</li></ul><h3 id="位置和大小"><a href="#位置和大小" class="headerlink" title="位置和大小"></a>位置和大小</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc0e47.jpg" alt></p><p>我们可以通过改变一个 view 的位置和 frame 来实现放大、收缩或者移动效果。</p><ul><li><strong>frame</strong>: 该 view 在父view坐标系统中的位置和大小。</li><li><strong>bounds</strong>: 该 view 在本地坐标系统中的位置和大小。</li><li><strong>center</strong>: 想要移动 view 到一个新位置时改变该属性。</li></ul><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc1903.jpg" alt></p><p>关于frame 和 bounds 的更详细的区别可以参考<a href="http://blog.csdn.net/mad1989/article/details/8711697" target="_blank" rel="noopener">ios view的frame和bounds之区别（位置和大小）</a>。</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc6124.jpg" alt></p><p>我们可以通过改变背景色或透明度来改变 view 的外观。</p><ul><li><strong>backgroundColor</strong>: 改变背景颜色</li><li><strong>alpha</strong>: 改变该属性来创造淡入淡出效果</li></ul><h3 id="形变"><a href="#形变" class="headerlink" title="形变"></a>形变</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddbab3c.jpg" alt></p><ul><li><strong>transform</strong>: 在动画块中改变该属性可以去使 view 旋转、改变 view 大小或位置。</li></ul><h2 id="动画选项"><a href="#动画选项" class="headerlink" title="动画选项"></a>动画选项</h2><p>options 能让你知道 UIKit 是怎么创建我们的动画的，下面是一系列声明在 UIViewAnimationOptions 集中的动画选项，可以以不同形式来结合，并在我们的动画中使用。</p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><ul><li>.repeat: 这选项能让你的动画循环起来。</li><li>.autoreverse: 这选项只能和 <code>.repeat</code> 放在一起使用，作用是重复播放动画，然后逆向播放动画。</li></ul><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddb971c.gif" alt="repeat and .autoreverse"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.4</span>,</span><br><span class="line">               options: [.<span class="keyword">repeat</span>, .autoreverse], animations: &#123;</span><br><span class="line">  <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="动画缓动"><a href="#动画缓动" class="headerlink" title="动画缓动"></a>动画缓动</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde014a0.jpg" alt></p><p>就像火车出站的时候会加速，到站时会减速一样，我们也可以给动画加上缓入缓出效果。</p><ul><li>.curveLinear: 没有加速也没有减速。</li><li>.curveEaseIn: 在动画开始时加速。</li><li>.curveEaseOut: 在动画结束时减速。</li><li>.curveEaseInOut: 动画开始时加速，结束时减速。</li></ul><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7dfc4a.gif" alt=".curveEaseInOut"></p><h2 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h2><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde2ce7d.jpg" alt></p><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde788e9.jpg" alt></p><p>像弹簧一样，动画也能实现这种来回弹动，最终停止在 point B 的效果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line"> </span><br><span class="line">  loginButton.center.y += <span class="number">30.0</span></span><br><span class="line">  loginButton.alpha = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line"></span><br><span class="line">  <span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.5</span>, usingSpringWithDamping: <span class="number">0.5</span>, </span><br><span class="line">    initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123; </span><br><span class="line">    <span class="keyword">self</span>.loginButton.center.y -= <span class="number">30.0</span></span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha = <span class="number">1.0</span></span><br><span class="line">  &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe869a3a.gif" alt="spring"></p><p>这里用了新的动画方法：<code>animate(withDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:)</code></p><ul><li>usingSpringWithDamping: 控制阻尼系数，接受值在0.0和1.0之间，靠近0.0能创建一个有弹性的动画，靠近1.0能创建一个僵硬的效果。</li><li>initialSpringVelocity: 控制动画的速率，表示在一秒中动画所走的距离占总距离的比率。例如，动画中的距离为200 points，我们想达到100 pt/s的速度，则用0.5做值。数值越大移动越快。</li></ul><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>当你想通过动画来增加一个 view 或移除一个 view 的时候，你仍然可以使用前面提到的方法，这里将会告诉你如何使用过渡（transitions）来动画显示 view 中一系列的改变。</p><p>Transitions are predefined animations you can apply to views. These predefined animations don’t attempt to interpolate between the start and end states of your view. Instead, you’ll design the animations so that the various changes in state appear natural.</p><h3 id="增加一个-view"><a href="#增加一个-view" class="headerlink" title="增加一个 view"></a>增加一个 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fdf00ba2.jpg" alt></p><p>和前面一样，我们也是调用类似的方法，不同的是这次将会选择一个预先定义好的过渡效果并在 <strong>animation container view</strong> 中显示动画。</p><p>过渡通过 container view 来显示，在动画播放的时候其他新的 view 将会作为子view加入其中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animationContainerView: <span class="type">UIView</span>!</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123; </span><br><span class="line">  <span class="comment">//创建 animation container </span></span><br><span class="line">  animationContainerView = <span class="type">UIView</span>(frame: view.bounds)</span><br><span class="line">  animationContainerView.frame = view.bounds</span><br><span class="line">  view.addSubview(animationContainerView!)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123; </span><br><span class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建新的 view </span></span><br><span class="line">  <span class="keyword">let</span> newView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: <span class="string">"banner"</span>)!)</span><br><span class="line">  newView.center = animationContainerView.center</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过过渡把新的 view 加入其中</span></span><br><span class="line">  <span class="type">UIView</span>.transition(with: animationContainerView, duration: <span class="number">0.33</span>,</span><br><span class="line">                    options: [.curveEaseOut, .transitionFlipFromBottom],</span><br><span class="line">                    animations: &#123;</span><br><span class="line">                      <span class="keyword">self</span>.animationContainerView.addSubview(newView)</span><br><span class="line">  &#125;, completion: <span class="literal">nil</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码可以看到，过渡的方法比之前看过的方法多了一个参数「view」，就是指要把过渡效果加入其中的 container view。另外未见过的还有<code>.transitionFlipFromBottom</code>，这也是定义好的过渡选项，显示的是一个底部翻转的效果，下面还列出所有的过渡动画选项。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.transitionFlipFromLeft </span><br><span class="line">.transitionFlipFromRight </span><br><span class="line">.transitionCurlUp </span><br><span class="line">.transitionCurlDown </span><br><span class="line">.transitionCrossDissolve </span><br><span class="line">.transitionFlipFromTop </span><br><span class="line">.transitionFlipFromBottom</span><br></pre></td></tr></table></figure><h3 id="移除-view"><a href="#移除-view" class="headerlink" title="移除 view"></a>移除 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7e37f4.jpg" alt></p><p>代码和增加 view 类似，不过这次调用的是<code>removeFromSuperview()</code>方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.transition(with: animationContainerView, duration: <span class="number">0.33</span>,</span><br><span class="line">                  options: [.curveEaseOut, .transitionFlipFromBottom],</span><br><span class="line">                  animations: &#123;</span><br><span class="line">                    <span class="keyword">self</span>.newView.removeFromSuperview()</span><br><span class="line">&#125;, completion: <span class="literal">nil</span> )</span><br></pre></td></tr></table></figure><h3 id="隐藏-显示-view"><a href="#隐藏-显示-view" class="headerlink" title="隐藏/显示 view"></a>隐藏/显示 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7c75a2.jpg" alt></p><p>到目前，我们只知道过渡效果要区分 view 的层次，这也是为什么我们需要一个 container view 的原因。对于隐藏或显示一个 view 的时候，我们可以通过用要隐藏或显示的 view 来当做动画容器（animation container）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过过渡隐藏 newView，</span></span><br><span class="line"><span class="type">UIView</span>.transition(with: <span class="keyword">self</span>.newView, duration: <span class="number">0.33</span>,</span><br><span class="line">                  options: [.curveEaseOut, .transitionFlipFromBottom],</span><br><span class="line">                  animations: &#123;</span><br><span class="line">                    <span class="keyword">self</span>.newView.isHidden = <span class="literal">true</span></span><br><span class="line">&#125;, completion: <span class="literal">nil</span> )</span><br></pre></td></tr></table></figure><h3 id="用一个-view-来取代另一个-view"><a href="#用一个-view-来取代另一个-view" class="headerlink" title="用一个 view 来取代另一个 view"></a>用一个 view 来取代另一个 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7cf2bb.jpg" alt></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 oldView 变为 newView</span></span><br><span class="line"><span class="type">UIView</span>.transition(from: oldView, to: newView, duration: <span class="number">0.33</span>, </span><br><span class="line">  options: .transitionFlipFromTop, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h2 id="更酷的动画"><a href="#更酷的动画" class="headerlink" title="更酷的动画"></a>更酷的动画</h2><ol><li><strong>Crossfade animation:</strong> 淡入淡出动画，把一张图片与另一张图片混合的动画效果。</li><li><strong>Cube transition animation:</strong> 立方体过渡动画，创建伪 3D 的过渡效果。</li><li><strong>Fade and bounce transition:</strong> 淡入淡出和反弹过渡，与简单动画的结合有一些不同。</li></ol><h3 id="Crossfade-animation"><a href="#Crossfade-animation" class="headerlink" title="Crossfade animation"></a>Crossfade animation</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7e4ebb.jpg" alt></p><p>如果需要把一张图片直接变成另外一张图片，之前的淡入淡出就不太好用了，因为能看到中间的淡入淡出效果。</p><hr><p>楼主的坑已经不想填了，看到这的朋友可以参考：<br><a href="https://zsisme.gitbooks.io/ios-/content/" target="_blank" rel="noopener">iOS 核心动画高级技巧</a> ：<a href="http://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques" target="_blank" rel="noopener">iOS Core Animation: Advanced Techniques</a> 的译本，由 OC 编写 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;大坑未填完，发布下博文降低罪恶感..&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生的意义就是不断地挖坑，并不断地去填补。&lt;br&gt;——猫冬&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文为《iOS Animations by Tutorials》笔记上篇，代码用 swift 3 编写。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://frankorz.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="动画" scheme="http://frankorz.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="iOS" scheme="http://frankorz.com/tags/iOS/"/>
    
  </entry>
  
</feed>
