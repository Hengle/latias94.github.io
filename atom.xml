<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萤火之森</title>
  <subtitle>知识传承之地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankorz.com/"/>
  <updated>2017-08-05T07:08:33.533Z</updated>
  <id>http://frankorz.com/</id>
  
  <author>
    <name>猫冬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 效率软件推荐</title>
    <link href="http://frankorz.com/2017/08/05/recommandation-of-some-efficient-software/"/>
    <id>http://frankorz.com/2017/08/05/recommandation-of-some-efficient-software/</id>
    <published>2017-08-05T07:08:08.000Z</published>
    <updated>2017-08-05T07:08:33.533Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>用了几年苹果电脑之后，最近开始用回 Windows 系统，找到一些十分好用的效率向的工具，同时受 <a href="http://www.ituring.com.cn/article/469111" target="_blank" rel="external">效率必备，软件推荐</a> 启发，写篇文章推荐一下。</p>
<a id="more"></a>
<h2 id="ShareX"><a href="#ShareX" class="headerlink" title="ShareX"></a>ShareX</h2><p><a href="https://getsharex.com/" target="_blank" rel="external">ShareX</a> 是一款主打捕获屏幕、文件分享、和生产力的开源工具。下面是我用 ShareX 来录制软件界面的 GIF 动图，可以看看其丰富的功能。</p>
<p><img src="https://i.loli.net/2017/08/05/59855a1a27551.gif" alt=""></p>
<p>和 QQ 自带的截图功能和国人开发的 Snipaste 不同，ShareX 的截图不仅仅止于截图后进行批注。ShareX 除了支持和 Snipaste 相似的捕捉窗格（活动的窗口、窗口内的元素等）截图功能外，还支持各种后续的动作，形成一个动作链以节省时间。</p>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>例如截完图后可以打开编辑窗口编辑，同时保存图片到自定的目录和剪贴板等等，自己可以自定义其动作链。建议勾选复制到剪贴板，文后会完成一个利用快捷键完成截图上传的动作链（你也可以直接配置截图完进行上传，看个人习惯）。</p>
<p><img src="https://i.loli.net/2017/08/05/59855c41b3c13.png" alt=""></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p><img src="https://i.loli.net/2017/08/05/59855f6348f83.png" alt=""></p>
<p>ShareX 的上传分为图片上传、文字上传和 URL 短链分享。图片可以上传到不同的图床：Imgur、Google Photos、TinyPic 等等，同样的，文件也可以上传到不同的文件共享网站：Dropbox、OneDrive 等，不过软件内置的多是国外的服务。开放性十足的 ShareX 还允许开发者共享自定义上传插件，这些上传插件可以在 <a href="https://github.com/ShareX/CustomUploaders" target="_blank" rel="external">CustomUploaders</a> 里找到。</p>
<h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><p>由于不同上传的设置类似，这里只写图片上传的一些个人配置。</p>
<p>我自己使用的图床是开放了 API 的 <a href="https://sm.ms/" target="_blank" rel="external">SM.MS</a> 图床，这图床背后的大佬就是卖 t.tt 域名给罗永浩的那位，据他说自己的流量多的用不完就拿来做点公益项目….SM.MS 图床的上传插件可以在 <a href="https://github.com/ShareX/CustomUploaders/blob/master/sm.ms.sxcu" target="_blank" rel="external">这里</a> 下载，下载后双击即可导入。导入后可以在软件界面的 [上传至…] -&gt; [上传至…设置] -&gt; 左列表最底端的自定义上传者，在目标类型选上 Image uploader 再点更新就能完成上传插件的配置。</p>
<p><img src="https://ooo.0o0.ooo/2017/08/05/598562961f2ff.png" alt=""></p>
<p>接着在 [上传至…] 选项里勾选好对应的上传插件就完成配置了。</p>
<p><img src="https://ooo.0o0.ooo/2017/08/05/598563005b31f.png" alt=""></p>
<h4 id="上传后的动作"><a href="#上传后的动作" class="headerlink" title="上传后的动作"></a>上传后的动作</h4><p><img src="https://i.loli.net/2017/08/05/598563e94e64e.png" alt=""></p>
<p>与截图后的动作类似，上传后的动作也十分实用，这里我只选了 URL 复制到剪贴板。</p>
<h3 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h3><p>目前截图、上传这两动作都已经配置好，可以开始配置快捷键了。</p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><img src="https://i.loli.net/2017/08/05/5985658c61a01.png" alt=""></p>
<p>这里我增加了一个从剪贴板上传的快捷键，这样的话 [快捷键截图] -&gt; 截图保存到剪贴板 -&gt; [快捷键上传] -&gt; 剪贴板内的截图上传到相应图床 -&gt; 返回图片 URL 到剪贴板的动作链就完成了。这对于经常在电脑写东西的我来说很实用，在写这篇文章时也利用这软件节省了不少时间。</p>
<p>你可以在 <a href="https://getsharex.com/" target="_blank" rel="external">ShareX 官网</a> 进行下载，其文件托管在 github。</p>
<h2 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h2><p>macOS 系统内置了一个好用的功能，就是空格查看文件内容，现在 QuickLook 也为 Windows 提供类似的体验。</p>
<h3 id="空格查看-markdown-文件"><a href="#空格查看-markdown-文件" class="headerlink" title="空格查看 markdown 文件"></a>空格查看 markdown 文件</h3><p><img src="https://i.loli.net/2017/08/05/5985685e65c3e.png" alt=""></p>
<h3 id="空格查看代码文件"><a href="#空格查看代码文件" class="headerlink" title="空格查看代码文件"></a>空格查看代码文件</h3><p><img src="https://i.loli.net/2017/08/05/598568e01542e.png" alt=""></p>
<h3 id="空格查看压缩包"><a href="#空格查看压缩包" class="headerlink" title="空格查看压缩包"></a>空格查看压缩包</h3><p><img src="https://i.loli.net/2017/08/05/598569121426e.png" alt=""></p>
<p>你可以在 <a href="http://pooi.moe/QuickLook/" target="_blank" rel="external">QuickLook 官网</a> 下载安装包，QuickLook 也能在 <a href="https://www.microsoft.com/store/apps/9nv4bs3l1h4s?ocid=badge" target="_blank" rel="external">Windows 应用商店</a> 下载。</p>
<h2 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h2><p>受 macOS 平台上 Dash 代码 API 文档查询软件的启发，Zeal 是一款免费开源的支持 Windows 和 Linux 系统的代码 API 文档查询软件。</p>
<h3 id="丰富的文档"><a href="#丰富的文档" class="headerlink" title="丰富的文档"></a>丰富的文档</h3><p><img src="https://ooo.0o0.ooo/2017/08/05/59856b2f6673b.png" alt=""></p>
<h3 id="查询关键词"><a href="#查询关键词" class="headerlink" title="查询关键词"></a>查询关键词</h3><p><img src="https://i.loli.net/2017/08/05/59856a27b4431.png" alt=""></p>
<h3 id="与编辑器联动"><a href="#与编辑器联动" class="headerlink" title="与编辑器联动"></a>与编辑器联动</h3><p>开发者为 Atom、VSCode、Jetbrain 全家桶 IDE 等提供了相关的插件，例如 Atom 的 <a href="https://github.com/blakeembrey/atom-dash" target="_blank" rel="external">atom-dash</a>，VSCode 的 <a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash" target="_blank" rel="external">Dash</a>，Jetbrain 全家桶的 <a href="https://plugins.jetbrains.com/plugin/7351-dash" target="_blank" rel="external">Dash</a>。</p>
<p>有了这些插件，你可以做到在写 Python 代码的时候，调用快捷键查询 Zeal 中 Python 文档对应的 API。</p>
<p>你可以在 <a href="https://zealdocs.org/" target="_blank" rel="external">Zeal 官网</a> 获得 Zeal。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面提到的三款效率软件都是开源并能免费下载使用，现在越发钦佩开源者了~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了几年苹果电脑之后，最近开始用回 Windows 系统，找到一些十分好用的效率向的工具，同时受 &lt;a href=&quot;http://www.ituring.com.cn/article/469111&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;效率必备，软件推荐&lt;/a&gt; 启发，写篇文章推荐一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="http://frankorz.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>自己的阅读兴趣</title>
    <link href="http://frankorz.com/2017/08/04/my-reading-habit/"/>
    <id>http://frankorz.com/2017/08/04/my-reading-habit/</id>
    <published>2017-08-04T01:01:58.000Z</published>
    <updated>2017-08-04T01:09:37.712Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是为了响应图灵社区自己的兴趣爱好的撰文活动，搬来博客刷下活跃度。</p>
<p><img src="https://i.loli.net/2017/08/03/5982fcf675064.png" alt="番茄土豆"></p>
<a id="more"></a>
<p>才发现自己的完成番茄数就在不久前破千了！趁着活动还在，来社区写一篇文章总结下。</p>
<p>翻了翻番茄的记录，最早的番茄是在今年的2月10日凌晨完成的，直至今天共过了175天，这么算来一天才完成5.73个番茄，这远远达不到自己当初设定每天八个番茄的目标，但是这习惯也算是坚持下来了。自己当初使用 <a href="https://pomotodo.com/" target="_blank" rel="external">番茄土豆</a> 记录番茄的初衷，就是想从懒散的生活节奏中挤出一点时间，分给阅读、学习、写作和英语（除去上课的时间）。现在看统计图，阅读占了其中一大半的时间。</p>
<p><img src="https://ooo.0o0.ooo/2017/08/03/5982e59516955.png" alt="阅读时间"></p>
<p>自己阅读了将近248个小时，显然阅读已经成为了我的兴趣爱好。</p>
<p>自己看书看的题材很广泛、也很狭窄。广泛的是编程什么领域都会看一点，编程语言如 Swift、Golang、Python等，技术如算法、前端向的 Angular、后端向的 Rails on Ruby、Django、移动端的 iOS 等等，狭窄的就是很少去看计算机外的书。</p>
<p>现在看来，什么都想了解的兴趣能够让你翻开一本书，但是兴趣太广泛则不是什么好事情，自己现在还没有构建技术栈。好处也有，什么都略懂一点，这也是自己社区简介中 “全栈 Hello World 工程师” 的由来。如今这学期又要学网络和游戏开发（又要学习新领域…），苦也~</p>
<p>前段时间在简书读过一篇文章 <a href="http://www.jianshu.com/p/7525dabdd65a" target="_blank" rel="external">为什么我们不再购买技术类书籍</a>，我赞同其中“除读书外还有很多学习技术的途径”，但不认同其中的“技术书籍无用论”。当然，这些学习途径本身就不能拿来比较，因为 <strong>有价值的是这些载体其中承载的知识</strong>，不同类型的知识有不同的作用。对于一些 bug 的报错、紧跟技术潮流的资讯、小知识点等，我一向喜欢从别人的博客或者问题的回答中寻找答案。而对于一连串成体系的知识点，我更青睐去阅读相关的评价较高的技术书籍。系统地阅读，能够使我理解和构建好这门技术的体系结构，从而打好自己的基础，而这往往是作者在写书前就需要花心思构建好的大纲所体现出来的。</p>
<p>但是阅读技术书籍也容易使我走进一些误区。读完一本技术书的充实感容易使我“飘飘然”，误认为自己已经搞定了一本书，不去下手写代码，从而变成一个“花瓶”程序员。再者，书上的代码和经验往往是正确的，自己跟着作者的思路写代码，能很快地了解一门技术背后的逻辑和设计，却让读者丧失了思考、推理逻辑的过程。因此，我更喜欢去阅读书中带习题、倾向于引导读者思考的书籍，这样能时刻警醒自己，不要沉溺于莫名的“技术满足感”之中。</p>
<p>当我习惯了阅读之后，无论是学校上课，还是深入一些领域，我都更倾向于参考相关的好书。一方面，对于一个知识点，我喜欢把老师的描述和其他书中作者的描述相对比，以作查漏补缺。另一方面，上课前看其他书提前预习将要教授的知识点，能够使我跟着老师的思路去思考，而不会被生疏的名词、知识点打断了自己上课思考的过程。自己前天的游戏开发课就是使用 Unity3D 来教授，自己提前看了眼大纲，找了本书预习了 C# 和 Unity3D 开发的一些简单的概念和过程。后来的上机课顺利地把一周的作业以满分的标准完成（老师有给出作业的完成标准，按照完成程度打分），还能抽出时间问读书过程中和写代码过程中不懂的问题，而不是浪费时间在提问基础知识上。</p>
<p>晒晒六月份放假的时候写的一些日记，那时候在刷图灵书。</p>
<p><img src="https://i.loli.net/2017/08/03/5982f8ce4ee46.jpg" alt="日记"></p>
<p>以前图灵半价、京东亚马逊优惠买的书，我一定会回来翻阅你们的！</p>
<p>感谢图灵社区，提供这么多高质量的技术书籍翻译，一些书还拿到了电子版权出了电子版，真是海外党福音~最后希望大家能开卷有益！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是为了响应图灵社区自己的兴趣爱好的撰文活动，搬来博客刷下活跃度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/03/5982fcf675064.png&quot; alt=&quot;番茄土豆&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://frankorz.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《流畅的 Python》读书笔记</title>
    <link href="http://frankorz.com/2017/07/01/fluent-python-note/"/>
    <id>http://frankorz.com/2017/07/01/fluent-python-note/</id>
    <published>2017-06-30T23:06:19.000Z</published>
    <updated>2017-07-19T22:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h2><h3 id="学了-Python-基础就够了吗？"><a href="#学了-Python-基础就够了吗？" class="headerlink" title="学了 Python 基础就够了吗？"></a>学了 Python 基础就够了吗？</h3><p>前言的引言给出了答案：</p>
<blockquote>
<p>要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用 0.9.6 版的 Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼） 。<br>—— Tim Peters<br>传奇的核心开发者， “Python 之禅”作者</p>
</blockquote>
<a id="more"></a>
<h3 id="这本书的目的是什么？"><a href="#这本书的目的是什么？" class="headerlink" title="这本书的目的是什么？"></a>这本书的目的是什么？</h3><p>第十一章的杂谈里给出了答案：</p>
<blockquote>
<p>这正是本书的主要目的：着重讲解这门语言的基本惯用法，让你的代码简洁、高效且可读，把你打造成熟练的 Python 程序员。</p>
</blockquote>
<p>另外本书的<a href="http://www.ituring.com.cn/book/tupubarticle/13727" target="_blank" rel="external">前言</a>里也有提及书本的目标读者和非目标读者。</p>
<blockquote>
<p>如果你才刚刚开始学 Python，本书的内容可能会显得有些“超纲”。比难懂更糟的是，如果在学习 Python 的过程中过早接触本书的内容，你可能会误以为所有的 Python 代码都应该利用特殊方法和元编程（metaprogramming）技巧。我们知道，不成熟的抽象和过早的优化一样，都会坏事。</p>
</blockquote>
<h2 id="对内容的一些评价"><a href="#对内容的一些评价" class="headerlink" title="对内容的一些评价"></a>对内容的一些评价</h2><p>从书目录结构来看，作者的眼界十分开阔，每章最后有小结、延伸阅读、和相关的一些杂谈。书的前一部分从 Python 特性出发，参考了很多语言的相关做法和实现，来解释 Python 的设计。</p>
<p>书中时常引用一些参考资料，有些是邮件列表里的讨论、维基百科、一些十分优秀的程序员的撰写的文章和演讲视频。这意味着你可以在某一个概念看到不同的观点，看到优秀的程序员是怎么思考一个问题的。</p>
<p>作者从1998年成为了 Python 程序员，是巴西一家培训机构的共同所有者，也为巴西的媒体、银行和政府部门教授 Python 课程，由此可见本书的代码会是十分透彻和浅显易懂的，事实也的确如此。从代码示例来看，作者为大部分代码提供了 doctest 测试，并且在为某一个知识点提供代码示例时，追求的是简单、直接，同时示例的难度是循序渐进的。加上作者在大部分代码行提供了说明，让读者能十分流畅地理解概念。（对比：《Go 程序设计语言》讲复数语法时用 Mandelbrot 图像作为示例，苦笑）</p>
<h2 id="对翻译的一些评价"><a href="#对翻译的一些评价" class="headerlink" title="对翻译的一些评价"></a>对翻译的一些评价</h2><p>整体翻译还是不错的，几百页的书的勘误也才十多个，部分术语可能还要参考书里的术语翻译表，个人认为容易弄混的有特性（properties）和属性（attributes），还有函数（function）和方法（method）。后者的区别可以参考<a href="https://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" target="_blank" rel="external">Difference between a method and a function</a>，简单的说法就是函数（function）定义在类外面，而方法（method）定义在类里面，是类的一部分。两者也可以根据是否独立于对象来判断。</p>
<blockquote>
<p>黄志斌：这本书第2次印刷时已经把“期物”改为“future”了。  </p>
</blockquote>
<p>P21 前面那种方式显然能够节省内存。 前者指的是 genexp，即生成器表达式。</p>
<h2 id="章节简介"><a href="#章节简介" class="headerlink" title="章节简介"></a>章节简介</h2><p>这本书的结构十分优秀，每一章节都有前言和小结，因此章节简介我偏向于写些零散的知识点和个人感受，会比较乱。大部分章节的章节简介最后会有个人阅读时做的笔记，章节简介没提及的内容可以看看我的笔记。</p>
<p>全部的笔记还可以在这里找到：<a href="https://github.com/Latias94/fluent-python-notes" target="_blank" rel="external">Latias94/fluent-python-notes</a></p>
<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p>第一章作者就介绍了 Python 中的特殊方法，特殊方法也是贯穿这本书的基础。</p>
<p>读这本书之前，自己通常会遇到<code>__init__</code>、<code>__new__</code>、<code>__name__ == &#39;__main__&#39;</code>等等的带双下划线的特殊方法，但是通过零散的知识点很难形成体系，而这本书涵盖了绝大部分的特殊方法，并且分章节详细地讨论其背后特殊方法的作用，而这一章就是了解特殊方法的第一步。</p>
<p>作者提到了合理的字符串表示形式：<code>__repr__</code> 和 <code>__str__</code>。前者方便我们调试和记录日志，后者则是给终端用户看的。</p>
<p>作者开篇就提出了两个问题，第一个问题是：</p>
<blockquote>
<p>为什么说 Python 最好的品质之一是一致性？</p>
</blockquote>
<p>并且在第十二页给出了答案：</p>
<blockquote>
<p>不能让特例特殊到开始破坏既定规则。</p>
</blockquote>
<p>第二个问题是：</p>
<blockquote>
<p><code>len(collection)</code> 和 <code>collection.len()</code> 有什么不同？和“Python 风格” （Pythonic）有什么关系？</p>
</blockquote>
<p>核心开发者 Raymond Hettinger 的答案是：</p>
<blockquote>
<p>实用胜于纯粹<br>practicality beats purity<br>——《<a href="https://www.python.org/doc/humor/#the-zen-of-python" target="_blank" rel="external">The Zen of Python</a>》</p>
</blockquote>
<p>作者给出解释：</p>
<blockquote>
<p>len 是特殊方法，是为了让 Python 自带的数据结构可以走后门，abs 也是同理。（解释：因为如果 x 是一个内置类型的实例，<code>len(x)</code>的背后会用 CPython 直接从 C 结构体中读取对象的长度，不调用任何方法，以至于 <code>len(x)</code> 会非常快。）<br>…<br>这种处理方式在保持内置类型的效率和保证语言的一致性之间找到了一个平衡点，也印证了“Python 之禅”中的另外一句话：”不能让特例特殊到开始破坏既定规则。”</p>
</blockquote>
<p>从这两个问题就能看出作者想要强调的是：「<strong>Python 风格</strong> 无处不在」。为了更好地理解 Python 实现，最好了解 Python 的设计风格。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/z2mHiiCMKpYW5CpEC1voainyDyh7zqaA2jqnK6AU" target="_blank" rel="external">特殊方法</a></p>
<h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p>第二三四章主讲 Python 数据结构及其背后的实现，而第二章主要讲了可变类型与不可变类型的区别。</p>
<p>要想写出准确、高效和地道的 Python 代码，对标准库里的序列类型的掌握是不可或缺的。数据结构的产生就是为了满足各种不同的需求，例如能让用户在不复制内容的情况下操作同一个数组的不同切片的 memoryview，能高效处理矩阵、矢量等高级数值运算的 NumPy 和专为线性代数、数值积分和统计学而设计并基于 NumPy 的 SciPy。计算机科学家主要抽象了几大数据类型：字典、数组、列表等，这些数据类型都有不同的使用环境，使用好这些工具能让你事半功倍、节省不必要的消耗。</p>
<p>另外，在读这本书的前几天，我刚好在 Segmentfault 里面看到一个问题 <a href="https://segmentfault.com/q/1010000009754631" target="_blank" rel="external">python小白 问关于a+=a 和a=a+a的区别</a>，当时看完答案还有点似懂非懂的感觉，而读完这章我能完全理解其区别所在了。</p>
<p>扩展阅读：<a href="https://facert.gitbooks.io/python-data-structure-cn" target="_blank" rel="external">problem-solving-with-algorithms-and-data-structure-using-python 中文版</a></p>
<p>笔记传送门：<a href="https://my.mindnode.com/rabZb1p3GadkxZD7sWms2Wyzaz6mELZAKaGX9De2" target="_blank" rel="external">序列构成的数组</a></p>
<h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><p>前一章提到了列表、元组这两种序列，以及它们的生成器表达式。这一章则介绍了散列表的基本概念、其背后的算法和由散列表实现的数据类型：字典和集合。</p>
<ul>
<li>由于字典是由散列表实现的，因此字典的键必须是可散列的。</li>
<li>set 类型本身不是可散列的（因为 set 是可变的），但其元素必须可散列。（这也是为什么 list 不能作为字典键的原因）</li>
<li>frozenset 是可散列的。</li>
<li>散列表的实现导致它实现的数据类型效率很高，但这是以牺牲空间的代价所带来的。</li>
</ul>
<blockquote>
<p>“优化往往是可维护性的对立面”<br>由于字典使用了散列表，而散列表又必须是稀疏的，这导致它在空间上的效率低下。举例而言，如果你需要存放数量巨大的记录，那么放在由元组或是具名元组构成的列表中会是比较好的选择；最好不要根据 JSON 的风格，用由字典组成的列表来存放这些记录。用元组取代字典就能节省空间的原因有两个：其一是避免了散列表所耗费的空间，其二是无需把记录中字段的名字在每个元素里都存一遍。</p>
</blockquote>
<p>笔记传送门：<a href="https://my.mindnode.com/sy6m2gQJ5CdFBQz7cyCRq6YjKLzzkqQXofC8w26V" target="_blank" rel="external">字典和集合</a></p>
<h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><p>目前没遇到过编码问题，不看。</p>
<h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><p>第五章的主题是：高阶函数没这么重要了。</p>
<p>先来一段吐槽：</p>
<blockquote>
<p>Lundh 提出的 lambda 表达式重构秘笈如果使用 lambda 表达式导致一段代码难以理解，Fredrik Lundh 建议像下面这样重构。<br>(1) 编写注释，说明 lambda 表达式的作用。<br>(2) 研究一会儿注释，并找出一个名称来概括注释。<br>(3) 把 lambda 表达式转换成 def 语句，使用那个名称来定义函数。<br>(4) 删除注释。<br>摘自“Functional Programming HOWTO” </p>
</blockquote>
<p>现在函数式编程十分流行，但 Python 独特的语法使得 lambda、map、filter 和 reduce 这些函数没这么重要了，因为我们有 sum、all 等归约函数，还有 sorted、min、max 和 functools 这样的内置的高阶函数。</p>
<p>最后（5.10.2小节）讲了一个和函数柯里化（Currying）十分相像的概念——偏函数（Partial Application），这两者概念其实不一样。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/EpbDRnypkaZgmDb6cLwgPcenxExjWA75689ah91p" target="_blank" rel="external">一等函数</a></p>
<h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><p>作者从策略模式开始，讨论了一等函数在设计模式中的角色，并用一等函数简化了设计模式的实现方式，以此来展示 Pythonic 的设计模式应该是什么样子的。</p>
<p>扩展阅读：<a href="https://github.com/wklken/py-patterns" target="_blank" rel="external">设计模式的python实现</a></p>
<p>笔记传送门：<a href="https://my.mindnode.com/rwYjfffMs8Zi8cKSWyU1ybshb6mgXiiFp4MbDrj6" target="_blank" rel="external">使用一等函数实现设计模式</a></p>
<h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><p>第七章介绍了装饰器和闭包，作者给闭包下了一个清晰的定义：</p>
<blockquote>
<p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。</p>
</blockquote>
<p>作者用一个闭包实例和作用相同的类来比较，引出了自由变量（free variable）的概念，以此指出闭包与普通函数不一样的地方——闭包会保留定义函数时存在的自由变量的绑定。在此之后，再引出可变类型与不可变类型对自由变量的影响，从而引出可能导致闭包失效的原因（第二章的主题：可变类型与不可变类型的区别），同时给出了解决办法：nonlocal 声明。</p>
<p>本章结尾的杂谈提到了「一般来说，实现“装饰器”模式时最好使用类表示装饰器和要包装的组件。」，也就是通过实现 <code>__call__</code> 方法的类来实现装饰器。遗憾的是本书只通过函数来解说装饰器以助于理解，类装饰器没有提及多少。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/bZa9sX9dA7qcbsGbVqnU6c3ryky8g2QDWfiHqqhm" target="_blank" rel="external">函数装饰器和闭包</a></p>
<h3 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h3><blockquote>
<p>不可变集合不变的是所含对象的标识。</p>
</blockquote>
<p>第八章中，作者从「元组是不可变的，但是其中的值可以改变」引申到浅复制和深复制的区别。</p>
<p><img src="https://ooo.0o0.ooo/2017/06/30/5956006435780.jpg" alt=""></p>
<p>浅复制带来的影响可以参考 <a href="http://www.pythontutor.com/visualize.html#code=l1%20%3D%20%5B3,%20%5B66,%2055,%2044%5D,%20%287,%208,%209%29%5D%0Al2%20%3D%20list%28l1%29%20%0Al1.append%28100%29%0Al1%5B1%5D.remove%2855%29%0Aprint%28&#39;l1%3A&#39;,%20l1%29%0Aprint%28&#39;l2%3A&#39;,%20l2%29%0Al2%5B1%5D%20%2B%3D%20%5B33,%2022%5D%0Al2%5B2%5D%20%2B%3D%20%2810,%2011%29%20%0Aprint%28&#39;l1%3A&#39;,%20l1%29%0Aprint%28&#39;l2%3A&#39;,%20l2%29&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" rel="external">example</a>（点 foward 显示下一步）</p>
<p>作者还提到了两个容易忽略的函数参数引用问题：</p>
<ol>
<li>不要使用可变类型作为参数的默认值</li>
<li>防御可变参数</li>
</ol>
<p>最后一节讨论垃圾回收、del 命令，以及如何使用弱引用“记住”对象，而无需对象本身存在。</p>
<p>另外这章有意思的地方在于作者提到了一个常见的说法错误：「对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟对象在赋值之前就创建了。」</p>
<p>笔记传送门：<a href="https://my.mindnode.com/6ZayEUVKgEVAApAPc6aDmjByaB3Qq4hUPQSWBdK2" target="_blank" rel="external">对象引用、可变性和垃圾回收</a></p>
<h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><blockquote>
<p>要构建符合 Python 风格的对象，就要观察真正的 Python 对象的行为。<br>——古老的中国谚语</p>
</blockquote>
<p>第九章主要讲如何编写 Pythonic 的对象。作者从构建一个 Vector 类型来介绍符合 Python 风格的类需要注意的地方，例如<code>__repr__</code>不要硬编码类名、类属性的私有化、格式规范微语言、散列化要注意的条件等。</p>
<p>作者还讲了构建一个可散列的类型所需要实现的条件：</p>
<ol>
<li>正确的实现<code>__hash__</code>和<code>__eq__</code>方法</li>
<li>不一定要实现只读属性，但是要保证实例的散列值绝不能变化。</li>
</ol>
<p>类属性用于为实例属性提供默认值。Django 的类视图也大量用到了这个特性。</p>
<p>个人十分喜欢名称改写（属性的私有化）中的一张示意图：<br>「避免意外访问，但不能防止故意做错事。」，以此来提醒名称改写所实现的私有化自身的缺陷。</p>
<p><img src="https://ooo.0o0.ooo/2017/06/30/5956006706191.jpg" alt=""></p>
<p>笔记传送门：<a href="https://my.mindnode.com/sJg5G9wfSRP4Le67FDqErjYGGqxhEPNYpMCnpj1Q" target="_blank" rel="external">符合 Python 风格的对象</a></p>
<h3 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h3><blockquote>
<p>不要检查它是不是鸭子、它的叫声像不像鸭子、它的走路姿势像不像鸭子，等等。具体检查什么取决于你想使用语言的哪些行为。 （comp.lang.python，2000 年 7 月 26 日）<br>——Alex Martelli</p>
</blockquote>
<p>其中介绍了鸭子类型，指忽略对象的真正类型，转而关注对象有没有实现所需的方法、签名和语义。在 Python 中指免使用 isinstance 检查对象的类型。</p>
<p>如果我想实现一个序列，可以实现<code>__init__</code>、<code>__len__</code>、<code>__getitem__</code>等一序列的方法，使其行为像序列，那么这就是一个序列，这也就是人们所称的鸭子类型（duck typing）。</p>
<p>自己的理解：要明白自己希望的鸭子有哪些特性，只要我实现出来了，那么这就是鸭子。</p>
<p>Tips:</p>
<ul>
<li>可以用 <code>dir(slice)</code> 来查看序列的属性</li>
<li>当 Python 库文档查询不到方法的文档的时候，可以尝试用 <code>help(slice.indices)</code> 来查询。（ 直接查询<code>__doc__</code>属性的信息 ）</li>
</ul>
<p>第四小节讲可切片的序列需要关注的两个问题：</p>
<ol>
<li><p>如果创建的序列内部由数组（或其他序列）实现，那么就要考虑切片对象的实现：切片返回的是自创建的序列对象 还是数组（或其他序列）？如果需要考虑，就是在 <code>__getitem__</code> 方法里修改其实现方式。</p>
</li>
<li><p>动态存取属性，使序列能通过名称访问序列的属性（v.x,v.y代替v[0],v[1]）。也提到了实现 <code>__getitem__</code> 时可能会产生的问题，和解决方法。</p>
</li>
</ol>
<p>章节末尾的杂谈提到了要遵循 KISS 原则（Keep it simple, stupid），不要过度设计协议。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/EMWUZqqSPmCA2JtZZhgWaCi7ugQfiLyiLrsy1Tqb" target="_blank" rel="external">序列的修改、散列和切片</a></p>
<h3 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h3><blockquote>
<p>本章讨论的话题是接口：从鸭子类型的代表特征动态协议，到使接口更明确、能验证实现是否符合规定的抽象基类（Abstract Base Class，ABC）</p>
</blockquote>
<p>我们可能不需要写抽象基类，但是阅读本章能够教我们怎么阅读标准库和其他包中的抽象基类源码。</p>
<p>其中，作者引用了 Alex Martelli 的一篇文章，用表型系统学(phenetics)和支序系统学（cladistics）用水禽来类比抽象基类。(⊙﹏⊙)b</p>
<p>其中有第十章提到的「鸭子类型」，还有以前没提过的、描述一种新的 Python 编程风格的「白鹅类型」（goose typing）。</p>
<blockquote>
<p>白鹅类型指，只要 cls 是抽象基类，即 cls 的元类是 <code>abc.ABCMeta</code>，就可以使用 <code>isinstance(obj, cls)</code>。</p>
</blockquote>
<p>对此，作者在章节小结里面提到：</p>
<blockquote>
<p>借助「白鹅类型」，可以使用抽象基类明确声明接口，而且类可以子类化抽象基类或使用抽象基类注册（无需在继承关系中确立静态的强链接），宣称它实现了某个接口。  </p>
</blockquote>
<p>本章最后还介绍了和 Go 语言协议的功能十分类似的 <code>__subclasshook__</code> 方法。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/SiejkpsT7xLeNL7wCH2Mrp5SaMN7Ex2EyJ5VivGL" target="_blank" rel="external">接口：从协议到抽象基类</a></p>
<h3 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h3><p>分析 GUI 工具包 Tkhinter 的多重继承，并且展开分析了多次继承所带来的「菱形问题」，以及 Python 对应的解决方案——方法解析顺序（Method Resolution Order，MRO)，最后作者给了八条关于处理多重继承的建议。</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html#multiple-inheritance" target="_blank" rel="external">9.5.1. Multiple Inheritance</a> 里面提到了继承顺序是深度优先从左至右不重复。</p>
<blockquote>
<p>For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as <strong>depth-first, left-to-right, not searching twice in the same class</strong> where there is an overlap in the hierarchy. </p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/06/30/595600652d904.jpg" alt=""></p>
<p>笔记传送门：<a href="https://my.mindnode.com/qn4fVVx826kDNss71p4f3d6P2rxHsFwo5h7pQb1q" target="_blank" rel="external">继承的优缺点</a></p>
<h3 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h3><p>第十三章介绍了重载运算符的时候要考虑多重情况。</p>
<blockquote>
<p>In the face of ambiguity, refuse the temptation to guess.<br>面对太多的可能，不要尝试猜测。（ZoomQuiet禅译）<br>——《<a href="https://www.python.org/doc/humor/#the-zen-of-python" target="_blank" rel="external">The Zen of Python</a>》</p>
</blockquote>
<p>我们要严谨地对待可能会出现的操作数。</p>
<p>对于为什么需要重载运算符，在杂谈中作者提到了对于一部分人来说，重载运算符是十分重要的，<strong>符合人类直觉的表示法</strong>十分重要，例如金融工作会接触到一些由不同类型的参数（整数、或其他精度的数字）组成的公式。相比于不支持运算符重载的 Go 与 Java 语言，Python 采取了折中的方式，允许重载运算符，也有一些限制，如：不能重载内置类型的运算符、不能新建运算符、一些运算符也不能重载（is、and、or、not）。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/keGv1PsLvmtApbmt6bzFjhjtwwgziGGUqyx9vN8y" target="_blank" rel="external">正确重载运算符</a></p>
<h3 id="第十四章"><a href="#第十四章" class="headerlink" title="第十四章"></a>第十四章</h3><p>作者分别介绍了迭代器、生成器表达式和生成器函数，并详细地列举了每个标准库生成器函数的用法。</p>
<p>前面介绍过 Python 内置的数据类型，如列表和元组，能让我们高效地访问数据集，但这些序列只能表示已知且<strong>长度有限</strong>的数据集。要表示无限长度的数据集，例如斐波拉契数列，就需要用到新的构造方式，这也是本章的话题的由来。</p>
<blockquote>
<p>扫描内存中放不下的数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项。这就是迭代器模式（Iterator pattern） 。</p>
</blockquote>
<p>其中作者依然很注意用词，生成器是 “yields or produces” 生成值，而不是 “returns” 返回值，这样有助于理解生成器获取结果的过程，因为生成器不是以「常规」方式返回值的。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/rbWsvgTKPcs7v9TmzxrzryuYPs631RCrXW4USZqR" target="_blank" rel="external">可迭代的对象、迭代器和生成器</a></p>
<h3 id="第十五章"><a href="#第十五章" class="headerlink" title="第十五章"></a>第十五章</h3><p>介绍了 else 的三种用法与上下文管理器和 with 的作用，作者用<code>__enter__</code>、<code>__exit__</code>等方法手动地实现了一个上下文管理器，还介绍了 <code>@contextmanager</code> 作为另外一种更优雅的实现上下文管理器的方法。其中 <code>@contextmanager</code> 的 <code>yield</code> 语句也引出了第十六章中协程的概念。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/eTfDEjFxWMpScyZYGfzZYGaGpooKF2LJGFvbdbRF" target="_blank" rel="external">上下文管理器和else块</a></p>
<h3 id="第十六章"><a href="#第十六章" class="headerlink" title="第十六章"></a>第十六章</h3><p>建议看第十六、十七、十八章之前先理解五个概念：线程、进程、协程、并发和并行。</p>
<p>自己参考了：</p>
<ul>
<li><p><a href="http://www.jianshu.com/p/f11724034d50" target="_blank" rel="external">进程，线程，协程与并行，并发- 简书</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/20511233" target="_blank" rel="external">协程的好处是什么？- 知乎</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/02b7a279c588" target="_blank" rel="external">Python进程、线程、回调与协程 总结笔记</a></p>
</li>
</ul>
<p>在本章中，作者介绍了如何构建协程，和协程的一些使用场景，章节末尾，作者举了一个离散事件仿真示例，说明如何使用生成器代替线程和回调，实现并发。</p>
<p>在前些章节的基础上，作者在这章提到 yield 可以看做是控制流程的方式，即 yield 能获取值（<code>.send(foo)</code>），也能产出值（<code>foo = yield</code>），还能不获取和产出值（yield 后没有表达式）。因此，我们能用它来构建协程。</p>
<blockquote>
<p>不管数据如何流动，yield 都是一种流程控制工具，使用它可以实现协作式多任务：协程可以把控制器让步给中心调度程序，从而激活其他的协程。</p>
</blockquote>
<p>除了调用 <code>.send(...)</code> 方法发送数据，本章还介绍使用 <code>yield from</code> 结构驱动的生成器函数。</p>
<p>扩展阅读：</p>
<ul>
<li><p><a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/" target="_blank" rel="external">SICP in Python</a> 有一段关于并行计算的非常精彩的解释：<a href="https://wizardforcel.gitbooks.io/sicp-py/content/ch4.html#43-并行计算" target="_blank" rel="external">4.3 并行计算</a></p>
</li>
<li><p><a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/" target="_blank" rel="external">SICP in Python</a> 中协程的一节里着重讲了将复杂程序解构为小型、模块化组件的技巧：<a href="https://wizardforcel.gitbooks.io/sicp-py/content/ch5.html#53-协程" target="_blank" rel="external">5.3 协程</a></p>
</li>
</ul>
<p>笔记传送门：<a href="https://my.mindnode.com/4qpfqK3UY5ZdNVyEje4sXnFJ9PoXTFpNJVsn2pZx" target="_blank" rel="external">协程</a></p>
<h3 id="第十七章"><a href="#第十七章" class="headerlink" title="第十七章"></a>第十七章</h3><blockquote>
<p>并发是计算机科学中最难的概念之一（通常最好别去招惹它） 。<br>——David Beazley Python 教练和科学狂人</p>
</blockquote>
<p>在第十七章，作者用一个下载国旗图片的例子来介绍网络下载的三种风格：依序下载、<code>concurrent.futures</code> 模块（<code>ThreadPoolExecutor</code> 和 <code>ProcessPoolExecutor</code> 类）实现的并发下载和 asyncio 包实现的并发下载。作者还介绍了阻塞性 I/O 和 GIL，最后介绍了如何借助 <code>concurrent.futures.ProcessPoolExecutor</code> 类使用多进程。 </p>
<p>future 指一种对象，表示异步执行的操作。</p>
<p>早期的计算机从单用户操作系统（同一时间只能运行一个任务）转变成多任务操作系统（同一时间可以运行多个任务），又由于多任务操作系统中程序经常抢夺系统资源而引发死锁这种缺陷，在 20 世纪 60 年代，计算机科学家就开始探索并发编程的道路，并发指交替执行多个任务，解决的就是前面提到的多任务操作系统的缺陷。直到现在，很多编程语言都为并发提供了支持，其中包括原生支持并发的 Go 语言，和有相关模块支持的 Python。</p>
<blockquote>
<p>并发（concurrency）不是并行（parallelism）。并行是让不同的代码片段同时在不同的物理处理器上执行。并行的关键是同时做很多事情，而并发是指同时管理很多事情，这些事情可能只做了一半就被暂停去做别的事情了。在很多情况下，并发的效果比并行好，因为操作系统和硬件的总资源一般很少，但能支持系统同时做很多事情。<br>——《Go 语言实战》</p>
</blockquote>
<p>笔记传送门：<a href="https://my.mindnode.com/A6WWkGQgdYx9LtzvnziszgHXwKcxidy2cKKbww8r" target="_blank" rel="external">使用future处理并发</a></p>
<h3 id="第十八章"><a href="#第十八章" class="headerlink" title="第十八章"></a>第十八章</h3><blockquote>
<p>并发是指一次处理多件事。<br>并行是指一次做多件事。<br>二者不同，但是有联系。<br>一个关于结构，一个关于执行。<br>并发用于制定方案，用来解决可能（但未必）并行的问题。<br>——Rob Pike Go 语言的创造者之一</p>
</blockquote>
<p>第十八章中，作者主要介绍了新的并发编程方式，对比了 <code>asyncio.Task</code> （协程）对象与 <code>threading.Thread</code> （线程）对象的区别，包括 Python 包使用方式的区别和中断时协程与线程的区别：锁的保留。章节尾，作者介绍了 asyncio 包的使用和并发编程需要注意的地方。</p>
<p>笔记待补</p>
<h3 id="第十九章"><a href="#第十九章" class="headerlink" title="第十九章"></a>第十九章</h3><p>第十九章主要介绍了动态属性编程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo = Foo()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo.a = <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.b = property(<span class="keyword">lambda</span> self: self.a + <span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo.b</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<p>这就叫做动态属性（dynamic attribute），不同于属于静态语言的 Java 需要依靠 setter 和 getter 方法，Python 能十分方便地设置属性和读取属性。</p>
<p>作者拿 FrozenJSON 类做例子：把嵌套的字典和列表转换成嵌套的 FrozenJSON 实例和实例列表。FrozenJSON 类的代码展示了如何使用特殊的 <code>__getattr__</code> 方法（处理属性的函数）在读取属性时即时转换数据结构。</p>
<p>作者还介绍了很多处理属性的属性和函数以及利用特性(@properties)来修改设置属性和读取属性的方式。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/ByXkheqCf71cuELJZyYHHwt47HiaeoVqrSY3nxZB" target="_blank" rel="external">动态属性和特性</a></p>
<h3 id="第二十章"><a href="#第二十章" class="headerlink" title="第二十章"></a>第二十章</h3><p>有时候看书看着就忘了一些名词是什么了，因此参考了下<a href="https://harveyqing.gitbooks.io/python-read-and-write/content/python_advance/python_descriptor.html" target="_blank" rel="external">【译】Python描述符指南</a>，描述符类就是实现描述符协议的类。</p>
<p>相比于第十九章中利用特性（@properties）来修改属性的存取逻辑，第二十章主要介绍了描述符——对多个属性运用相同存取逻辑的一种方式。两者的区别是特性有时更合适和简单，而描述符更灵活。这章还介绍了覆盖型与非覆盖型描述符的对比，最后也给出了使用描述符的建议和优缺点。</p>
<p>笔记传送门：<a href="https://my.mindnode.com/GVWcPSN148gphwzVNEok3gGhFNCVWyPkVjmFe2yY" target="_blank" rel="external">属性描述符</a></p>
<h3 id="第二十一章"><a href="#第二十一章" class="headerlink" title="第二十一章"></a>第二十一章</h3><blockquote>
<p>（元类）是深奥的知识，99% 的用户都无需关注。如果你想知道是否需要使用元类，我告诉你，不需要（真正需要使用元类的人确信他们需要，无需解释原因） 。<br>——Tim Peters<br>Timsort 算法的发明者，活跃的 Python 贡献者</p>
</blockquote>
<p>上面是第二十一章的引言，我听从这位传奇开发者的建议，没有看。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整本书都在强调如何最大限度地利用 Python 标准库以及讲述 Python 背后的设计思想。身处众多动态编程语言中间，Python 无疑是独行独立的，这也是为什么很多 Python 开发者骄傲地宣称自己是一名 Pythonista。</p>
<p>自己只是不求甚解地通读了一遍书，学到了很多，但书中仍有太多不熟悉的知识点。因为假期不多了，只能等日后二刷这本书。过一遍这本书最大的收获莫过于在面对问题的时候，自己的工具箱又多了不少工具，即使这工具还不太「趁手」。其中感受最深的就是现在看一些 Segmentfault 或 StackOverflow 问题的答案的时候不再那么毫无头绪，并开始试着从前辈们的角度思考问题。另外书中多次提到 Django 的一些实现方式，对自己日后读源码的时候有帮助。</p>
<blockquote>
<p>仓促本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心它，而想去做别的事。<br>——罗伯特 · M · 波西格 《禅与摩托车维修艺术》</p>
</blockquote>
<p>自己的确因为阅读计划的期限而读的仓促了一些，这句话放到文尾，提醒自己在读下一本书的时候，尽量做到静下心来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两个问题&quot;&gt;&lt;a href=&quot;#两个问题&quot; class=&quot;headerlink&quot; title=&quot;两个问题&quot;&gt;&lt;/a&gt;两个问题&lt;/h2&gt;&lt;h3 id=&quot;学了-Python-基础就够了吗？&quot;&gt;&lt;a href=&quot;#学了-Python-基础就够了吗？&quot; class=&quot;headerlink&quot; title=&quot;学了 Python 基础就够了吗？&quot;&gt;&lt;/a&gt;学了 Python 基础就够了吗？&lt;/h3&gt;&lt;p&gt;前言的引言给出了答案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用 0.9.6 版的 Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼） 。&lt;br&gt;—— Tim Peters&lt;br&gt;传奇的核心开发者， “Python 之禅”作者&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://frankorz.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://frankorz.com/tags/Python/"/>
    
      <category term="读后感" scheme="http://frankorz.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言的网络编程简介</title>
    <link href="http://frankorz.com/2017/04/29/go-from-tcp-to-http/"/>
    <id>http://frankorz.com/2017/04/29/go-from-tcp-to-http/</id>
    <published>2017-04-29T05:48:53.000Z</published>
    <updated>2017-04-30T01:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文通过 Go 语言写几个简单的通信示例，从 TCP 服务器过渡到 HTTP 开发，从而简单介绍 net 包的运用。</p>
<a id="more"></a>
<h2 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h2><p>首先来看一个 TCP 服务器例子</p>
<figure class="highlight go"><figcaption><span>tcp-write/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// net 包提供方便的工具用于 network I/O 开发，包括TCP/IP, UDP 协议等。</span></div><div class="line">	<span class="comment">// Listen 函数会监听来自 8080 端口的连接，返回一个 net.Listener 对象。</span></div><div class="line">	li, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</div><div class="line">	<span class="comment">// 错误处理</span></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Panic(err)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 释放连接，通过 defer 关键字可以让连接在函数结束前进行释放</span></div><div class="line">	<span class="comment">// 这样可以不关心释放资源的语句位置，增加代码可读性</span></div><div class="line">	<span class="keyword">defer</span> li.Close()</div><div class="line"></div><div class="line">	<span class="comment">// 不断循环，不断接收来自客户端的请求</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="comment">// Accept 函数会阻塞程序，直到接收到来自端口的连接</span></div><div class="line">		<span class="comment">// 每接收到一个链接，就会返回一个 net.Conn 对象表示这个连接</span></div><div class="line">		conn, err := li.Accept()</div><div class="line"></div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Println(err)</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 字符串写入到客户端</span></div><div class="line">		fmt.Fprintln(conn, <span class="string">"Hello from TCP server"</span>)</div><div class="line"></div><div class="line">		conn.Close()</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在对应的文件夹下启动服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go run main.go</div></pre></td></tr></table></figure>
<p>模拟客户端程序发出请求，这里使用 netcat 工具，也就是 nc 命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nc localhost 8080</div><div class="line">Hello from TCP server</div></pre></td></tr></table></figure>
<p>通过 net 包，我们可以很简单的去写一个 TCP 服务器，代码可读性强。</p>
<h2 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h2><p>那么我们能不能用 Go 语言来模拟客户端，从而连接前面的服务器呢？答案是肯定的。</p>
<figure class="highlight go"><figcaption><span>tcp-read/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line">	</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">)</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// net 包的 Dial 函数能创建一个 TCP 连接</span></div><div class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 别忘了关闭连接</span></div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="comment">// 通过 ioutil 来读取连接中的内容，返回一个 []byte 类型的对象</span></div><div class="line">	<span class="keyword">byte</span>, err := ioutil.ReadAll(conn)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Println(err)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// []byte 类型的数据转成字符串型，再将其打印输出</span></div><div class="line">	fmt.Println(<span class="keyword">string</span>(<span class="keyword">byte</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行服务器后，再在所在的文件夹下启动客户端，会看到来自服务器的问候。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ go run main.go</div><div class="line">Hello from TCP server</div></pre></td></tr></table></figure>
<h2 id="TCP-协议模拟-HTTP-请求"><a href="#TCP-协议模拟-HTTP-请求" class="headerlink" title="TCP 协议模拟 HTTP 请求"></a>TCP 协议模拟 HTTP 请求</h2><p>我们知道 TCP/IP 协议是传输层协议，主要解决的是数据如何在网络中传输。而 HTTP 是应用层协议，主要解决的是如何包装这些数据。</p>
<p>下面的七层网络协议图也能看到 HTTP 协议是处于 TCP 的上层，也就是说，HTTP 使用 TCP 来传输其报文数据。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/29/59047bbfe298f.png" alt="七层网络协议图"></p>
<p>现在我们写一个基于 TCP 协议的服务器，并能模拟。在这其中，我们需要模拟发送 HTTP 响应头信息，我们可以用 <code>curl -i</code> 命令先来查看一下其他网站的响应头信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ curl -i <span class="string">"www.baidu.com"</span></div><div class="line">HTTP/1.1 200 OK  <span class="comment"># HTTP 协议及请求码</span></div><div class="line">Server: bfe/1.0.8.18	<span class="comment"># 服务器使用的WEB软件名及版本</span></div><div class="line">Date: Sat, 29 Apr 2017 07:30:33 GMT  <span class="comment"># 发送时间</span></div><div class="line">Content-Type: text/html   <span class="comment"># MIME类型</span></div><div class="line">Content-Length: 277			<span class="comment"># 内容长度</span></div><div class="line">Last-Modified: Mon, 13 Jun 2016 02:50:23 GMT</div><div class="line">...  <span class="comment"># balabala</span></div><div class="line">Accept-Ranges: bytes</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;  <span class="comment"># 消息体</span></div><div class="line">&lt;!--STATUS OK--&gt;&lt;html&gt;</div><div class="line">...</div><div class="line">&lt;/body&gt; &lt;/html&gt;</div></pre></td></tr></table></figure>
<p>接下来，我们尝试写出能输出对应格式响应内容的服务器。</p>
<figure class="highlight go"><figcaption><span>tcp-server-for-http/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	li, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalln(err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> li.Close()</div><div class="line"></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		conn, err := li.Accept()</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatalln(err.Error())</div><div class="line">			<span class="keyword">continue</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 函数前添加 go 关键字，就能使其拥有 Go 语言的并发功能</span></div><div class="line">		<span class="comment">// 这样我们可以同时处理来自不同客户端的请求</span></div><div class="line">		<span class="keyword">go</span> handle(conn)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(conn net.Conn)</span></span> &#123;</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="comment">// 回应客户端的请求</span></div><div class="line">	respond(conn)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">respond</span><span class="params">(conn net.Conn)</span></span> &#123;</div><div class="line">	<span class="comment">// 消息体</span></div><div class="line">	body := <span class="string">`&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charet="UTF-8"&gt;&lt;title&gt;Go example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;/body&gt;&lt;/html&gt;`</span></div><div class="line">	<span class="comment">// HTTP 协议及请求码</span></div><div class="line">	fmt.Fprint(conn, <span class="string">"HTTP/1.1 200 OK\r\n"</span>)</div><div class="line">	<span class="comment">// 内容长度</span></div><div class="line">	fmt.Fprintf(conn, <span class="string">"Content-Length: %d\r\n"</span>, <span class="built_in">len</span>(body)) </div><div class="line">	<span class="comment">// MIME类型</span></div><div class="line">	fmt.Fprint(conn, <span class="string">"Content-Type: text/html\r\n"</span>)</div><div class="line">	fmt.Fprint(conn, <span class="string">"\r\n"</span>)</div><div class="line">	fmt.Fprint(conn, body)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>go run main.go</code> 启动服务器之后，跳转到 <a href="localhost:8080" target="_blank" rel="external">localhost:8080</a>，就能看到网页内容，并且用开发者工具能看到其请求头。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/29/59047bb81e615.jpg" alt=""></p>
<h2 id="最简单的-HTTP-服务器"><a href="#最简单的-HTTP-服务器" class="headerlink" title="最简单的 HTTP 服务器"></a>最简单的 HTTP 服务器</h2><p>几行代码就能实现一个最简单的 HTTP 服务器。</p>
<figure class="highlight go"><figcaption><span>simple-http/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开后会发现显示「404 page not found」，这说明 HTTP 已经开始服务了！</p>
<h2 id="ListenAndServe"><a href="#ListenAndServe" class="headerlink" title="ListenAndServe"></a>ListenAndServe</h2><blockquote><p>Go 是通过一个函数 ListenAndServe 来处理这些事情的，这个底层其实这样处理的：初始化一个server 对象，然后调用了 net.Listen(“tcp”, addr)，也就是底层用 TCP 协议搭建了一个服务，然后监控我们设置的端口。</p>
<footer><strong>《Build web application with golang》</strong><cite>astaxie</cite></footer></blockquote>
<p>前面我们已经对 TCP 服务器有点熟悉了，而 HTTP 使用 TCP 来传输其报文数据，接下来看看如何用 net/http 包来实现在其上的 HTTP 层。</p>
<p>查文档可以发现 http 包下的 ListenAndServe 函数第一个参数是地址，而第二个是 Handler 类型的参数，我们想要显示内容就要在第二个参数下功夫。</p>
<figure class="highlight go"><figcaption><span>ListenAndServe</span><a href="https://golang.org/src/net/http/server.go?s=83696:83751#L2775" target="_blank" rel="external">ListenAndServe</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span></div></pre></td></tr></table></figure>
<p>再次查文档，得知 Handler 是一个接口，也就是说只要我们给某一个类型创建 <code>ServeHTTP(ResponseWriter, *Request)</code> 方法，就能符合接口的要求，也就实现了接口。</p>
<figure class="highlight go"><figcaption><span>http.Handler</span><a href="https://golang.org/src/net/http/server.go?s=2532:2595#L71" target="_blank" rel="external">http.Handler</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</div><div class="line">        ServeHTTP(ResponseWriter, *Request)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><figcaption><span>servehttp/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"><span class="comment">// 创建一个 foo 类型</span></div><div class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span> &#123;&#125;</div><div class="line"><span class="comment">// 为 foo 类型创建 ServeHTTP 方法，以实现 Handle 接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"Implement the Handle interface."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// 创建对象，类型名写后面..</span></div><div class="line">	<span class="keyword">var</span> f foo</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>,f)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行代码后打开能看到输出的字符串。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/29/59047bb28f70d.jpg" alt=""></p>
<h3 id="http-Request"><a href="#http-Request" class="headerlink" title="*http.Request"></a>*http.Request</h3><p>上面我们实现的小服务器里，我们无论访问 <a href="localhost:8080" target="_blank" rel="external">localhost:8080</a> 还是 <a href="localhost:8080/foo" target="_blank" rel="external">localhost:8080/foo</a> 都是一样的页面，这说明我们之前设定的是默认的页面，还没有为特定的路由(route)设置内容。</p>
<p>路由这些信息实际上就存在 ServeHTTP 函数的第二个参数 <code>*http.Request</code> 中， <code>*http.Request</code> 存放着客户端发送至服务器的请求信息，例如请求链接、请求方法、响应头、消息体等等。</p>
<p>现在我们可以把上面的代码改造一下。</p>
<figure class="highlight go"><figcaption><span>serveHTTP/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"><span class="comment">// 创建一个 foo 类型</span></div><div class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span> &#123;&#125;</div><div class="line"><span class="comment">// 为 foo 类型创建 ServeHTTP 方法，以实现 Handle 接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	<span class="comment">// 根据 URL 的相对路径来设置网页内容（不优雅）</span></div><div class="line">	<span class="keyword">switch</span> r.URL.Path &#123;</div><div class="line">	<span class="keyword">case</span> <span class="string">"/boy"</span>:</div><div class="line">		fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</div><div class="line">	<span class="keyword">case</span> <span class="string">"/girl"</span>:</div><div class="line">		fmt.Fprintln(w, <span class="string">"hehe."</span>)</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// 创建对象，类型名写后面..</span></div><div class="line">	<span class="keyword">var</span> f foo</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>,f)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="再优雅一点"><a href="#再优雅一点" class="headerlink" title="再优雅一点"></a>再优雅一点</h3><p>我们可以用 HTTP 请求多路复用器(HTTP request multiplexer) 来实现分发路由，而<code>http.NewServeMux()</code> 返回的 <code>*ServeMux</code> 对象就能实现这样的功能。下面是 <code>*ServeMux</code> 的部分源码，能看到通过 <code>*ServeMux</code> 就能为每一个路由设置单独的一个 handler 了，简单地说就是不同的内容。</p>
<figure class="highlight go"><figcaption><span>ServeMux</span><a href="https://golang.org/src/net/http/server.go?s=63512:63637#L2106" target="_blank" rel="external">ServeMux</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</div><div class="line">	mu    sync.RWMutex         <span class="comment">// 读写锁</span></div><div class="line">	m     <span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry  <span class="comment">// 路由信息（键值对）</span></div><div class="line">	hosts <span class="keyword">bool</span>                 <span class="comment">// 是否包含 hostnames</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</div><div class="line">	explicit <span class="keyword">bool</span>     <span class="comment">// 是否精确匹配</span></div><div class="line">	h        Handler  <span class="comment">// muxEntry.Handler 是接口</span></div><div class="line">	pattern  <span class="keyword">string</span>   <span class="comment">// 路由</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</div><div class="line">	ServeHTTP(ResponseWriter, *Request)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用 <code>*ServeMux</code> 来写一个例子。</p>
<figure class="highlight go"><figcaption><span>newServeMux/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> boy <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b boy)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> girl <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g girl)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"hehe."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> b boy</div><div class="line">	<span class="keyword">var</span> g girl</div><div class="line">	<span class="keyword">var</span> f foo</div><div class="line"></div><div class="line">	<span class="comment">// 返回一个 *ServeMux 对象</span></div><div class="line">	mux := http.NewServeMux()  </div><div class="line">	mux.Handle(<span class="string">"/boy/"</span>, b)</div><div class="line">	mux.Handle(<span class="string">"/girl/"</span>, g)</div><div class="line">	mux.Handle(<span class="string">"/"</span>, f)</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>, mux)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就能为每一个路由设置单独的页面了。</p>
<h3 id="再再优雅一点"><a href="#再再优雅一点" class="headerlink" title="再再优雅一点"></a>再再优雅一点</h3><p><code>http.Handle(pattern string, handler Handler)</code> 还能帮我们简化代码，它默认创建一个 <code>DefaultServeMux</code>，也就是默认的 <code>ServeMux</code> 来存 handler 信息，这样就不需要 <code>http.NewServeMux()</code> 函数了。这看起来虽然没有什么少写多少代码，但是这是下一个更加优雅方法的转折点。</p>
<figure class="highlight go"><figcaption><span>defaultServeMux/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> boy <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b boy)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> girl <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g girl)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"hehe."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> foo <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> b boy</div><div class="line">	<span class="keyword">var</span> g girl</div><div class="line">	<span class="keyword">var</span> f foo</div><div class="line"></div><div class="line">	http.Handle(<span class="string">"/boy/"</span>, b)</div><div class="line">	http.Handle(<span class="string">"/girl/"</span>, g)</div><div class="line">	http.Handle(<span class="string">"/"</span>, f)</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="再再再优雅一点"><a href="#再再再优雅一点" class="headerlink" title="再再再优雅一点"></a>再再再优雅一点</h3><p><code>http.HandleFunc(pattern string, handler func(ResponseWriter, *Request))</code> 可以看做 <code>http.Handle(pattern string, handler Handler)</code> 的一种包装。前者的第二个参数变成了一个函数，这样我们就不用多次新建对象，再为对象实现 <code>ServeHTTP()</code> 方法来实现不同的 handler 了。下面是 <code>http.HandleFun()</code> 的部分源码。</p>
<figure class="highlight go"><figcaption><span>http.HandleFun()</span><a href="https://golang.org/src/net/http/server.go?s=68581:68652#L2287" target="_blank" rel="external">http.HandleFun()</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</div><div class="line">	<span class="comment">// 同样利用 DefaultServeMux 来存路由信息</span></div><div class="line">	DefaultServeMux.HandleFunc(pattern, handler)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</div><div class="line">	<span class="comment">// 是不是似曾相识？</span></div><div class="line">	mux.Handle(pattern, HandlerFunc(handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用 <code>http.HandleFun()</code> 来重写之前的例子。</p>
<figure class="highlight go"><figcaption><span>handleFun/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">boy</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">girl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"hehe."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	http.HandleFunc(<span class="string">"/boy/"</span>, boy)</div><div class="line">	http.HandleFunc(<span class="string">"/girl/"</span>, girl)</div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, foo)</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HandlerFunc"><a href="#HandlerFunc" class="headerlink" title="HandlerFunc"></a>HandlerFunc</h3><p>另外，http 包里面还定义了一个类型 <code>http.HandlerFunc</code>，该类型默认实现 Handler 接口，我们可以通过 <code>HandlerFunc(foo)</code> 的方式来实现类型强转，使 <code>foo</code> 也实现了 Handler 接口。</p>
<figure class="highlight go"><figcaption><span>HandlerFunc</span><a href="https://golang.org/src/net/http/server.go?s=57220:57267#L1928" target="_blank" rel="external">HandlerFunc</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">// 实现 <span class="title">Handler</span> 接口</span></div><div class="line"><span class="function"><span class="title">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</div><div class="line">	f(w, r)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><figcaption><span>handleFun/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">boy</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"I love you!!!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">girl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"hehe."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintln(w, <span class="string">"Men would stop talking and women would shed tears when they see this."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// http.Handler() 的第二个参数是要实现了 Handler 接口的类型</span></div><div class="line">	<span class="comment">// 可以通过类型强转来重新使用该函数来实现</span></div><div class="line">	http.Handle(<span class="string">"/boy/"</span>, http.HandlerFunc(boy))</div><div class="line">	http.Handle(<span class="string">"/girl/"</span>, http.HandlerFunc(girl))</div><div class="line">	http.Handle(<span class="string">"/"</span>, http.HandlerFunc(foo))</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>本文从搭建 TCP 服务器一步步到搭建 HTTP 服务器，展示了 Go 语言网络库的强大，我认为 Go 语言是熟悉网络协议的一个很好的工具。自己从熟悉了拥有各种 feature 的 Swift 语言之后再入门到看似平凡无奇的 Go 语言，经历了从为语言的平庸感到惊讶不解到为其遵循规范和良好的工业语言设计而感到惊叹和兴奋的转变。</p>
<p>最后希望本文能为有基础的同学理清思路，也能吸引更多同学来学习这门优秀的语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过 Go 语言写几个简单的通信示例，从 TCP 服务器过渡到 HTTP 开发，从而简单介绍 net 包的运用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://frankorz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go 学习资源集合</title>
    <link href="http://frankorz.com/2017/04/03/go-learning-source/"/>
    <id>http://frankorz.com/2017/04/03/go-learning-source/</id>
    <published>2017-04-03T04:39:18.000Z</published>
    <updated>2017-06-11T08:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><center><img src="https://ooo.0o0.ooo/2017/04/06/58e5cd73cf67c.png" alt=""></center>

<p>之前在写移动应用的时候，深刻体会到自己很有必要学会写后端，于是进了 Golang 的坑。以下是我在学习的时候遇到的好资源（多为英文），先写在这里。</p>
<a id="more"></a>
<p>事实上，Go 语言的 <a href="https://github.com/golang/go/wiki" target="_blank" rel="external">wiki</a> 上已经包含了很多资源，下文只是个人关注过的一些资源的总结。</p>
<h3 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h3><table>
<thead>
<tr>
<th>视频</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://tour.golang.org/welcome/1" target="_blank" rel="external">A Tour of Go</a></td>
<td>官方的线上教程，内容为 Go 语言基础。</td>
</tr>
<tr>
<td><a href="http://www.bilibili.com/video/av8845689/" target="_blank" rel="external">「教程」Go语言基础 (O’Reilly)</a></td>
<td>O’Reilly 的 Go 语言基础教程，鬼知道我怎么发现的…</td>
</tr>
<tr>
<td><a href="http://exercism.io/languages/go/about" target="_blank" rel="external">Exercism</a></td>
<td>通过解决练手用的问题来锻炼编写 Go，这网站还有其他三十多种语言的练手项目喔。</td>
</tr>
<tr>
<td><a href="http://www.golang-book.com/guides/bootcamp" target="_blank" rel="external">Go Web Programming Bootcamp</a></td>
<td>Todd McLeod 在别的学校开过的训练营视频，从 Go 基础讲到基础的服务器开发和 GAE。</td>
</tr>
<tr>
<td><a href="https://www.udemy.com/go-programming-language/learn/v4/?couponCode=OB1KBE" target="_blank" rel="external">Web Development w/ Google’s Go (golang) Programming Language</a></td>
<td>付费，Todd McLeod 讲的 Go 的 web development 入门课程。</td>
</tr>
<tr>
<td><a href="https://jaggerwang.net/develop-and-deploy-api-service-with-go-and-docker-intro/" target="_blank" rel="external">Go + Docker API服务开发和部署</a></td>
<td>Jagger Wang 在开发「在球场」这款体育社交类应用过程中的技术总结。</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/golang/go/wiki/Courses" target="_blank" rel="external">更多课程</a></p>
<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><table>
<thead>
<tr>
<th>书名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://go-zh.org/doc/" target="_blank" rel="external">Go 中文文档</a></td>
<td><a href="https://golang.org/doc/" target="_blank" rel="external">官方文档</a>的翻译，注意文档翻译时间。</td>
</tr>
<tr>
<td><a href="http://docs.plhwin.com/gopl-zh/index.html" target="_blank" rel="external">Go 语言圣经（中文版）</a></td>
<td>Go 语言圣经 <a href="http://gopl.io/" target="_blank" rel="external">《The Go Programming Language》</a> 的中文版本，入门必读。本书对编程新手可能有难度，其中部分例子有点高大上，但本书的质量可以完全放心。</td>
</tr>
<tr>
<td><a href="https://github.com/bingoHuang/effective-go-zh-en" target="_blank" rel="external">Effective Go（中英双语版）</a></td>
<td><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="external">Effective Go</a> 的中英双语版，入门必读。</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/Network-Programming-Go-Essential-Securing/dp/1484226917" target="_blank" rel="external">Network programming with Go: Essential Skills for Using and Securing Networks</a></td>
<td>细讲 Go 语言网络编程的书，<a href="https://github.com/astaxie" target="_blank" rel="external">astaxie</a> 发起过翻译，中文译本在<a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">NPWG_zh</a></td>
</tr>
<tr>
<td><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="external">build-web-application-with-golang</a></td>
<td><a href="https://github.com/astaxie" target="_blank" rel="external">astaxie</a> 写的 web 开发向的 Go 教程，该教程被翻译成多种语言，总共有将近 1W5 个 star。</td>
</tr>
<tr>
<td><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="external">Go 简易教程</a></td>
<td><a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="external">《The Little Go Book》</a>中文译本，中文正式名《Go 简易教程》。</td>
</tr>
<tr>
<td><a href="https://github.com/qyuhen/book" target="_blank" rel="external">雨痕的学习笔记</a></td>
<td>雨痕个人学习笔记，Go 语言部分的源码剖析内容很有价值。</td>
</tr>
<tr>
<td><a href="http://www.golangbootcamp.com/book/frontmatter" target="_blank" rel="external">Go Bootcamp</a></td>
<td>又一本 Go 入门的免费电子书</td>
</tr>
<tr>
<td><a href="https://iromin.files.wordpress.com/2016/01/golanguagestudycourse.pdf" target="_blank" rel="external">Go Language Study Course</a></td>
<td>来源自<a href="https://rominirani.com/go-language-study-group-an-analysis-1562b59642f0" target="_blank" rel="external">「Go Language Study Group — An Analysis」</a>。Romin Irani 和 Satish Talim 开设网课后总结的讲义，有参考价值。</td>
</tr>
<tr>
<td><a href="https://github.com/thewhitetulip/web-dev-golang-anti-textbook/" target="_blank" rel="external">Webapps in Go</a></td>
<td>免费，教你不依赖框架写一个 web app。</td>
</tr>
<tr>
<td><a href="https://github.com/Checkmarx/Go-SCP" target="_blank" rel="external">Go-SCP</a></td>
<td>免费，关于 Go 语言在生产环境中安全问题的应用。<a href="https://www.gitbook.com/book/checkmarx/go-scp/details" target="_blank" rel="external">GitBook</a></td>
</tr>
<tr>
<td><a href="https://gobyexample.com" target="_blank" rel="external">Go by Example</a></td>
<td>通过大量的小例子来学习 Go。</td>
</tr>
<tr>
<td><a href="http://www.epubit.com.cn/book/details/4291" target="_blank" rel="external">Go 语言实战</a></td>
<td>付费，<a href="https://www.amazon.com/Go-Action-William-Kennedy/dp/1617291781/" target="_blank" rel="external">《Go in action》</a>的中文版，适合有其他编程语言基础的同学来入门，可以配合圣经一起看。</td>
</tr>
<tr>
<td><a href="https://book.douban.com/subject/27016236/" target="_blank" rel="external">Go 并发编程实战（第2版）</a></td>
<td>付费，深入 Go 语言及其并发原理。</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/Web-Development-Go-Building-Scalable/dp/1484210530/" target="_blank" rel="external">Web Development with Go: Building Scalable Web Apps and RESTful Services</a></td>
<td>付费，我认为出彩之处是里面会教你写一个有 JWT 验证的 API Server 项目。</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/Go-Programming-Blueprints-Mat-Ryer-ebook/dp/B01GQCQ8OW" target="_blank" rel="external">Go Programming Blueprints - Second Edition</a></td>
<td>付费，Go 语言进阶。</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/Writing-Interpreter-Go-Thorsten-Ball/dp/300055808X/" target="_blank" rel="external">Writing An Interpreter In Go</a></td>
<td>付费，用 Go 语言写一个解释器。</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/golang/go/wiki/Books" target="_blank" rel="external">更多书籍</a></p>
<p>dariubs 收集的列表：<a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">GoBooks</a></p>
<p>推荐 Go 语言书的推特号：<a href="https://twitter.com/gopherbook" target="_blank" rel="external">Gopher Book</a></p>
<!--### 相关问题

[Best tutorials/screencasts/courses to learn go?](https://www.reddit.com/r/golang/comments/5zxqu8/best_tutorialsscreencastscourses_to_learn_go/)-->
<h3 id="Youtube-频道"><a href="#Youtube-频道" class="headerlink" title="Youtube 频道"></a>Youtube 频道</h3><table>
<thead>
<tr>
<th>频道名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.youtube.com/watch?v=CF9S4QZuV30" target="_blank" rel="external">Learn Go Syntax in one video</a></td>
<td>一小时教你 Go 语法的视频</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UCElzlyMtkoXaO3kFa5HL0Xw" target="_blank" rel="external">Todd McLeod</a></td>
<td>非常热爱分享 Go 教程的大叔，本文开头的 Udemy 课程就是他发布的。</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UC2GHqYE3fVJMncbrRd8AqcA" target="_blank" rel="external">Go In 5 Minutes</a></td>
<td>五分钟学一个小知识点。</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw" target="_blank" rel="external">JustForFunc</a></td>
<td>新发现的爱发教程的 Gopher，风格奇特。</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/user/joncalhoun/playlists" target="_blank" rel="external">Jon Calhoun</a></td>
<td>一系列 Go 实现的算法视频</td>
</tr>
</tbody>
</table>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><table>
<thead>
<tr>
<th>博客名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://appliedgo.net" target="_blank" rel="external">Applied Go</a></td>
<td>Go 相关的教程</td>
</tr>
<tr>
<td><a href="https://www.goinggo.net" target="_blank" rel="external">Going Go Programming</a></td>
<td><a href="https://book.douban.com/subject/27015617/" target="_blank" rel="external">《Go 语言实战》</a>作者之一的博客</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/golang/go/wiki/Blogs" target="_blank" rel="external">更多博客</a></p>
<h3 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h3><table>
<thead>
<tr>
<th>播客名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://changelog.com/gotime" target="_blank" rel="external">Go Time</a></td>
<td>A panel of Golang experts and special guests discuss the Go programming language, the community, and everything in between.</td>
</tr>
</tbody>
</table>
<h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><table>
<thead>
<tr>
<th>论坛名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://forum.golangbridge.org" target="_blank" rel="external">Go Forum</a></td>
<td>蛮活跃的 Go 论坛</td>
</tr>
<tr>
<td><a href="https://www.reddit.com/r/golang/" target="_blank" rel="external">Reddit/golang</a></td>
<td>Reddit 的 Go 语言节点</td>
</tr>
</tbody>
</table>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table>
<thead>
<tr>
<th>标题</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/" target="_blank" rel="external">Create A Real Time Chat App With Golang, Angular 2, And Websockets</a></td>
<td>对于用 Go 语言来入门后端的我来说，如何和其它技术结合使用令我耳目一新（尽管看起来不难），我很感激这篇文章：）</td>
</tr>
<tr>
<td><a href="https://medium.com/@IndianGuru/how-do-i-go-about-learning-go-3a58a3a29a0b" target="_blank" rel="external">How do I go about learning Go?</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://dave.cheney.net/resources-for-new-go-programmers" target="_blank" rel="external">Resources for new Go programmers</a></td>
<td></td>
</tr>
<tr>
<td><a href="http://blog.tamizhvendan.in/blog/2017/05/01/using-golang-in-production-my-experiences/" target="_blank" rel="external">Using Golang in Production - My Experiences</a></td>
</tr>
</tbody>
</table>
<p>&lt;未完待续&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/06/58e5cd73cf67c.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;之前在写移动应用的时候，深刻体会到自己很有必要学会写后端，于是进了 Golang 的坑。以下是我在学习的时候遇到的好资源（多为英文），先写在这里。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://frankorz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>聊聊慕课与时间管理工具</title>
    <link href="http://frankorz.com/2017/03/29/mooc-and-pomotodo/"/>
    <id>http://frankorz.com/2017/03/29/mooc-and-pomotodo/</id>
    <published>2017-03-28T21:13:14.000Z</published>
    <updated>2017-04-06T05:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在图灵社区活动「分享学习方法」中写了这篇文章，现在搬运过来，浅浅地普及下慕课这种学习新方式和目前所选用的时间管理工具。</p>
<a id="more"></a>
<h2 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h2><p>我以前有过看视频学编程的时光，视频里老师写一点代码，我就写一点代码。如今想起来这种方法虽然浪费时间，但是对小白而言是一个很好的入门方法，能够有效的让小白熟悉 IDE 和手把手入门编程。</p>
<p>MOOC 则是最近又让我眼前一亮的学习方式，其代表有：<a href="http://coursera.org" target="_blank" rel="external">Coursera</a>、<a href="http://edx.org" target="_blank" rel="external">Edx</a> 、<a href="http://cn.udacity.com" target="_blank" rel="external">Udacity</a>等。同样是看视频学习，Coursera 使用了短视频+限时作业+考试的方法来让学生能轻松上课的同时，用 deadline 督促学生。其次付费证书和其课堂论坛也是亮点，你上完一个课程，可以付费购买课程的证书以彰显你的努力，论坛则是开放给全球各地上同样一节课的学生。Coursera 里有部分课程都是有中文字幕的，例如普林斯顿大学的「<a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="external">Algorithms</a>」课。算法红宝书《算法（第4版）》的作者就是这门课的老师，Robert Sedgewick 老师在课程中给的图例和制作的动画都十分清晰精致，并且配合课件能循序渐进地分解算法。其中小课程一般一节讲一个算法或知识点，内容充实并且需要学生课下消化。这种方式和看《算法（第4版）》结合起来，学习效率事半功倍。PS：上课的同时也请完成红宝书中的课后练习。</p>
<p>我认为 MOOC 可贵的一个地方还是它的课程质量，因为国外 CS 课程的授课老师往往同时有很强的 academic 和 industry 的背景，所以课程通常会兼顾深度和实用性。美国大学一门课收费大约在五千刀左右，所以请努力争取白赚这些钱吧~</p>
<p>在这里随便列举几门课程：有被称为第一神课的「<a href="https://www.coursera.org/learn/programming-languages" target="_blank" rel="external">程序设计语言</a>」、斯坦福密码学大牛 Dan Boneh 讲的「<a href="https://www.coursera.org/learn/crypto" target="_blank" rel="external">Cryptography I</a>」、Coursera 创始人吴恩达讲的「<a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="external">机器学习</a>」等等。</p>
<p>遗憾的是 Coursera 改版之后删除了很多经典神课，例如以 CSAPP 为教材的「<a href="https://courses.cs.washington.edu/courses/cse351/16sp/videos.html" target="_blank" rel="external">The Hardware/Software Interface</a>」，斯坦福大学的编译原理课「Compilers」、斯坦福的另外一门偏理论的算法课「Algorithms: Design and Analysis」等等，这些课程需要自己去学校官网上找，或者去 Youtube 看视频。同时科学上网会有更好的上课体验，另外英语的学习也是很有必要的，毕竟不是门门课都有志愿者翻译成中文。</p>
<p>PS: 斯坦福大学也有自己的 mooc 网站，<a href="https://lagunita.stanford.edu" target="_blank" rel="external">Stanford Online</a></p>
<p>已经翻译了的公开课也有志愿者搬运到了 B 站（汗…）、网易公开课、学堂在线等平台。例如哈佛大学的计算机入门课「<a href="http://open.163.com/special/opencourse/cs50.html" target="_blank" rel="external">计算机科学 cs50</a>」、麻省理工学院的「<a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="external">算法导论</a>」课、线性代数神课「<a href="https://www.bilibili.com/video/av6731067/" target="_blank" rel="external">线性代数的本质</a>」、用 Python 讲解的计算机科学入门课「<a href="http://www.xuetangx.com/courses/course-v1:MITx+6_00_1x+sp/about" target="_blank" rel="external">计算机科学和Python编程导论</a>」、B 站 UP 主翻译的斯坦福密码学课「<a href="http://www.bilibili.com/video/av1269426/" target="_blank" rel="external">密码学</a>」、微软信仰中心翻译的「<a href="http://space.bilibili.com/18340402/#!/channel/detail?cid=1436" target="_blank" rel="external">UWP 开发入门教程</a>」等等。</p>
<p>更多课程及查看评分：<br><a href="http://mooc.guokr.com" target="_blank" rel="external">mooc 学院</a><br><a href="http://blog.coursegraph.com/coursera课程下载和存档计划四计算机科学基础公开课" target="_blank" rel="external">Coursera课程下载和存档计划四：计算机科学基础公开课</a><br><a href="https://www.zhihu.com/question/21095181" target="_blank" rel="external">三大 MOOC 网站：Coursera 与 Udacity 和 edX 比较，哪个更适合中国人？你有何经验分享？</a></p>
<h2 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h2><p>近年来时间管理话题变得十分火热，番茄工作法大家应该都耳熟能详了，我就不详细介绍了。很多番茄工作法的应用如雨后春笋般出现，由于受限于单平台，我没有坚持使用下来。今天推荐一款我在用一段时间的「<a href="http://pomotodo.com" target="_blank" rel="external">番茄土豆</a>」服务，番茄土豆拥有全平台应用，涵盖了我的苹果本、iPhone 和 iPad。另外一点就是能方便地回溯自己的番茄时间。</p>
<p>例如下面是在 Coursera 上算法课的统计，右下角统计了时间。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca5de499.jpg" alt=""></p>
<p>下面是最近看书学 Go 语言的记录。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca6c13fa.jpg" alt=""></p>
<p>查看自己花在阅读上的时间。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/29/58db5ca64e605.jpg" alt=""></p>
<p>我认为每完成一个番茄就记录这段时间所做的事，这样能够培养主动记录的习惯，也方便自己对时间的统计分析。建议在记录任务的时候分配好标签，记录完整在做的事情，这样利用很短的时间就能代替追踪时间的效果。</p>
<p>一般免费版就足够用了，我购买了高级版是因为能够补充线下没有统计的番茄时间，高级版对于学生或教师有半价。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习方法太多了，我敢写在这的都是我感觉的确对我有帮助的方法。自己也是个菜鸟，还在探索自己的学习方法。现在越学习越清楚英语的重要性，希望大家学好英语，这样你可用的学习资源也会多出几十倍来，而不需要靠别人翻译拾人牙慧。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在图灵社区活动「分享学习方法」中写了这篇文章，现在搬运过来，浅浅地普及下慕课这种学习新方式和目前所选用的时间管理工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://frankorz.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>装饰器模式（Swift）</title>
    <link href="http://frankorz.com/2017/02/20/decorator-in-swift/"/>
    <id>http://frankorz.com/2017/02/20/decorator-in-swift/</id>
    <published>2017-02-20T11:00:02.000Z</published>
    <updated>2017-04-06T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://ooo.0o0.ooo/2017/02/21/58ac04972e7f3.jpg" alt=""></p>
<p>阅读《大话设计模式》和《精通 Swift 设计模式》中的装饰器模式，本文为笔记。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>装饰器模式，可以用于在运行时选择性地修改对象的行为，在处理无法修改的类时能发挥其强大的能力。</p>
<p>我们可以在想修改<strong>对象的行为</strong>时，又不想修改<strong>对象所属的类或其使用者</strong>，就可以使用装饰器模式。如果想修改对象的类实现，则不推荐使用装饰器模式，此时直接修改类往往更简单。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>阅读前请下载 OS X 命令工具行初始项目 <a href="https://github.com/Latias94/Decorator_in_Swift/tree/master/Decorator_start" target="_blank" rel="external">Decorator_start</a>，项目中注释较详细，如有问题请联系我。</p>
<p>项目地址：<a href="https://github.com/Latias94/Decorator_in_Swift" target="_blank" rel="external">Decorator_in_Swift</a></p>
<p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03cfe0d06.png" alt="初始项目 UML 图"></p>
<p>Purchase 类表示顾客在商店买了什么，其中定义了两个属性来存储商品名称和价格，还有两个计算属性把信息提供给外界。</p>
<p>CustomerAccount 类表示一组 Purchase 对象，代表了顾客所购买的商品，<code>addPurchase(Purchase)</code>方法代表顾客购买了新商品。</p>
<p>Options 类中包含三个类，为前两个类提供了礼品服务，例如：2 元的礼品包装、1 元的彩带和 5 元的礼品配送。这里利用继承在 Options 类创建了三个装饰器类解决一个小问题——在不修改原来的两个类时添加了礼品服务功能。</p>
<p>Purchase 类和 CustomerAccount 类实现了创建一个用户对象，然后买一个特定价格的商品，如：张三购买了 10 元的帽子。后三个类则扩展了功能，能为每一个商品增加一个礼品服务的选项，如：张三购买了有彩带包装的 10 元的帽子。</p>
<p>但是已有的代码实现不了为一个商品添加多个礼品服务，如：张三购买了有礼品和彩带包装的 10 元的帽子。</p>
<p>源码运行结果：</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Purchase Red Hat, Price ￥10.00</div><div class="line">Purchase Scarf, Price ￥20.00</div><div class="line">Purchase Scarf + delivery, Price ￥25.00</div><div class="line">Total due: ￥55.00</div></pre></td></tr></table></figure>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式通过创建装饰器类解决上述组合问题（礼品包装+彩带、礼品包装+彩带+礼品配送等），装饰器类是指用于封装原始类并改变其行为的类。</p>
<p>装饰器类提供的 API 和封装的原始类相同，为了创建其他组合，装饰器还可以封装其他装饰器。</p>
<p>这里的单个礼品服务类 <code>Options.swift</code> 可以看做是一个小小的装饰器。</p>
<p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03d000641.png" alt="装饰器模式"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>装饰器类需要继承无法修改的类，来创建一个拥有该类所有方法和属性的类，用来替换原始类的功能。装饰器需要定义一个用来存储被封装对象的私有属性，从而为外界提供该对象的基本功能。</p>
<p>Options.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 装饰器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePurchasDecorator</span> : <span class="title">Purchase</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>) &#123;</div><div class="line">    wrappedPurchase = purchase</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 礼品包装</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithGiftWrap</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + giftwrap"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 礼带</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithRibbon</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + ribbon"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 礼品配送</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseWithDelivery</span> : <span class="title">BasePurchasDecorator</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(<span class="keyword">super</span>.description)</span> + delivery"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice + <span class="number">5</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里在开头创建了一个继承自 Purchase 类的礼品服务的基类 BasePurchasDecorator，并把原有礼品服务类的父类修改成了它。在 BasePurchasDecorator 类中，不仅定义了一个私有属性 <code>wrappedPurchase</code> 来保存 Purchase 对象（<a href="http://frankorz.com/2017/02/20/decorator-in-swift/#增加新功能">增加新功能</a>小节能看到用途），还会对礼品服务类的属性（<code>description</code> 和 <code>totalPrice</code>）进行处理，以供继承的子类去根据自身的配送描述和价格修改其内容。</p>
<p>main.swift 修改为</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> account = <span class="type">CustomerAccount</span>(name: <span class="string">"Joe"</span>)</div><div class="line">account.addPurchase(<span class="type">Purchase</span>(product: <span class="string">"Red Hat"</span>, price: <span class="number">10</span>))</div><div class="line">account.addPurchase(<span class="type">Purchase</span>(product: <span class="string">"Scarf"</span>, price: <span class="number">20</span>))</div><div class="line"><span class="comment">// 礼品配送服务</span></div><div class="line"><span class="comment">//account.addPurchase(PurchaseWithDelivery(product: "Scarf", price: 20))</span></div><div class="line"><span class="comment">// 带礼品配送服务的20元围巾</span></div><div class="line">account.addPurchase(</div><div class="line">  <span class="type">PurchaseWithDelivery</span>(purchase:</div><div class="line">    <span class="type">Purchase</span>(product: <span class="string">"Scarf"</span>, price: <span class="number">20</span>)))</div><div class="line">    </div><div class="line"><span class="comment">// 带礼品包装和礼品配送服务的25元太阳眼镜</span></div><div class="line">account.addPurchase(</div><div class="line">  <span class="type">PurchaseWithDelivery</span>(purchase:</div><div class="line">    <span class="type">PurchaseWithGiftWrap</span>(purchase:</div><div class="line">      <span class="type">Purchase</span>(product: <span class="string">"Sunglasses"</span>, price:<span class="number">25</span>))))</div><div class="line"></div><div class="line">account.printAccount()</div></pre></td></tr></table></figure>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Purchase Red Hat, Price ￥10.00</div><div class="line">Purchase Scarf, Price ￥20.00</div><div class="line">Purchase Scarf + delivery, Price ￥25.00</div><div class="line">Purchase Sunglasses + giftwrap + delivery, Price ￥32.00</div><div class="line">Total due: ￥87.00</div></pre></td></tr></table></figure>
<h3 id="增加新功能"><a href="#增加新功能" class="headerlink" title="增加新功能"></a>增加新功能</h3><p>如果我们还想要用装饰器为原对象增加新的方法或属性，例如节日打折，我们可以继续定义一个折扣装饰器 <code>DiscountDecorator</code>，并创建子类实现不同折扣。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 新增了折扣功能的装饰器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiscountDecorator</span>: <span class="title">Purchase</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.wrappedPurchase = purchase</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.description</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 优惠了多少元</span></div><div class="line">  <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 判断产品是否适用折扣优惠，计算已用折扣数</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">countDiscounts</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">1</span></div><div class="line">    <span class="comment">// 注意这里对象本身就已经是一个折扣，wrappedPurchase 是折扣后跟着的purchase对象，还是折扣的话折扣数+1</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> discounter = wrappedPurchase <span class="keyword">as</span>? <span class="type">DiscountDecorator</span> &#123;</div><div class="line">      total += discounter.countDiscounts()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 黑色星期五打8折</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackFridayDecorator</span>: <span class="title">DiscountDecorator</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice - discountAmount</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice * <span class="number">0.20</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 清仓大甩卖打3折</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EndOfLineDecorator</span>: <span class="title">DiscountDecorator</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice - discountAmount</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> discountAmount: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.totalPrice * <span class="number">0.70</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中我们根据 <code>wrappedPurchase</code> 属性是否继承自折扣装饰器，来判断方法所包含的对象是否是有折扣的商品。例如下面代码中的 <code>EndOfLineDecorator(Purchase)</code> 方法所包含的对象： <code>BlackFirdayDecorator(purchase:
      PurchaseWithDelivery(purchase:
        PurchaseWithGiftWrap(purchase:
          Purchase(product: &quot;Towel&quot;, price: 12))))</code> 有黑五折扣的礼品配送和礼品包装服务的12元太阳眼镜。</p>
<p>main.swift 中新增用了折扣的商品的代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//... 忽略部分代码</span></div><div class="line"></div><div class="line"><span class="comment">// 带礼品配送+礼品包装服务的12元太阳眼镜共19元，3折加8折后4.56元。</span></div><div class="line">account.addPurchase(</div><div class="line">  <span class="type">EndOfLineDecorator</span>(purchase:</div><div class="line">    <span class="type">BlackFridayDecorator</span>(purchase:</div><div class="line">      <span class="type">PurchaseWithDelivery</span>(purchase:</div><div class="line">        <span class="type">PurchaseWithGiftWrap</span>(purchase:</div><div class="line">          <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>))))))</div><div class="line"></div><div class="line">account.printAccount()</div><div class="line"></div><div class="line"><span class="comment">// 输出每个商品的折扣数</span></div><div class="line"><span class="keyword">for</span> purchase <span class="keyword">in</span> account.purchases &#123;</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> discountPurchase = purchase <span class="keyword">as</span>? <span class="type">DiscountDecorator</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(discountPurchase)</span> has <span class="subst">\(discountPurchase.countDiscounts()</span>) discounts"</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(purchase)</span> has no discounts"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Purchase Red Hat, Price ￥10.00</div><div class="line">Purchase Scarf, Price ￥20.00</div><div class="line">Purchase Scarf + delivery, Price ￥25.00</div><div class="line">Purchase Sunglasses + giftwrap + delivery, Price ￥32.00</div><div class="line">Purchase Towel + giftwrap + delivery, Price ￥4.56</div><div class="line">Total due: ￥91.56</div><div class="line">Red Hat has no discounts</div><div class="line">Scarf has no discounts</div><div class="line">Scarf + delivery has no discounts</div><div class="line">Sunglasses + giftwrap + delivery has no discounts</div><div class="line">Towel + giftwrap + delivery has 2 discounts</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/02/21/58ac03d361786.png" alt="UML 图"></p>
<p>如果想要让折扣只作用在产品价格而不对礼品服务做影响，也是很简单的。</p>
<p>main.swift </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 带礼品配送+礼品包装服务的12元太阳眼镜共19元，黑五8折只对产品价格有效，之后再打清仓3折后4.98元。</span></div><div class="line">account.addPurchase(</div><div class="line">  <span class="type">EndOfLineDecorator</span>(purchase:</div><div class="line">    <span class="type">PurchaseWithDelivery</span>(purchase:</div><div class="line">      <span class="type">PurchaseWithGiftWrap</span>(purchase:</div><div class="line">        <span class="type">BlackFridayDecorator</span>(purchase:</div><div class="line">          <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>))))))</div></pre></td></tr></table></figure>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Purchase Towel + giftwrap + delivery, Price ￥4.98</div><div class="line">...</div><div class="line">Towel + giftwrap + delivery has 1 discounts</div></pre></td></tr></table></figure>
<p>计算折扣数的时候有点小问题，但是价格是对的。</p>
<p>用装饰器的时候需要谨慎，要评估对应用其他部分带来哪些影响，特别是已经使用了其他装饰器的情况下。</p>
<h3 id="合并装饰器"><a href="#合并装饰器" class="headerlink" title="合并装饰器"></a>合并装饰器</h3><p>装饰器可以为原始类新增新功能，也能合并装饰器。</p>
<p>注意：</p>
<ul>
<li>装饰器的作用应该是增强或者拓展原始类的功能，而不是给现有的 API 渗透功能。</li>
<li>小项目中直接用多个独立的装饰器类会比较简单，对于复杂的项目会不便于维护，所以将相关联的装饰器类合并会比较合适。</li>
</ul>
<p>Options.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 合并装饰器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GiftOptionDecorator</span>: <span class="title">Purchase</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> wrappedPurchase: <span class="type">Purchase</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> options: [<span class="type">Option</span>]</div><div class="line">  </div><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Option</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> giftWrap</div><div class="line">    <span class="keyword">case</span> ribbon</div><div class="line">    <span class="keyword">case</span> delivery</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(purchase: <span class="type">Purchase</span>, options: [<span class="type">Option</span>]) &#123;</div><div class="line">    <span class="keyword">self</span>.wrappedPurchase = purchase</div><div class="line">    <span class="keyword">self</span>.options = options</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(product: purchase.description, price: purchase.totalPrice)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = wrappedPurchase.description</div><div class="line">    <span class="keyword">for</span> option <span class="keyword">in</span> options &#123;</div><div class="line">      <span class="keyword">switch</span> option &#123;</div><div class="line">      <span class="keyword">case</span> .giftWrap:</div><div class="line">        result = <span class="string">"<span class="subst">\(result)</span> + giftwrap"</span></div><div class="line">      <span class="keyword">case</span> .ribbon:</div><div class="line">        result = <span class="string">"<span class="subst">\(result)</span> + ribbon"</span></div><div class="line">      <span class="keyword">case</span> .delivery:</div><div class="line">        result = <span class="string">"<span class="subst">\(result)</span> + delivery"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> totalPrice: <span class="type">Float</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = wrappedPurchase.totalPrice</div><div class="line">    <span class="keyword">for</span> option <span class="keyword">in</span> options &#123;</div><div class="line">      <span class="keyword">switch</span> option &#123;</div><div class="line">      <span class="keyword">case</span> .giftWrap:</div><div class="line">        result += <span class="number">2</span></div><div class="line">      <span class="keyword">case</span> .ribbon:</div><div class="line">        result += <span class="number">1</span></div><div class="line">      <span class="keyword">case</span> .delivery:</div><div class="line">        result += <span class="number">5</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>main.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用合并装饰器实现：带礼品配送+礼品包装服务的12元太阳眼镜共19元，3折加8折后4.56元。</span></div><div class="line">account.addPurchase(<span class="type">EndOfLineDecorator</span>(purchase:</div><div class="line">  <span class="type">BlackFridayDecorator</span>(purchase:</div><div class="line">    <span class="type">GiftOptionDecorator</span>(purchase:</div><div class="line">      <span class="type">Purchase</span>(product: <span class="string">"Towel"</span>, price: <span class="number">12</span>),</div><div class="line">                        options: [<span class="type">GiftOptionDecorator</span>.<span class="type">Option</span>.giftWrap,</div><div class="line">                                  <span class="type">GiftOptionDecorator</span>.<span class="type">Option</span>.delivery]))))</div></pre></td></tr></table></figure>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Purchase Towel + giftwrap + delivery, Price ￥4.56</div><div class="line">...</div><div class="line">Towel + giftwrap + delivery has 2 discounts</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/02/21/58ac06eae716c.png" alt="完整项目 UML 图"></p>
<p>结果一样，但是实现方式简洁了不少。</p>
<p>合并装饰器的优点是能把类的核心职责和装饰功能区分开，去除相关类重复的装饰逻辑。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整的项目放在 <a href="https://github.com/Latias94/Decorator_in_Swift/tree/master/Decorator_end" target="_blank" rel="external">Decorator_end</a>。</p>
<p>如果我们错误地实现了装饰器模式，那么装饰器所做的修改会对所有对象产生影响，或者另应用多出一些和对象无关的功能。</p>
<p>如<a href="http://frankorz.com/2017/02/20/decorator-in-swift/#增加新功能">增加新功能</a>小节中所提及的，实现装饰器模式后，要注意装饰顺序，否则不同的折扣就应用到不同的范围上了。</p>
<p>重申一遍，装饰器模式是在<strong>已有功能</strong>上加<strong>更多</strong>功能的一种方式，不能修改原始类的已有功能和属性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/02/21/58ac04972e7f3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;阅读《大话设计模式》和《精通 Swift 设计模式》中的装饰器模式，本文为笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="设计模式" scheme="http://frankorz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IRB 中操作 MongoDB</title>
    <link href="http://frankorz.com/2017/02/16/mongodb_operate_in_irb/"/>
    <id>http://frankorz.com/2017/02/16/mongodb_operate_in_irb/</id>
    <published>2017-02-16T06:50:50.000Z</published>
    <updated>2017-02-16T10:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>又在 Coursera 里面选了门课坑自己</p>
</blockquote>
<p>最近又学了很多东西，其中记不住的做笔记记下来，这篇文章是为 Ruby on Rails 运用 MongoDB 做准备。</p>
<a id="more"></a>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>Mac 下安装 MongoDB 可以参考 <a href="http://hcysun.me/2015/11/21/Mac下使用brew安装mongodb/" target="_blank" rel="external">Mac下使用brew安装mongodb</a>。</p>
<p>启动数据库</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% mongod</div></pre></td></tr></table></figure>
<p>进入命令行模式</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% mongo</div></pre></td></tr></table></figure>
<h3 id="导入-MongoDB-提供的示例数据"><a href="#导入-MongoDB-提供的示例数据" class="headerlink" title="导入 MongoDB 提供的示例数据"></a>导入 MongoDB 提供的示例数据</h3><center><a id="download" href="http://media.mongodb.org/zips.json" target="_blank" rel="external"><i class="fa fa-download"></i><span> 示例数据下载</span><br></a></center>

<p>在 json 文件所在的文件夹下导入数据库。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% mongoimport --db <span class="built_in">test</span> --collection zips --drop --file zips.json</div></pre></td></tr></table></figure>
<h3 id="irb-Shell-中的一些基础操作"><a href="#irb-Shell-中的一些基础操作" class="headerlink" title="irb Shell 中的一些基础操作"></a>irb Shell 中的一些基础操作</h3><figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">irb</div><div class="line"><span class="meta">2.3.3 :001 &gt;</span> require <span class="string">'mongo'</span></div><div class="line"> =&gt; true</div><div class="line"><span class="meta">2.3.3 :002 &gt;</span> db = Mongo::Client.new(<span class="string">'mongodb://localhost:27017'</span>)</div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">651134</span> <span class="comment">#39047] DEBUG -- : MONGODB | Topology type 'unknown' initializing.</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">651314</span> <span class="comment">#39047] DEBUG -- : MONGODB | Server localhost:27017 initializing.</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654477</span> <span class="comment">#39047] DEBUG -- : MONGODB | Topology type 'unknown' changed to type 'single'.</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654581</span> <span class="comment">#39047] DEBUG -- : MONGODB | Server description for localhost:27017 changed from 'unknown' to 'standalone'.</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T00:</span><span class="number">06</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">654674</span> <span class="comment">#39047] DEBUG -- : MONGODB | There was a change in the members of the 'single' topology.</span></div><div class="line"> =&gt; #&lt;Mongo::Client:0x70333621287660 cluster=localhost:27017&gt;</div><div class="line"><span class="meta">2.3.3 :003 &gt;</span> db = db.use(<span class="string">'test'</span>)</div><div class="line"> =&gt; #&lt;Mongo::Client:0x70333622110940 cluster=localhost:27017&gt;</div><div class="line"><span class="meta">2.3.3 :004 &gt;</span> db.database.name</div><div class="line"> =&gt; <span class="string">"test"</span></div><div class="line"><span class="meta">2.3.3 :005 &gt;</span> db.database.collection_names</div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">11</span><span class="symbol">:</span><span class="number">07</span>.<span class="number">299786</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.listCollections | STARTED | &#123;"listCollections"=&gt;1, "cursor"=&gt;&#123;&#125;, "filter"=&gt;&#123;:name=&gt;&#123;"$not"=&gt;/system\.|\$/&#125;&#125;&#125;</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">11</span><span class="symbol">:</span><span class="number">07</span>.<span class="number">326259</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.listCollections | SUCCEEDED | 0.025663000000000002s</span></div><div class="line"> =&gt; [<span class="string">"zips"</span>]</div><div class="line"><span class="meta">2.3.3 :006 &gt;</span> db[<span class="symbol">:zips</span>].find.first</div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">12</span><span class="symbol">:</span><span class="number">51.044213</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.find | STARTED | &#123;"find"=&gt;"zips", "filter"=&gt;&#123;&#125;&#125;</span></div><div class="line">D, [<span class="number">2017</span>-<span class="number">02</span>-<span class="number">16</span><span class="symbol">T11:</span><span class="number">12</span><span class="symbol">:</span><span class="number">51.059517</span> <span class="comment">#39047] DEBUG -- : MONGODB | localhost:27017 | test.find | SUCCEEDED | 0.015213s</span></div><div class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div></pre></td></tr></table></figure>
<p>Win 系统下可以用 <code>system(&#39;cls&#39;)</code> 命令来清空 irb shell<br>Mac OS X 和 Linux 系统可以用 Ctrl + L 来清空屏幕</p>
<h3 id="精简输出"><a href="#精简输出" class="headerlink" title="精简输出"></a>精简输出</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2.3.3 :008 &gt; Mongo::Logger.logger.level = ::Logger::INFO</div><div class="line"> =&gt; 1</div><div class="line">2.3.3 :009 &gt; db[:zips].find.first</div><div class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-72.622739, 42.070206], <span class="string">"pop"</span>=&gt;15338, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Create-and-Read"><a href="#Create-and-Read" class="headerlink" title="Create and Read"></a>Create and Read</h2><p>介绍 CRUD 增查改删操作的前两步操作</p>
<h3 id="“C”reate"><a href="#“C”reate" class="headerlink" title="“C”reate"></a>“C”reate</h3><ul>
<li>Select a collection on the client and call <code>insert_one</code> or <code>insert_many</code></li>
<li><code>insert_one</code>: insert <strong>one</strong> document to collection</li>
<li><code>insert_many</code>: insert <strong>multiple</strong> documents to the collection</li>
</ul>
<h4 id="insert-one"><a href="#insert-one" class="headerlink" title="insert_one"></a>insert_one</h4><figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"100"</span>,<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span>], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>,<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>)</div></pre></td></tr></table></figure>
<p>用 find 和 count 来搜索数据</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).count</div></pre></td></tr></table></figure>
<p>插入一项数据，并且测试该项数据的存在</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :010 &gt;</span> db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"100"</span>,<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span>], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>,<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>)</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70333617635280 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :011 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).count</div><div class="line"> =&gt; <span class="number">1</span></div><div class="line"><span class="meta">2.3.3 :012 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"city01"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"100"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city01"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">76.059227</span>, <span class="number">39.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">4678</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</div></pre></td></tr></table></figure>
<h4 id="insert-many"><a href="#insert-many" class="headerlink" title="insert_many"></a>insert_many</h4><figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db[<span class="symbol">:zips</span>].insert_many([</div><div class="line">&#123; <span class="symbol">:_id</span> =&gt; <span class="string">"200"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>,</div><div class="line">  <span class="symbol">:loc</span> =&gt; [ -<span class="number">74.05922700000001</span>, <span class="number">37.564894</span> ], </div><div class="line">  <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;,</div><div class="line">&#123; <span class="symbol">:_id</span> =&gt; <span class="string">"201"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city03"</span>, </div><div class="line">  <span class="symbol">:loc</span> =&gt; [ -<span class="number">75.05922700000001</span>, <span class="number">35.564894</span> ],</div><div class="line">  <span class="symbol">:pop</span> =&gt; <span class="number">3000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<p>同时插入多项数据</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :013 &gt;</span> db[<span class="symbol">:zips</span>].insert_many([</div><div class="line"><span class="meta">2.3.3 :014 &gt;</span>       &#123; <span class="symbol">:_id</span> =&gt; <span class="string">"200"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>,</div><div class="line"><span class="meta">2.3.3 :015 &gt;</span>           <span class="symbol">:loc</span> =&gt; [ -<span class="number">74.05922700000001</span>, <span class="number">37.564894</span> ],</div><div class="line"><span class="meta">2.3.3 :016 &gt;</span>           <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;,</div><div class="line"><span class="meta">2.3.3 :017 &gt;</span>       &#123; <span class="symbol">:_id</span> =&gt; <span class="string">"201"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city03"</span>,</div><div class="line"><span class="meta">2.3.3 :018 &gt;</span>           <span class="symbol">:loc</span> =&gt; [ -<span class="number">75.05922700000001</span>, <span class="number">35.564894</span> ],</div><div class="line"><span class="meta">2.3.3 :019 &gt;</span>           <span class="symbol">:pop</span> =&gt; <span class="number">3000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"CA"</span> &#125;</div><div class="line"><span class="meta">2.3.3 :020?&gt;</span>     ])</div><div class="line"> =&gt; #&lt;Mongo::BulkWrite::Result:0x007fefa58136d8 @results=&#123;"n_inserted"=&gt;<span class="number">2</span>, <span class="string">"n"</span>=&gt;<span class="number">2</span>, <span class="string">"inserted_ids"</span>=&gt;[<span class="string">"200"</span>, <span class="string">"201"</span>]&#125;&gt;</div><div class="line"><span class="meta">2.3.3 :021 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="string">"city"</span> =&gt; <span class="string">"city02"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"200"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city02"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">74.059227</span>, <span class="number">37.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"CA"</span>&#125;]</div><div class="line"><span class="meta">2.3.3 :022 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="string">"city"</span> =&gt; <span class="string">"city03"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"201"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city03"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">75.059227</span>, <span class="number">35.564894</span>], <span class="string">"pop"</span>=&gt;<span class="number">3000</span>, <span class="string">"state"</span>=&gt;<span class="string">"CA"</span>&#125;]</div></pre></td></tr></table></figure>
<h3 id="“R”ead"><a href="#“R”ead" class="headerlink" title="“R”ead"></a>“R”ead</h3><ul>
<li>find command</li>
<li>find – returns a <strong>cursor</strong> object – allows us to <strong>iterate</strong> over the selected document(s)</li>
<li>Can be used with <strong>query</strong> criteria</li>
</ul>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># basic find</span></div><div class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"BALTIMORE"</span>)</div><div class="line"><span class="comment"># find first</span></div><div class="line">db[<span class="symbol">:zips</span>].find.first</div><div class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>).first</div><div class="line"><span class="comment"># find with double conditions and count them</span></div><div class="line">db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"NY"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"GERMANTOWN"</span>).count</div><div class="line"><span class="comment"># find distinct</span></div><div class="line">db[<span class="symbol">:zips</span>].find.distinct(<span class="symbol">:state</span>)</div></pre></td></tr></table></figure>
<p>使用 pp (pretty-printing) 来美化命令行的输出，并且找到符合条件的第一项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :035 &gt;</span> require <span class="string">'pp'</span></div><div class="line"> =&gt; true</div><div class="line"><span class="meta">2.3.3 :036 &gt;</span> pp db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">"NY"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"GERMANTOWN"</span>).first</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"12526"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"GERMANTOWN"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">73.862451</span>, <span class="number">42.1219</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4061</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"NY"</span>&#125;</div><div class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"12526"</span>, <span class="string">"city"</span>=&gt;<span class="string">"GERMANTOWN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">73.862451</span>, <span class="number">42.1219</span>], <span class="string">"pop"</span>=&gt;<span class="number">4061</span>, <span class="string">"state"</span>=&gt;<span class="string">"NY"</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="Cursor-Iterations"><a href="#Cursor-Iterations" class="headerlink" title="Cursor Iterations"></a>Cursor Iterations</h4><p>print all</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db[<span class="symbol">:zips</span>].find().each &#123; <span class="params">|r|</span> puts r &#125;</div></pre></td></tr></table></figure>
<p>pretty printing</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'pp'</span></div><div class="line">db[<span class="symbol">:zips</span>].find().each &#123; <span class="params">|r|</span> pp r &#125;</div></pre></td></tr></table></figure>
<h4 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h4><ul>
<li><strong>Limits</strong> the fields to return from all matching documents</li>
<li>We can <strong>specify</strong> inclusion or exclusion.</li>
<li>_id is automatically included by default.</li>
<li>true or 1: inclusive</li>
<li>false or 0: exclusive</li>
</ul>
<p>限制返回项的输出，例如只输出 <code>state</code> 属性，<code>_id</code> 是默认输出的，我们也可以取消输出 <code>_id</code> 项。</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :040 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>&#125;).projection(<span class="symbol">state:</span>true).first</div><div class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"20331"</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;</div><div class="line"><span class="meta">2.3.3 :041 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state</span> =&gt; <span class="string">"MD"</span>&#125;).projection(<span class="symbol">state:</span>true, <span class="symbol">_id:</span>false).first</div><div class="line"> =&gt; &#123;<span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><ul>
<li>Paging is accomplished with skip and limit</li>
<li><code>skip(n)</code> - tells mongodb that it should skip ‘n’ results</li>
<li><code>limit(n)</code> - instructs mongodb that it should limit the result length to ‘n’ results</li>
</ul>
<h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>限制搜索只有三项输出</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :044 &gt;</span> db[<span class="symbol">:zips</span>].find.limit(<span class="number">3</span>).each&#123; <span class="params">|r|</span> pp r&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">15338</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01002"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">36963</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01005"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4546</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333637935980 @view=#&lt;Mongo::Collection::View:0x70333616708020 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"limit"=&gt;<span class="number">3</span>&#125;&gt;&gt;<span class="symbol">:each&gt;</span></div></pre></td></tr></table></figure>
<h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p>跳过前三项，显示后三项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :045 &gt;</span> db[<span class="symbol">:zips</span>].find.skip(<span class="number">3</span>).limit(<span class="number">3</span>).each &#123; <span class="params">|r|</span> pp r&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01007"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BELCHERTOWN"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.410953</span>, <span class="number">42.275103</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">10579</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01008"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BLANDFORD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.936114</span>, <span class="number">42.182949</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">1240</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01010"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BRIMFIELD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.188455</span>, <span class="number">42.116543</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3706</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333639364960 @view=#&lt;Mongo::Collection::View:0x70333639398700 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"skip"=&gt;<span class="number">3</span>, <span class="string">"limit"</span>=&gt;<span class="number">3</span>&#125;&gt;&gt;<span class="symbol">:each&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><p>sort - Specifies the order in which the query returns matching documents.</p>
<p><code>{ field: value }</code></p>
<p>1 for Ascending, -1 for Descending.</p>
<p>搜索后以城市名升序输出，若改为<code>{:city =&gt; -1 }</code>则为逆序输出。</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :046 &gt;</span> db[<span class="symbol">:zips</span>].find.limit(<span class="number">3</span>).sort(&#123;<span class="symbol">:city</span> =&gt; <span class="number">1</span> &#125;).each &#123; <span class="params">|r|</span> pp r&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"42601"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AARON"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">85.199114</span>, <span class="number">36.812827</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">270</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"KY"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"16820"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"AARONSBURG"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">77.387977</span>, <span class="number">40.876944</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">100</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"PA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"31794"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"ABAC"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">83.498867</span>, <span class="number">31.451722</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">27906</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"GA"</span>&#125;</div><div class="line"> =&gt; #&lt;Enumerator: #&lt;Mongo::Cursor:0x70333639793460 @view=#&lt;Mongo::Collection::View:0x70333626982300 namespace='test.zips' @filter=&#123;&#125; @options=&#123;"limit"=&gt;<span class="number">3</span>, <span class="string">"sort"</span>=&gt;&#123;<span class="string">"city"</span>=&gt;<span class="number">1</span>&#125;&#125;&gt;&gt;<span class="symbol">:each&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Advanced-Find"><a href="#Advanced-Find" class="headerlink" title="Advanced Find"></a>Advanced Find</h2><p>Find By Criteria</p>
<ul>
<li>‘lt’ &amp; ‘gt’</li>
<li>Evaluations</li>
<li>Regex</li>
<li>Exists</li>
<li>Not</li>
<li>Type</li>
</ul>
<h3 id="lt-and-gt"><a href="#lt-and-gt" class="headerlink" title="lt and gt"></a>lt and gt</h3><p>lt -&gt; less than<br>gt -&gt; great than</p>
<p>找到城市名比「P」小的，且比「B」大的三项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :049 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$lt =&gt; <span class="string">'P'</span>, <span class="symbol">:</span>$gt =&gt; <span class="string">'B'</span>&#125;).limit(<span class="number">3</span>).to_a.each &#123; <span class="params">|r|</span> pp r&#125;;nil</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01002"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">36963</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01005"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">4546</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01007"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"BELCHERTOWN"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.410953</span>, <span class="number">42.275103</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">10579</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">=&gt; nil</div></pre></td></tr></table></figure>
<p>小 Tips：<br>我们已经用 pp 来格式化输出了，可以在语句结尾加<code>;nil</code>来精简额外的输出，如上所示。</p>
<h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>Regex – supports regular expression capabilities for pattern matching <strong>strings</strong> in queries.</p>
<p>用正则表达式匹配城市名含有 X 的项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :052 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$regex =&gt; <span class="string">'X'</span>&#125;).limit(<span class="number">3</span>).each &#123;<span class="params">|r|</span> pp r&#125;;nil</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01240"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"LENOX"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">73.271322</span>, <span class="number">42.364241</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">5001</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01537"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"NORTH OXFORD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">71.885953</span>, <span class="number">42.16549</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3031</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"_id"</span>=&gt;<span class="string">"01540"</span>,</div><div class="line"> <span class="string">"city"</span>=&gt;<span class="string">"OXFORD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">71.868677</span>, <span class="number">42.11285</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">9557</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"> =&gt; nil</div></pre></td></tr></table></figure>
<p><code>X&amp;</code> :Displays cities ending with X<br><code>^X</code> :Displays cities starting with X<br><code>^[A- E]</code> :Displays cities that match the regex (A to E)</p>
<h3 id="exist"><a href="#exist" class="headerlink" title="$exist"></a>$exist</h3><p>Will check to see of the document exists when the boolean is <strong>true</strong></p>
<p>mongo 中的 documents 可能会没有一些 values，我们可以用<code>$exist</code>来找出存在相关 values 的项。</p>
<p>找出 <code>:city</code> 属性不为空的三项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :053 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; &#123;<span class="symbol">:</span>$exists =&gt; true&#125;).projection(&#123;<span class="symbol">:_id</span> =&gt; false&#125;).limit(<span class="number">3</span>).to_a.each &#123;<span class="params">|r|</span> pp r&#125;</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>], <span class="string">"pop"</span>=&gt;<span class="number">36963</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"> =&gt; [&#123;<span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;, &#123;<span class="string">"city"</span>=&gt;<span class="string">"CUSHMAN"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.51565</span>, <span class="number">42.377017</span>], <span class="string">"pop"</span>=&gt;<span class="number">36963</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;, &#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;]</div></pre></td></tr></table></figure>
<h3 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h3><p><code>$not</code> performs a logical NOT operation<br>Selects the documents that do not match the <operator- expression=""></operator-></p>
<p>找到 :pop 属性不大于9500的项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :012 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:pop</span> =&gt;&#123;<span class="string">'$not'</span> =&gt; &#123;<span class="string">'$gt'</span> =&gt; <span class="number">9500</span>&#125;&#125;).projection(&#123;<span class="symbol">_id:</span>false&#125;).limit(<span class="number">3</span>).to_a.each &#123;<span class="params">|r|</span> pp r&#125;;nil</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BARRE"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.108354</span>, <span class="number">42.409698</span>], <span class="string">"pop"</span>=&gt;<span class="number">4546</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BLANDFORD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.936114</span>, <span class="number">42.182949</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">1240</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line">&#123;<span class="string">"city"</span>=&gt;<span class="string">"BRIMFIELD"</span>,</div><div class="line"> <span class="string">"loc"</span>=&gt;[-<span class="number">72.188455</span>, <span class="number">42.116543</span>],</div><div class="line"> <span class="string">"pop"</span>=&gt;<span class="number">3706</span>,</div><div class="line"> <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"> =&gt; nil</div></pre></td></tr></table></figure>
<h3 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h3><p><code>$type</code> - selects the documents where the value of the field is an instance of the specified numeric BSON type.</p>
<p>简而言之，<code>$type</code>的作用就是验证相关属性的类型。这在我们不知道数据类型的时候很好用，我们可以在 <a href="https://docs.mongodb.com/manual/reference/bson-types/" target="_blank" rel="external">BSON Types</a> 页面中查看各数字代表着什么，例如 1 代表 Double 类型，2 代表 String 类型。</p>
<p>在下面示例中，<code>:state</code> 属性应是 String 类型，所以 <code>:&amp;type =&gt; 2</code> 会有结果。<code>:&amp;type =&gt; 1</code>没有结果，是因为 <code>:state</code> 不是 Double 类型。</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :014 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state=&gt;</span> &#123;<span class="symbol">:</span>$type =&gt; <span class="number">2</span>&#125;&#125;).first</div><div class="line"> =&gt; &#123;<span class="string">"_id"</span>=&gt;<span class="string">"01001"</span>, <span class="string">"city"</span>=&gt;<span class="string">"AGAWAM"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">72.622739</span>, <span class="number">42.070206</span>], <span class="string">"pop"</span>=&gt;<span class="number">15338</span>, <span class="string">"state"</span>=&gt;<span class="string">"MA"</span>&#125;</div><div class="line"><span class="meta">2.3.3 :015 &gt;</span> db[<span class="symbol">:zips</span>].find(&#123;<span class="symbol">:state=&gt;</span> &#123;<span class="symbol">:</span>$type =&gt; <span class="number">1</span>&#125;&#125;).first</div><div class="line"> =&gt; nil</div></pre></td></tr></table></figure>
<h2 id="Replace-Update-and-Delete"><a href="#Replace-Update-and-Delete" class="headerlink" title="Replace, Update and Delete"></a>Replace, Update and Delete</h2><p>介绍 Replace 和 CRUD 的后两项操作</p>
<ul>
<li>replace_one</li>
<li>update_one</li>
<li>update_many</li>
<li>delete_one</li>
<li>delete_many</li>
<li>upsert</li>
</ul>
<h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h3><h4 id="replace-one"><a href="#replace-one" class="headerlink" title="replace_one"></a>replace_one</h4><p>replace_one – <strong>Replace</strong> a document in the collection according to the <strong>specified parameters</strong>.</p>
<p>替换<code>:_id =&gt; &quot;101&quot;</code>项的所有信息</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :017 &gt;</span> db[<span class="symbol">:zips</span>].insert_one(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"citytemp"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">76.05922700000001</span>, <span class="number">39.564894</span> ], <span class="symbol">:pop</span> =&gt; <span class="number">4678</span>, <span class="symbol">:state</span> =&gt; <span class="string">"MD"</span> )</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374694180 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :018 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt;<span class="string">"101"</span>).replace_one(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>, <span class="symbol">:city</span> =&gt; <span class="string">"city02"</span>, <span class="symbol">:loc</span> =&gt; [ -<span class="number">78.22</span>, <span class="number">36.22</span> ], <span class="symbol">:pop</span> =&gt; <span class="number">2000</span>, <span class="symbol">:state</span> =&gt; <span class="string">"MD"</span> )</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70126384942080 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :019 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"city02"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">78.22</span>, <span class="number">36.22</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</div></pre></td></tr></table></figure>
<h3 id="“U”pdate"><a href="#“U”pdate" class="headerlink" title="“U”pdate"></a>“U”pdate</h3><h4 id="update-one"><a href="#update-one" class="headerlink" title="update_one"></a>update_one</h4><p>update_one – <strong>Update</strong> a <strong>single</strong> document in the collection according to the <strong>specified arguments</strong>.</p>
<p>只更新单项中的属性，例如改城市名或同时更改多个属性</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :022 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).update_one(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"name2"</span>&#125;)</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374531300 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :023 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"name2"</span>, <span class="string">"loc"</span>=&gt;[-<span class="number">78.22</span>, <span class="number">36.22</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"MD"</span>&#125;]</div><div class="line"><span class="meta">2.3.3 :024 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).update_one(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"name3"</span>, <span class="symbol">:loc</span> =&gt; [ <span class="number">11.11</span>, <span class="number">11.11</span> ]&#125;)</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70126373842240 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :025 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:_id</span> =&gt; <span class="string">"101"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;<span class="string">"101"</span>, <span class="string">"city"</span>=&gt;<span class="string">"name3"</span>, <span class="string">"loc"</span>=&gt;[<span class="number">11.11</span>, <span class="number">11.11</span>], <span class="string">"pop"</span>=&gt;<span class="number">2000</span>, <span class="string">"state"</span>=&gt;<span class="string">"XX"</span>&#125;]</div></pre></td></tr></table></figure>
<h4 id="update-many"><a href="#update-many" class="headerlink" title="update_many"></a>update_many</h4><p>update_many – <strong>Updates single or multiple</strong> documents in the collection according to the <strong>specified arguments</strong>.</p>
<p>更新多项属性，例如把所有州名为<code>MD</code>的项中的州名更改为<code>XX</code></p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :026 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).count</div><div class="line"> =&gt; <span class="number">422</span></div><div class="line"><span class="meta">2.3.3 :027 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).update_many(<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span>&#125;)</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70126374300980 documents=[&#123;"n"=&gt;<span class="number">422</span>, <span class="string">"nModified"</span>=&gt;<span class="number">422</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :028 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'MD'</span>).count</div><div class="line"> =&gt; <span class="number">0</span></div><div class="line"><span class="meta">2.3.3 :029 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span>).count</div><div class="line"> =&gt; <span class="number">422</span></div></pre></td></tr></table></figure>
<h3 id="“D”elete"><a href="#“D”elete" class="headerlink" title="“D”elete"></a>“D”elete</h3><h4 id="delete-one"><a href="#delete-one" class="headerlink" title="delete_one"></a>delete_one</h4><p>delete_one – will <strong>delete</strong> a <strong>single</strong> document in the collection according to the <strong>specified arguments</strong>.</p>
<p>删除之前添加的城市名为 <code>name3</code> 的项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :005 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).count</div><div class="line"> =&gt; <span class="number">1</span></div><div class="line"><span class="meta">2.3.3 :006 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).delete_one()</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70293222869840 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :007 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">'name3'</span>).count</div><div class="line"> =&gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<h4 id="delete-many"><a href="#delete-many" class="headerlink" title="delete_many"></a>delete_many</h4><p>delete_many – <strong>deletes single or multiple</strong> documents in the collection according to the <strong>specified arguments</strong>.</p>
<p>删除所有州名为<code>XX</code>的项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :009 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).count</div><div class="line"> =&gt; <span class="number">421</span></div><div class="line"><span class="meta">2.3.3 :010 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).delete_many()</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70293222986380 documents=[&#123;"n"=&gt;<span class="number">421</span>, <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :011 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:state</span> =&gt; <span class="string">'XX'</span> ).count</div><div class="line"> =&gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h3><p>If upsert is <strong>true</strong> and <strong>no</strong> document matches the query criteria, update() inserts a <strong>single</strong> document.</p>
<p>如果把 upsert （更新插入）设为 true，即使没有找到相关的项（条件不满足），也会执行 <code>update_one</code>来创建一个项</p>
<figure class="highlight irb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">2.3.3 :014 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE1"</span>).count</div><div class="line"> =&gt; <span class="number">0</span></div><div class="line"><span class="meta">2.3.3 :015 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).count</div><div class="line"> =&gt; <span class="number">0</span></div><div class="line"><span class="meta">2.3.3 :016 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt;<span class="string">"ODENVILLE1"</span>).update_one(&#123;<span class="symbol">:</span>$set =&gt; &#123;<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>&#125;&#125;, <span class="symbol">:upsert</span> =&gt; true)</div><div class="line"> =&gt; #&lt;Mongo::Operation::Result:70293217700720 documents=[&#123;"n"=&gt;<span class="number">1</span>, <span class="string">"nModified"</span>=&gt;<span class="number">0</span>, <span class="string">"upserted"</span>=&gt;[&#123;<span class="string">"index"</span>=&gt;<span class="number">0</span>, <span class="string">"_id"</span>=&gt;BSON::ObjectId(<span class="string">'58a5746b62b11bdc607226a8'</span>)&#125;], <span class="string">"ok"</span>=&gt;<span class="number">1.0</span>&#125;]&gt;</div><div class="line"><span class="meta">2.3.3 :017 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE1"</span>).count</div><div class="line"> =&gt; <span class="number">0</span></div><div class="line"><span class="meta">2.3.3 :018 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).count</div><div class="line"> =&gt; <span class="number">1</span></div><div class="line"><span class="meta">2.3.3 :019 &gt;</span> db[<span class="symbol">:zips</span>].find(<span class="symbol">:city</span> =&gt; <span class="string">"ODENVILLE2"</span>).to_a</div><div class="line"> =&gt; [&#123;<span class="string">"_id"</span>=&gt;BSON::ObjectId(<span class="string">'58a5746b62b11bdc607226a8'</span>), <span class="string">"city"</span>=&gt;<span class="string">"ODENVILLE2"</span>&#125;]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;又在 Coursera 里面选了门课坑自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近又学了很多东西，其中记不住的做笔记记下来，这篇文章是为 Ruby on Rails 运用 MongoDB 做准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://frankorz.com/tags/MongoDB/"/>
    
      <category term="Ruby" scheme="http://frankorz.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>iOS 动画笔记</title>
    <link href="http://frankorz.com/2017/01/22/ios-animations-note/"/>
    <id>http://frankorz.com/2017/01/22/ios-animations-note/</id>
    <published>2017-01-22T03:30:10.000Z</published>
    <updated>2017-02-23T09:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><em>大坑未填完，发布下博文降低罪恶感..</em></p>
<blockquote>
<p>人生的意义就是不断地挖坑，并不断地去填补。<br>——猫冬</p>
</blockquote>
<p>本文为《iOS Animations by Tutorials》笔记上篇，代码用 swift 3 编写。</p>
<a id="more"></a>
<h2 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h2><h3 id="简单的动画"><a href="#简单的动画" class="headerlink" title="简单的动画"></a>简单的动画</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> heading: <span class="type">UILabel</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</div><div class="line">      <span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.3</span>, options: [], animations: &#123;</div><div class="line">    <span class="comment">// 动画后位置 </span></div><div class="line">    <span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width</div><div class="line">  &#125;, completion: <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">  <span class="comment">// 动画前位置</span></div><div class="line">  heading.center.x -= view.bounds.width</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段代码的作用是把在屏幕左边的标题通过动画移动到相应位置。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddb3f39.jpg" alt=""></p>
<p>这里使用了动画方法：<code>animate(withDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:)</code></p>
<ul>
<li>withDuration: 动画持续时间。</li>
<li>delay: 动画开始前的延迟时间，值为0时动画效果立刻显示。</li>
<li>options: 表现动画的一系列方式，如淡入淡出等，可以直接用[]表示无动画选项。</li>
<li>animations: 代码块中提供你的动画效果，注意代码块中无参数和返回值。</li>
<li>completion: 动画执行后要干什么。</li>
</ul>
<h3 id="位置和大小"><a href="#位置和大小" class="headerlink" title="位置和大小"></a>位置和大小</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc0e47.jpg" alt=""></p>
<p>我们可以通过改变一个 view 的位置和 frame 来实现放大、收缩或者移动效果。</p>
<ul>
<li><strong>frame</strong>: 该 view 在父view坐标系统中的位置和大小。</li>
<li><strong>bounds</strong>: 该 view 在本地坐标系统中的位置和大小。</li>
<li><strong>center</strong>: 想要移动 view 到一个新位置时改变该属性。</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc1903.jpg" alt=""></p>
<p>关于frame 和 bounds 的更详细的区别可以参考<a href="http://blog.csdn.net/mad1989/article/details/8711697" target="_blank" rel="external">ios view的frame和bounds之区别（位置和大小）</a>。</p>
<h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddc6124.jpg" alt=""></p>
<p>我们可以通过改变背景色或透明度来改变 view 的外观。</p>
<ul>
<li><strong>backgroundColor</strong>: 改变背景颜色</li>
<li><strong>alpha</strong>: 改变该属性来创造淡入淡出效果</li>
</ul>
<h3 id="形变"><a href="#形变" class="headerlink" title="形变"></a>形变</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddbab3c.jpg" alt=""></p>
<ul>
<li><strong>transform</strong>: 在动画块中改变该属性可以去使 view 旋转、改变 view 大小或位置。</li>
</ul>
<h2 id="动画选项"><a href="#动画选项" class="headerlink" title="动画选项"></a>动画选项</h2><p>options 能让你知道 UIKit 是怎么创建我们的动画的，下面是一系列声明在 UIViewAnimationOptions 集中的动画选项，可以以不同形式来结合，并在我们的动画中使用。</p>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><ul>
<li>.repeat: 这选项能让你的动画循环起来。</li>
<li>.autoreverse: 这选项只能和 <code>.repeat</code> 放在一起使用，作用是重复播放动画，然后逆向播放动画。</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fddb971c.gif" alt="repeat and .autoreverse"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.4</span>,</div><div class="line">               options: [.<span class="keyword">repeat</span>, .autoreverse], animations: &#123;</div><div class="line">  <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width</div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h3 id="动画缓动"><a href="#动画缓动" class="headerlink" title="动画缓动"></a>动画缓动</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde014a0.jpg" alt=""></p>
<p>就像火车出站的时候会加速，到站时会减速一样，我们也可以给动画加上缓入缓出效果。</p>
<ul>
<li>.curveLinear: 没有加速也没有减速。</li>
<li>.curveEaseIn: 在动画开始时加速。</li>
<li>.curveEaseOut: 在动画结束时减速。</li>
<li>.curveEaseInOut: 动画开始时加速，结束时减速。</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7dfc4a.gif" alt=".curveEaseInOut"></p>
<h2 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h2><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde2ce7d.jpg" alt=""></p>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fde788e9.jpg" alt=""></p>
<p>像弹簧一样，动画也能实现这种来回弹动，最终停止在 point B 的效果。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line"> </div><div class="line">  loginButton.center.y += <span class="number">30.0</span></div><div class="line">  loginButton.alpha = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</div><div class="line"></div><div class="line">  <span class="type">UIView</span>.animate(withDuration: <span class="number">0.5</span>, delay: <span class="number">0.5</span>, usingSpringWithDamping: <span class="number">0.5</span>, </div><div class="line">    initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123; </div><div class="line">    <span class="keyword">self</span>.loginButton.center.y -= <span class="number">30.0</span></div><div class="line">    <span class="keyword">self</span>.loginButton.alpha = <span class="number">1.0</span></div><div class="line">  &#125;, completion: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe869a3a.gif" alt="spring"></p>
<p>这里用了新的动画方法：<code>animate(withDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:)</code></p>
<ul>
<li>usingSpringWithDamping: 控制阻尼系数，接受值在0.0和1.0之间，靠近0.0能创建一个有弹性的动画，靠近1.0能创建一个僵硬的效果。</li>
<li>initialSpringVelocity: 控制动画的速率，表示在一秒中动画所走的距离占总距离的比率。例如，动画中的距离为200 points，我们想达到100 pt/s的速度，则用0.5做值。数值越大移动越快。</li>
</ul>
<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>当你想通过动画来增加一个 view 或移除一个 view 的时候，你仍然可以使用前面提到的方法，这里将会告诉你如何使用过渡（transitions）来动画显示 view 中一系列的改变。</p>
<p>Transitions are predefined animations you can apply to views. These predefined animations don’t attempt to interpolate between the start and end states of your view. Instead, you’ll design the animations so that the various changes in state appear natural.</p>
<h3 id="增加一个-view"><a href="#增加一个-view" class="headerlink" title="增加一个 view"></a>增加一个 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fdf00ba2.jpg" alt=""></p>
<p>和前面一样，我们也是调用类似的方法，不同的是这次将会选择一个预先定义好的过渡效果并在 <strong>animation container view</strong> 中显示动画。</p>
<p>过渡通过 container view 来显示，在动画播放的时候其他新的 view 将会作为子view加入其中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animationContainerView: <span class="type">UIView</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123; </div><div class="line">  <span class="comment">//创建 animation container </span></div><div class="line">  animationContainerView = <span class="type">UIView</span>(frame: view.bounds)</div><div class="line">  animationContainerView.frame = view.bounds</div><div class="line">  view.addSubview(animationContainerView!)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123; </div><div class="line">  <span class="keyword">super</span>.viewDidAppear(animated)</div><div class="line">  </div><div class="line">  <span class="comment">// 创建新的 view </span></div><div class="line">  <span class="keyword">let</span> newView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: <span class="string">"banner"</span>)!)</div><div class="line">  newView.center = animationContainerView.center</div><div class="line">  </div><div class="line">  <span class="comment">// 通过过渡把新的 view 加入其中</span></div><div class="line">  <span class="type">UIView</span>.transition(with: animationContainerView, duration: <span class="number">0.33</span>,</div><div class="line">                    options: [.curveEaseOut, .transitionFlipFromBottom],</div><div class="line">                    animations: &#123;</div><div class="line">                      <span class="keyword">self</span>.animationContainerView.addSubview(newView)</div><div class="line">  &#125;, completion: <span class="literal">nil</span> )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码可以看到，过渡的方法比之前看过的方法多了一个参数「view」，就是指要把过渡效果加入其中的 container view。另外未见过的还有<code>.transitionFlipFromBottom</code>，这也是定义好的过渡选项，显示的是一个底部翻转的效果，下面还列出所有的过渡动画选项。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.transitionFlipFromLeft </div><div class="line">.transitionFlipFromRight </div><div class="line">.transitionCurlUp </div><div class="line">.transitionCurlDown </div><div class="line">.transitionCrossDissolve </div><div class="line">.transitionFlipFromTop </div><div class="line">.transitionFlipFromBottom</div></pre></td></tr></table></figure>
<h3 id="移除-view"><a href="#移除-view" class="headerlink" title="移除 view"></a>移除 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7e37f4.jpg" alt=""></p>
<p>代码和增加 view 类似，不过这次调用的是<code>removeFromSuperview()</code>方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.transition(with: animationContainerView, duration: <span class="number">0.33</span>,</div><div class="line">                  options: [.curveEaseOut, .transitionFlipFromBottom],</div><div class="line">                  animations: &#123;</div><div class="line">                    <span class="keyword">self</span>.newView.removeFromSuperview()</div><div class="line">&#125;, completion: <span class="literal">nil</span> )</div></pre></td></tr></table></figure>
<h3 id="隐藏-显示-view"><a href="#隐藏-显示-view" class="headerlink" title="隐藏/显示 view"></a>隐藏/显示 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7c75a2.jpg" alt=""></p>
<p>到目前，我们只知道过渡效果要区分 view 的层次，这也是为什么我们需要一个 container view 的原因。对于隐藏或显示一个 view 的时候，我们可以通过用要隐藏或显示的 view 来当做动画容器（animation container）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过过渡隐藏 newView，</span></div><div class="line"><span class="type">UIView</span>.transition(with: <span class="keyword">self</span>.newView, duration: <span class="number">0.33</span>,</div><div class="line">                  options: [.curveEaseOut, .transitionFlipFromBottom],</div><div class="line">                  animations: &#123;</div><div class="line">                    <span class="keyword">self</span>.newView.isHidden = <span class="literal">true</span></div><div class="line">&#125;, completion: <span class="literal">nil</span> )</div></pre></td></tr></table></figure>
<h3 id="用一个-view-来取代另一个-view"><a href="#用一个-view-来取代另一个-view" class="headerlink" title="用一个 view 来取代另一个 view"></a>用一个 view 来取代另一个 view</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7cf2bb.jpg" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从 oldView 变为 newView</span></div><div class="line"><span class="type">UIView</span>.transition(from: oldView, to: newView, duration: <span class="number">0.33</span>, </div><div class="line">  options: .transitionFlipFromTop, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h2 id="更酷的动画"><a href="#更酷的动画" class="headerlink" title="更酷的动画"></a>更酷的动画</h2><ol>
<li><strong>Crossfade animation:</strong> 淡入淡出动画，把一张图片与另一张图片混合的动画效果。</li>
<li><strong>Cube transition animation:</strong> 立方体过渡动画，创建伪 3D 的过渡效果。</li>
<li><strong>Fade and bounce transition:</strong> 淡入淡出和反弹过渡，与简单动画的结合有一些不同。</li>
</ol>
<h3 id="Crossfade-animation"><a href="#Crossfade-animation" class="headerlink" title="Crossfade animation"></a>Crossfade animation</h3><p><img src="https://ooo.0o0.ooo/2017/01/23/58861fe7e4ebb.jpg" alt=""></p>
<p>如果需要把一张图片直接变成另外一张图片，之前的淡入淡出就不太好用了，因为能看到中间的淡入淡出效果。</p>
<hr>
<p>楼主的坑已经不想填了，看到这的朋友可以参考：<br><a href="https://zsisme.gitbooks.io/ios-/content/" target="_blank" rel="external">iOS 核心动画高级技巧</a> ：<a href="http://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques" target="_blank" rel="external">iOS Core Animation: Advanced Techniques</a> 的译本，由 OC 编写 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;大坑未填完，发布下博文降低罪恶感..&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生的意义就是不断地挖坑，并不断地去填补。&lt;br&gt;——猫冬&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文为《iOS Animations by Tutorials》笔记上篇，代码用 swift 3 编写。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://frankorz.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://frankorz.com/tags/iOS/"/>
    
      <category term="动画" scheme="http://frankorz.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Core Data 笔记[上篇]</title>
    <link href="http://frankorz.com/2017/01/16/core-data-note-1/"/>
    <id>http://frankorz.com/2017/01/16/core-data-note-1/</id>
    <published>2017-01-16T09:54:55.000Z</published>
    <updated>2017-02-23T09:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>Core Data 应该被当成一个对象图管理系统来正确使用，得益于其内建的缓存和对象管理机制，它在很多方面比其他数据库实际上反而更快。抽象级别更高的 API 可以让你专注于优化 APP 里关键部分的性能，而不是从头一开始来实现如何持久化。</p>
<footer><strong>《Core Data》</strong><cite>ObjC中国</cite></footer></blockquote>
<p>本文为《Core Data by Tutorials》笔记上篇，代码用 swift 3 编写。等这系列写完会根据 ObjC 的《Core Data》 补充笔记，另外也推荐斯坦福课程 <a href="https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961" target="_blank" rel="external">Developing iOS 9 Apps with Swift</a> 中的第十课《Core Data》，用来大致地学习下 Core Data 重要的知识点，本文也有部分笔记参考了这课程。</p>
<p>下面的代码只给其中关键部分，请指教。由于笔记是给自己看的，部分地方可能会跳跃性比较大。</p>
<a id="more"></a>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>Core Data 是 Apple 为 iOS、OS X、watchOS 和 tvOS 而设计的对象图管理(object graph management)和数据持久化框架。</p>
<ul>
<li><strong>entity</strong> 是 Core Data 中的类定义，也称为「实体」。例如一个雇员或一个公司。在一个关系型数据库中，一个 entity 类似于一张表。</li>
<li><strong>attribute</strong> 是跟一个特定 entity 相关的一系列信息，例如一个 Employee entity 可以有属性如：雇员的名字，地址和薪水。在一个数据库中，一个 attribute 类似于一个表中特定的 field。</li>
<li><strong>relationship</strong> 是很多 entities 之间的连接，也称为「关系」。在 Core Data 中，两个 entities 之间的关系叫做<strong>一对一关系</strong>，一个和多个 entities 之间则称为<strong>一对多关系</strong>。例如，一个管理者和一组雇员可以有一个<strong>一对多关系</strong>，然而一个单独的雇员与他的上司会有一个<strong>一对一关系</strong>。</li>
</ul>
<h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(name: String)</span></span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">let</span> managedContext = appDelegate.persistentContainer.viewContext</div><div class="line">  </div><div class="line">  <span class="comment">// 2</span></div><div class="line">  <span class="keyword">let</span> entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: managedContext)!</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> person = <span class="type">NSManagedObject</span>(entity: entity, insertInto: managedContext)</div><div class="line">  </div><div class="line">  <span class="comment">// 3</span></div><div class="line">  person.setValue(name, forKey: <span class="string">"name"</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 4</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> managedContext.save()</div><div class="line">    people.append(person)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not save. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>从 Core Data 中保存或恢复数据之前，都要用到<code>NSManagedObjectContext</code>。managed object context 就像一个内存「暂存器」用来处理 managed objects。</p>
<p> 把一个新的 managed object 加进一个 managed object context，如果满意这些修改，我们可以直接在 managed object context 中「commit」 这些修改然后保存起来。</p>
</li>
<li><p>创建一个新的 managedObject 然后保存到 context 中。</p>
</li>
<li>保存键值对。</li>
<li>commit 改动。</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Save test bow tie</span></div><div class="line">  <span class="keyword">let</span> bowtie = <span class="type">NSEntityDescription</span>.insertNewObject(forEntityName: <span class="string">"Bowtie"</span>, into: <span class="keyword">self</span>.persistentContainer.viewContext) <span class="keyword">as</span>! <span class="type">Bowtie</span></div><div class="line">  bowtie.name = <span class="string">"My bow tie"</span></div><div class="line">  bowtie.lastWorn = <span class="type">NSDate</span>()</div><div class="line">  </div><div class="line">  <span class="comment">// Retrieve test bow tie</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">    <span class="keyword">let</span> ties = <span class="keyword">try</span> <span class="keyword">self</span>.persistentContainer.viewContext.fetch(request)</div><div class="line">    <span class="keyword">let</span> sample = ties.first</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name: <span class="subst">\(sample?.name)</span>, Worn: <span class="subst">\(sample?.lastWorn)</span>"</span>)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 viewDidLoad() 之前执行</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">  </div><div class="line">  <span class="comment">// 1 从 application delegate 中获取它 persistent container 的引用并得到 NSManagedObjectContext</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> managedContext = appDelegate.persistentContainer.viewContext</div><div class="line">  </div><div class="line">  <span class="comment">// 2 FetchRequest 可以有不同方式去获取数据</span></div><div class="line">  <span class="keyword">let</span> fetchRequest = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSManagedObject</span>&gt;(entityName: <span class="string">"Person"</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 3 获取数据</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    people = <span class="keyword">try</span> managedContext.fetch(fetchRequest)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NSManagedObject-子类"><a href="#NSManagedObject-子类" class="headerlink" title="NSManagedObject 子类"></a>NSManagedObject 子类</h3><p>之前通过获取应用 delegate 的 managed object context 来获得访问权限，现在可以把 managed object context 当做一个属性在类和类之间传送。<br>这样 ViewController 可以不需要知道它来自哪就使用它，链式传递 context，这样能使代码变得简洁。</p>
<h3 id="传递-viewContext"><a href="#传递-viewContext" class="headerlink" title="传递 viewContext"></a>传递 viewContext</h3><p>AppDelegate.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> window: <span class="type">UIWindow</span>?</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> vc = window?.rootViewController <span class="keyword">as</span>? <span class="type">ViewController</span> <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  vc.managedContext = persistentContainer.viewContext</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> managedContext: <span class="type">NSManagedObjectContext</span>!</div><div class="line"></div><div class="line"><span class="comment">// MARK: - View Life Cycle</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  </div><div class="line">  <span class="comment">// 1 导入 plist 数据</span></div><div class="line">  insertSampleData()</div><div class="line">  </div><div class="line">  <span class="comment">// 2 搜索条件</span></div><div class="line">  <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">  <span class="keyword">let</span> firstTitle = segmentedControl.titleForSegment(at: <span class="number">0</span>)!</div><div class="line">  request.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"searchKey == %@"</span>, firstTitle)</div><div class="line">  </div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">// 3 获取数据 [Bowtie]</span></div><div class="line">    <span class="keyword">let</span> results = <span class="keyword">try</span> managedContext.fetch(request)</div><div class="line">    </div><div class="line">    <span class="comment">// 4 展示数据</span></div><div class="line">    populate(bowtie: results.first!)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Counld not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c02140a.jpg" alt=""></p>
<h2 id="Core-Data-Stack"><a href="#Core-Data-Stack" class="headerlink" title="Core Data Stack"></a>Core Data Stack</h2><p>栈(Stack)由四个 Core Data 类组成：</p>
<ul>
<li>NSManagedObjectModel</li>
<li>NSPersistentStore</li>
<li>NSPersistentStoreCoordinator</li>
<li>NSManagedObjectContext</li>
</ul>
<p>清楚栈的工作是很有必要的，例如要从旧的数据库迁移数据。</p>
<p>下面是 objc 的《Core Data》中的一幅图，定义的有些不一样：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/17/587e16f03b676.jpg" alt=""></p>
<h3 id="The-persistent-store"><a href="#The-persistent-store" class="headerlink" title="The persistent store"></a>The persistent store</h3><ol>
<li><strong>NSQLiteStoreType</strong> 依靠一个 SQLite 数据库，这是仅有的 non-atomic 的 Core Data 支持的，轻量级、有效率的储存。通常 Xcode 的 Core Data 默认模板就是用这个。</li>
<li><strong>NSXMLStoreType</strong> 依靠一个 XML 文件，这让它有很好的可读性。store type 是 atomic 的，所以他可以有大储存 footprint。只在 OS X 上可用。</li>
<li><strong>NSBinaryStoreType</strong> 依靠一个二进制文件，像 NSXMLStoreType ，它的 store type 也是是 atomic 的，所以二进制文件必须被读取进内存，之后才能使用它。你将很少看到这类型的 persistent store。</li>
<li><strong>NSInMemoryStoreType</strong> 是 in-memory persistent store type。某种程度上讲，这不是真的可持久的，终止应用或关掉手机，存储在内存中的数据就会消失，尽管这像是跟 Core Data 的目的背道而驰，但这 in-memory persistent stores 对单元测试和某些缓存有帮助。</li>
</ol>
<h3 id="The-persistent-store-coordinator"><a href="#The-persistent-store-coordinator" class="headerlink" title="The persistent store coordinator"></a>The persistent store coordinator</h3><p>NSPersistentStoreCoordinator 是 managed object model 和 persistent store 的桥梁。它理解 NSManagedObjectModel，也知道怎么去从 NSPersistentStore 传消息和获取消息。</p>
<p>NSPersistentStoreCoordinator 同时隐藏了实现 persistent store 或 stores 配置的细节，有两个原因：</p>
<ol>
<li>NSManagedObjectContext 没必要知道怎么去保存到一个 SQLite 数据库、XML 文件或者一个定制增量存储(custom incremental store)。</li>
<li>如果你有多个 persistent stores，那么 persistent store coordinator 会提供一个统一的接口去管理 context。至于 context 的管理，它经常和一个单独的、聚合的 persistent store 交互。</li>
</ol>
<h3 id="The-managed-object-context"><a href="#The-managed-object-context" class="headerlink" title="The managed object context"></a>The managed object context</h3><p>日常使用中，你会经常使用 NSManagedObjectContext，可能只有在用 Core Data 使用一些更高级的功能时才会看到其他三个部分。</p>
<p>理解 context 如何工作也是很重要的：</p>
<ul>
<li>一个 context 是一个 in-memory 暂存器用来处理你的 managed object。</li>
<li>你会用一个 managed object context 来做所有关于 Core Data objects 的事情。</li>
<li>只当你在 context 上调用<code>save()</code>，所有的改动才会影响到储存卡中的数据。</li>
</ul>
<p>更重要的还有：</p>
<ul>
<li>context 管理着创建 objects 或获得 objects 的生命周期。这生命周期的管理包含很强大的功能如挑错、逆关系处理(inverse relationship handling) 和校验数据。</li>
<li>一个 managed object 不能离开相关的 context 而存在。实际上，一个 managed object 和它的 context 是很紧密联系在一起的，每个 managed object 都会有一个它的 context 的引用，例如：<br>  <code>let managedContext = employee.managedObjectContext</code></li>
<li>context 是区域性的。一旦一个 managed object 关联上一个特定的 context，它将会一直在它生命周期中关联同样的 context。</li>
<li>一个应用可以有多于一个 context。然而一个 context 是暂存在内存中的，你可以同时取出同样的 Core Data object 到两个不同的 context。</li>
<li><strong>context 不是线程安全的</strong>，这同样适用于一个 managed object。你只能在它们被创建的相同的线程中使用 context 和 managed objects 。</li>
</ul>
<h3 id="The-persistent-store-container"><a href="#The-persistent-store-container" class="headerlink" title="The persistent store container"></a>The persistent store container</h3><p>在 iOS 10 中，NSPersistentContainer 是一个新的类，它能管理所有四个 Core Data stack 类——the managed model, the store coordinator, the persistent store 和 managed context。</p>
<h3 id="实例：遛狗"><a href="#实例：遛狗" class="headerlink" title="实例：遛狗"></a>实例：遛狗</h3><p>Dog Walk.xcdatamodeld<br><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c298ae7.jpg" alt=""></p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c0b17f1.jpg" alt=""></p>
<p>其中狗对遛狗这个行为是一对多的关系，而遛狗行为对狗而言是一对一的关系，如下图：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c15c3e2.jpg" alt=""></p>
<p>新建一个Core Data Stack<br>CoreDataStack.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> CoreData</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoreDataStack</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">let</span> modelName: <span class="type">String</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(modelName: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.modelName = modelName</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 只有这个不加 private 是因为 managed context 是 stack 的唯一的入口</span></div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> managedContext: <span class="type">NSManagedObjectContext</span> = &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.storeContainer.viewContext</div><div class="line">  &#125;()</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> storeContainer: <span class="type">NSPersistentContainer</span> = &#123;</div><div class="line">    <span class="comment">// initialization</span></div><div class="line">    <span class="keyword">let</span> container = <span class="type">NSPersistentContainer</span>(name: <span class="keyword">self</span>.modelName)</div><div class="line">    <span class="comment">// 读取 persistent stores</span></div><div class="line">    container.loadPersistentStores &#123; (storeDescription, error) <span class="keyword">in</span></div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error <span class="keyword">as</span> <span class="type">NSError</span>? &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> container</div><div class="line">  &#125;()</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">saveContext</span> <span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> managedContext.hasChanges <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">try</span> managedContext.save()</div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AppDelegate.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> CoreData</div><div class="line"></div><div class="line"><span class="meta">@UIApplicationMain</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> coreDataStack = <span class="type">CoreDataStack</span>(modelName: <span class="string">"Dog Walk"</span>)</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> navController = window?.rootViewController <span class="keyword">as</span>? <span class="type">UINavigationController</span>,</div><div class="line">      <span class="keyword">let</span> viewController = navController.topViewController <span class="keyword">as</span>? <span class="type">ViewController</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    viewController.managedContext = coreDataStack.managedContext</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// MARK: 进入后台前或终止前，应用会用CoreDataStack.swift 中的 saveContext() 保存数据变更</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">applicationDidEnterBackground</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span> &#123;</div><div class="line">    coreDataStack.saveContext()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">applicationWillTerminate</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span> &#123;</div><div class="line">    coreDataStack.saveContext()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> CoreData</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// MARK: - Properties</span></div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> dateFormatter: <span class="type">DateFormatter</span> = &#123;</div><div class="line">    <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()</div><div class="line">    formatter.dateStyle = .short</div><div class="line">    formatter.timeStyle = .medium</div><div class="line">    <span class="keyword">return</span> formatter</div><div class="line">  &#125;()</div><div class="line">  <span class="keyword">var</span> currentDog: <span class="type">Dog</span>?</div><div class="line">  <span class="keyword">var</span> managedContext: <span class="type">NSManagedObjectContext</span>!</div><div class="line"></div><div class="line">  <span class="comment">// MARK: - IBOutlets</span></div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>!</div><div class="line"></div><div class="line">  <span class="comment">// MARK: - View Life Cycle</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"Cell"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> dogName = <span class="string">"Fido"</span></div><div class="line">    <span class="keyword">let</span> dogFetch: <span class="type">NSFetchRequest</span>&lt;<span class="type">Dog</span>&gt; = <span class="type">Dog</span>.fetchRequest()</div><div class="line">    dogFetch.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"%K == %@"</span>, #keyPath(<span class="type">Dog</span>.name), dogName)</div><div class="line">    </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">let</span> results = <span class="keyword">try</span> managedContext.fetch(dogFetch)</div><div class="line">      <span class="keyword">if</span> results.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</div><div class="line">        <span class="comment">// Fido found, use Fido</span></div><div class="line">        currentDog = results.first</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Fido not found, create Fido</span></div><div class="line">        currentDog = <span class="type">Dog</span>(context: managedContext)</div><div class="line">        currentDog?.name = dogName</div><div class="line">        <span class="keyword">try</span> managedContext.save()</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Fetch error: <span class="subst">\(error)</span> description: <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - IBActions</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> sender: UIBarButtonItem)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> walk = <span class="type">Walk</span>(context: managedContext)</div><div class="line">    walk.date = <span class="type">NSDate</span>()</div><div class="line">    </div><div class="line">    <span class="comment">// 把新的 Walk 插进 Dog's walks 中</span></div><div class="line"><span class="comment">//    if let dog = currentDog, let walks = dog.walks?.mutableCopy() as? NSMutableOrderedSet &#123;</span></div><div class="line"><span class="comment">//      walks.add(walk)</span></div><div class="line"><span class="comment">//      dog.walks = walks</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    <span class="comment">// 和上面注释的代码同样效果</span></div><div class="line">    currentDog?.addToWalks(walk)</div><div class="line">    </div><div class="line">    <span class="comment">// 保存</span></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">try</span> managedContext.save()</div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"Save error: <span class="subst">\(error)</span> description: <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: UITableViewDataSource</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> walks = currentDog?.walks <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> walks.<span class="built_in">count</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"Cell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> walk = currentDog?.walks?[indexPath.row] <span class="keyword">as</span>? <span class="type">Walk</span>,</div><div class="line">      <span class="keyword">let</span> walkDate = walk.date <span class="keyword">as</span>? <span class="type">Date</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    cell.textLabel?.text = dateFormatter.string(from: walkDate)</div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"List of Walks"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">	<span class="comment">// 删除数据</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> walkToRemove = currentDog?.walks?[indexPath.row] <span class="keyword">as</span>? <span class="type">Walk</span>,</div><div class="line">      editingStyle == .delete <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// managed context 中 删除数据</span></div><div class="line">    managedContext.delete(walkToRemove)</div><div class="line">    </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">try</span> managedContext.save()</div><div class="line">      <span class="comment">//表中删除行</span></div><div class="line">      tableView.deleteRows(at: [indexPath], with: .automatic)</div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Saving error: <span class="subst">\(error)</span>, description: <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//tableView 左划删除</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canEditRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>总结：<br>从<code>CoreDataStack.swift</code>可以看到，我们新建了个 Core Data Stack 来管理 context，其中 managed context 由初始化后的 NSPersistentContainer 类实例的 <code>.viewContext</code> 属性获取。另外<code>AppDelegate.swift</code>也用到<code>CoreDataStack.swift</code>中的<code>saveContext()</code>方法来保存数据变更。至此，我们完成通过 Stack 来对数据增删改查，第一阶段结束。</p>
<h2 id="Intermediate-Fetching"><a href="#Intermediate-Fetching" class="headerlink" title="Intermediate Fetching"></a>Intermediate Fetching</h2><p>前面我们都是一下子获取所有搜索到的数据，这节讲的是如何更好地获取数据。</p>
<p>本节目标：</p>
<ul>
<li>只获取想要的数据</li>
<li>用 predicate 限制获取到的数据</li>
<li>避免屏蔽 UI，转为在后台获取数据</li>
<li>在 persistent store 中通过直接更新 object 来避免不必要的数据获取。</li>
</ul>
<h3 id="NSFetchRequest"><a href="#NSFetchRequest" class="headerlink" title="NSFetchRequest"></a>NSFetchRequest</h3><p>之前获取数据都是先创建一个 NSFetchRequest 实例，配置好搜索范围然后再在 context 上获取数据。但实际上，我们有五种不同的方法来实现操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">let</span> fetchRequest1 = <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt;()</div><div class="line"><span class="keyword">let</span> entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Venue"</span>, <span class="keyword">in</span>: managedContext)!</div><div class="line">fetchRequest1.entity = entity</div><div class="line"></div><div class="line"><span class="comment">// 2 第一种写法的缩写形式</span></div><div class="line"><span class="keyword">let</span> fetchRequest2 = <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 3 第二种写法的缩写形式 fetchRequest()方法被定义在 Venue+CoreDataProperties.swift</span></div><div class="line"><span class="keyword">let</span> fetchRequest3: <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; = <span class="type">Venue</span>.fetchRequest()</div><div class="line"></div><div class="line"><span class="comment">// 4 从 NSManagedObjectModel 中获取数据</span></div><div class="line"><span class="keyword">let</span> fetchRequest4 = managedObjectModel.fetchRequestTemplate(forName: <span class="string">"venueFR"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 5 和第四种写法类似，但这里多了一些参数去限制获取结果。</span></div><div class="line"><span class="keyword">let</span> fetchRequest5 = managedObjectModel.fetchRequestFromTemplate(withName: <span class="string">"venueFR"</span>, substitutionVariables: [<span class="string">"NAME"</span> : <span class="string">"Vivi Bubble Tea"</span>])</div></pre></td></tr></table></figure>
<h3 id="获取不同结果的类型"><a href="#获取不同结果的类型" class="headerlink" title="获取不同结果的类型"></a>获取不同结果的类型</h3><p>NSFetchResult 不仅仅是一个简单的工具，实际上，它可以说是 Core Data 框架中的瑞士军刀。</p>
<p>你可以用它来获取单独的数据，对数据进行统计，例如：平均数、最小值、最大值等等。</p>
<p>NSFetchRequest 有个属性叫 resultType，</p>
<ul>
<li>.managedObjectResultType：返回 managed objects（默认值）</li>
<li>.countResultType：返回满足抓取要求的数据数量</li>
<li>.dictionaryResultType：这是一个获取所有返回数据的类型，能返回经过不同计算后的数据。</li>
<li>.managedObjectIDResultType：代替完整的 managed object 返回唯一识别(unique identifiers)。</li>
</ul>
<h4 id="例如：获取其数量！"><a href="#例如：获取其数量！" class="headerlink" title="例如：获取其数量！"></a>例如：获取其数量！</h4><p>拿第二点 <code>.countResultType</code> 来说，有的人可能会直接获取所有的 managed objects 之后再调用数组的<code>count</code>属性得到 object 的数量。但是一旦要获取一个城市的人口数量的时候，先获取所有人口的 object 再得到数量这样显然对内存是很不友好的，这时候通过 <code>.countResultType</code> 获取结果的数量会更有效率。</p>
<p>例如，我想获得价格分类只有一个「$」的珍珠奶茶店数量，我们给 fetchRequest 配置好 <code>resultType</code> 结果类型属性，在配置好 <code>predicate</code> 查询范围后，就可以直接从 <code>countResult.first!.intValue</code> 得到。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> coreDataStack: <span class="type">CoreDataStack</span>!</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> cheapVenuePredicate: <span class="type">NSPredicate</span> = &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">NSPredicate</span>(format: <span class="string">"%K == %@"</span>, #keyPath(<span class="type">Venue</span>.priceInfo.priceCategory), <span class="string">"$"</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line"><span class="comment">// 获取数量并配置 label</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">populateCheapVenueCountLabel</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 抓取的是数量 所以是 NSNumber</span></div><div class="line">  <span class="keyword">let</span> fetchRequest = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSNumber</span>&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">  <span class="comment">// 返回满足抓取要求的数据数量</span></div><div class="line">  fetchRequest.resultType = .countResultType</div><div class="line">  <span class="comment">// 只抓取一个 $ 的</span></div><div class="line">  fetchRequest.predicate = cheapVenuePredicate</div><div class="line">  </div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> countResult = <span class="keyword">try</span> coreDataStack.managedContext.fetch(fetchRequest)</div><div class="line">    <span class="comment">// 获取数量</span></div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = countResult.first!.intValue</div><div class="line">    firstPriceCategoryLabel.text = <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然我们还可以有不同的搜索数量的方式，这里我们获得价格分类有三个「$」的珍珠奶茶店数量。和以前一样先把搜索范围定位所有的 Venue object，然后在获取结果的时候点名只获取数量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> expensiveVenuePredicate: <span class="type">NSPredicate</span> = &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">NSPredicate</span>(format: <span class="string">"%K == %@"</span>, #keyPath(<span class="type">Venue</span>.priceInfo.priceCategory), <span class="string">"$$$"</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">populateExpensiveVenueCountLabel</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 构建获得 Venue object 的请求</span></div><div class="line">  <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; = <span class="type">Venue</span>.fetchRequest()</div><div class="line">  </div><div class="line">  <span class="comment">// 获得三个 $ 的</span></div><div class="line">  fetchRequest.predicate = expensiveVenuePredicate</div><div class="line">  </div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">// 用 count 属性获取数量</span></div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = <span class="keyword">try</span> coreDataStack.managedContext.<span class="built_in">count</span>(<span class="keyword">for</span>: fetchRequest)</div><div class="line">    thirdPriceCategoryLabel.text = <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="例如：获取后计算！"><a href="#例如：获取后计算！" class="headerlink" title="例如：获取后计算！"></a>例如：获取后计算！</h4><p>第三点的<code>.dictionaryResultType</code> 能能返回经过不同计算后的数据，同样的我们通过 NSExpression 来实现一些简单的计算。下图是 API 文档中的部分属性，供参考。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c84abdc.jpg" alt=""></p>
<p>例如，我们要搜索所有珍珠奶茶的优惠数量，我们同样没有必要找出所有相关的属性再自己求和，Core Data 可以帮我们完成任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">populateDealsCountLabel</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 1 .dictionaryResultType 告诉 fetchRequest 要进行计算</span></div><div class="line">  <span class="keyword">let</span> fetchRequest = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSDictionary</span>&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">  fetchRequest.resultType = .dictionaryResultType</div><div class="line">  </div><div class="line">  <span class="comment">// 2 创建一个 NSExpressionDescription 去请求求和后的数据，然后把这个请求过程的名字定为 sumDeals</span></div><div class="line">  <span class="keyword">let</span> sumExpressionDesc = <span class="type">NSExpressionDescription</span>()</div><div class="line">  sumExpressionDesc.name = <span class="string">"sumDeals"</span></div><div class="line">  </div><div class="line">  <span class="comment">// 3 构建表达式 一开始说明要计算的数据来源是 specialCount（优惠的数量）</span></div><div class="line">  <span class="comment">// 然后说明计算方式为"sum:"求和，结果为 integer32AttributeType 类型</span></div><div class="line">  <span class="keyword">let</span> specialCountExp = <span class="type">NSExpression</span>(forKeyPath: #keyPath(<span class="type">Venue</span>.specialCount))</div><div class="line">  sumExpressionDesc.expression = <span class="type">NSExpression</span>(forFunction: <span class="string">"sum:"</span>, arguments: [specialCountExp])</div><div class="line">  sumExpressionDesc.expressionResultType = .integer32AttributeType</div><div class="line">  </div><div class="line">  <span class="comment">// 4 配置 fetchRequest</span></div><div class="line">  fetchRequest.propertiesToFetch = [sumExpressionDesc]</div><div class="line">  </div><div class="line">  <span class="comment">// 5 返回字典类型数据，再按之前的名字取出对应的值</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> results = <span class="keyword">try</span> coreDataStack.managedContext.fetch(fetchRequest)</div><div class="line">    <span class="keyword">let</span> resultDict = results.first!</div><div class="line">    <span class="keyword">let</span> numDeals = resultDict[<span class="string">"sumDeals"</span>]!</div><div class="line">    numDealsLabel.text = <span class="string">"<span class="subst">\(numDeals)</span> total deals"</span></div><div class="line">    </div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="managedObjectResultType"><a href="#managedObjectResultType" class="headerlink" title="managedObjectResultType"></a>managedObjectResultType</h4><p>剩下一个类型是<code>.managedObjectResultType</code>，当你用这类型去获取结果的时候，结果会是一个<code>NSManagedObjectID</code>组成的数组，而不是原来的 managed objects。一个<code>NSManagedObjectID</code>是一个managed object 的压缩的统一标识，作用就像数据库中的主键一样。</p>
<p>在 iOS 5，人们通常通过 ID 来获取数据，因为<code>NSManagedObjectID</code>是线程安全的，而且通过用它能帮助开发者实现并发线程限制模型(thread confinement concurrency model)。</p>
<p>现在线程限制对于很多并发模型来说已经过时了，通过 object ID 来获取数据的做法也在逐渐减少。</p>
<p>目前我们尝试过关于获取数据的不同方式，但是有时候我们需要限制获取的数据数量，我们有时没有必要去一次性获取所有对象图(object graph)，这样对内存也不友好。</p>
<p>我们有不同方式去限制获取结果的数量，例如<code>NSFetchRequest</code>支持获取的批次数量 (fetching batches)。我们可以用<code>fetchBatchSize</code>、<code>fetchLimit</code>、<code>fetchOffset</code>去控制获取批次数量的行为。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>(entityName: <span class="string">"Item"</span>)</div><div class="line">request.fetchBatchSize = <span class="number">20</span></div><div class="line">request.fetchLimit = <span class="number">100</span></div><div class="line">request.sortDescriptors = [sortDescriptor]</div><div class="line">request.predicate = ...</div></pre></td></tr></table></figure>
<p>例如数据库有1000个「item」，上面的代码限制了请求，一次获取20个 item，并且将会在获取100个 item 之后停止继续获取数据。</p>
<p>Core Data 也尝试通过一种名叫「<a href="http://frankorz.com/2017/01/16/core-data-note-1/#Faulting">faulting</a>」的技术去减少内存消耗，一个 fault 是一个占位符，用来表示 managed object 没有被完全送进内存里面。</p>
<p>最后，限制对象图的另外一种方法是用 predicates，就像之前做的一样。</p>
<h4 id="Faulting"><a href="#Faulting" class="headerlink" title="Faulting"></a>Faulting</h4><p>Faulting 可以看做是 Core Data 的一种懒加载，简单地说就是 object 的一些属性只会在你需要的时候才会去获取。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> twitterUsers &#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"fetched user <span class="subst">\(user)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可能看不到 user 的 name 属性被打印出来（我们可能只会看到「unfaulted object」，这依赖于 Core Data 是否已经提前获取了属性），但如果我们像下面这么做…</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> twitterUsers &#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"fetched user named <span class="subst">\(user.name)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们一定能够从数据库中获取所有的 TwitterUsers，因为我们实际上在获取 NSManagedObject 的数据（其属性）。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>NSFetchRequest 另外一个强大的功能就是能帮你排序好数据，它是通过 NSSortDescriptor 来实现的。这样的排序是在 SQLite 层面的，而不是在内存中，所以这让 Core Data 中的排序即快又有效率。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c058be7.jpg" alt=""></p>
<p>现在要实现根据珍珠奶茶店的名字升序、降序、距离、价格来排序，首先定义好 NSSortDescriptor。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 按名字排序</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> nameSortDescriptor: <span class="type">NSSortDescriptor</span> = &#123;</div><div class="line">  <span class="keyword">let</span> compareSelector = #selector(<span class="type">NSString</span>.localizedStandardCompare(<span class="number">_</span>:))</div><div class="line">  <span class="keyword">return</span> <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Venue</span>.name),</div><div class="line">                          ascending: <span class="literal">true</span>,</div><div class="line">                          selector: compareSelector)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="comment">// 按距离排序</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> distanceSortDescriptor: <span class="type">NSSortDescriptor</span> = &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Venue</span>.location.<span class="built_in">distance</span>),</div><div class="line">                          ascending: <span class="literal">true</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="comment">// 按价格排序</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> priceSortDescriptor: <span class="type">NSSortDescriptor</span> = &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Venue</span>.priceInfo.priceCategory),</div><div class="line">                          ascending: <span class="literal">true</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<p>初始化一个 NSSortDescriptor 的实例需要做三件事：有一个 key path 去指出要排序的属性路径(数据库表中：表→属性，表→表→属性等等)，要求升序或降序， 一个可选的选择器(option selector)去实现比较操作。</p>
<p>如果你之前用过 NSSortDescriptor，你可能知道有一种基于块的(block-based) API 可以把比较器(comparator)代替为选择器(seletor)。遗憾的是，Core Data 不支持通过这种方法来定义一个 sort descriptor。</p>
<p>同样的 Core Data 也不支持 NSPredicate 中基于块的(block-based)方法，原因是过滤和分类操作是在 SQLite 数据库中完成的，所以 predicate/sort descriptor 不得不去很好的匹配数据并写成 SQLite 语句。</p>
<p>另外，<code>NSString.localizedStandardCompare(_:)</code> 是苹果推荐用来根据符合当前语言环境(the current locale)的语言规则来排序，这可以更好地去处理一些特殊字符，例如 <em>bien sûr</em> :]</p>
<p>在<code>tableView(didSelectRowAt:)</code>方法中完成赋值，「Search」按钮事件为触发<code>ViewController.swift</code>中的委托方法。</p>
<p>FilterViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 定义一个委托方法：当用户选择一个新的过滤操作时候(sort/filter combination)，会通知委托。</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FilterViewControllerDelegate</span>: <span class="title">class</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">filterViewController</span><span class="params">(<span class="built_in">filter</span>: FilterViewController,</span></span></div><div class="line"><span class="function"><span class="params">                            didSelectPredicate predicate: NSPredicate?,</span></span></div><div class="line"><span class="function"><span class="params">                            sortDescriptor: NSSortDescriptor?)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - UITableViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FilterViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell = tableView.cellForRow(at: indexPath) <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Price section</span></div><div class="line">    <span class="keyword">switch</span> cell &#123;</div><div class="line">    <span class="comment">//Sort By section</span></div><div class="line">    <span class="keyword">case</span> nameAZSortCell:</div><div class="line">      selectedSortDescriptor = nameSortDescriptor</div><div class="line">    <span class="keyword">case</span> nameZASortCell:</div><div class="line">      selectedSortDescriptor = nameSortDescriptor.reversedSortDescriptor</div><div class="line">                               <span class="keyword">as</span>? <span class="type">NSSortDescriptor</span></div><div class="line">    <span class="keyword">case</span> distanceSortCell:</div><div class="line">      selectedSortDescriptor = distanceSortDescriptor</div><div class="line">    <span class="keyword">case</span> priceSortCell:</div><div class="line">      selectedSortDescriptor = priceSortDescriptor</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    cell.accessoryType = .checkmark</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - IBActions</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FilterViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">saveButtonTapped</span><span class="params">(<span class="number">_</span> sender: UIBarButtonItem)</span></span> &#123;</div><div class="line">    delegate?.filterViewController(<span class="built_in">filter</span>: <span class="keyword">self</span>,</div><div class="line">                                   didSelectPredicate: selectedPredicate,</div><div class="line">                                   sortDescriptor: selectedSortDescriptor)</div><div class="line">    </div><div class="line">    dismiss(animated: <span class="literal">true</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewController.swift 中补充委托方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - FilterViewControllerDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">FilterViewControllerDelegate</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">filterViewController</span><span class="params">(<span class="built_in">filter</span>: FilterViewController, didSelectPredicate predicate: NSPredicate?, sortDescriptor: NSSortDescriptor?)</span></span> &#123;</div><div class="line">    fetchRequest.predicate = <span class="literal">nil</span></div><div class="line">    fetchRequest.sortDescriptors = <span class="literal">nil</span></div><div class="line">    </div><div class="line">    fetchRequest.predicate = predicate</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sr = sortDescriptor &#123;</div><div class="line">      fetchRequest.sortDescriptors = [sr]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取数据并 reload tableView</span></div><div class="line">    fetchAndReload()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步获取数据"><a href="#异步获取数据" class="headerlink" title="异步获取数据"></a>异步获取数据</h3><p>当你看到这里，我好消息和坏消息要告诉你。好消息是我们已经说了很多关于 NSFetchRequest 可以做的事，坏消息是我们每次获取数据都会屏蔽主线程，直到获取到数据。</p>
<p>当你屏蔽了主线程，屏幕就会变得不可交互，还会产生一些其他的问题，之前没有感觉到屏蔽主线程的感觉，是因为我们获取的数据还太少。iOS 8 中，Core Data 有一个 API 能让我们长时间在后台获取数据，获取到数据后还能得到一个回调方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不先初始化的话 回调方法会报错</span></div><div class="line"><span class="keyword">var</span> venues: [<span class="type">Venue</span>] = []</div><div class="line"></div><div class="line"><span class="comment">// 父类是 NSPersistentStoreRequest 而不是 NSFetchRequest</span></div><div class="line"><span class="keyword">var</span> asyncFetchRequest: <span class="type">NSAsynchronousFetchRequest</span>&lt;<span class="type">Venue</span>&gt;!</div><div class="line"></div><div class="line"><span class="comment">// MARK: - View Life Cycle</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  </div><div class="line">  <span class="comment">// 1 准备获取数据</span></div><div class="line">  fetchRequest = <span class="type">Venue</span>.fetchRequest()</div><div class="line">  </div><div class="line">  <span class="comment">// 2 用 fetchRequest 和回调完成请求，数据在 result.finalResult 中</span></div><div class="line">  asyncFetchRequest = <span class="type">NSAsynchronousFetchRequest</span>&lt;<span class="type">Venue</span>&gt;(fetchRequest: fetchRequest) &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>] (result: <span class="type">NSAsynchronousFetchResult</span>) <span class="keyword">in</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> venues = result.finalResult <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.venues = venues</div><div class="line">    <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 3 执行异步请求</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> coreDataStack.managedContext.execute(asyncFetchRequest)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还要注意的是要获取的 venues 实例，由于现在获取数据是异步的，所以获取数据的步骤会在 table view 初始化之后再执行，所以要先初始化好实例，不然不能解包实例，应用会报错。</p>
<p>另外，如果要取消获取数据的请求(fetch request)，可以调用<code>NSAsynchronousFetchResult</code>的<code>cancel()</code>方法。</p>
<h3 id="批量更新-Batch-updates"><a href="#批量更新-Batch-updates" class="headerlink" title="批量更新(Batch updates)"></a>批量更新(Batch updates)</h3><p>有时候我们需要从 Core Data 中获取数据是去改变一个单独的属性(attribute)，改动后，我们还要去 commit 回 persistent store。但如果我们想要去一次性更新十万计的数据呢？这将会消耗大量的时间和内存去只更新一个属性。</p>
<p>iOS 8 中，有一个新的方法能不从内存中获取所有数据来完成更新数据：batch updates。这新的技术能绕过 NSManagedObjectContext 来直接操作 persistent store。通常批量更新的做法就像邮件客户端中的「Mark all as read」功能一样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - View Life Cycle</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> batchUpdate = <span class="type">NSBatchUpdateRequest</span>(entityName: <span class="string">"Venue"</span>)</div><div class="line">  batchUpdate.propertiesToUpdate = [#keyPath(<span class="type">Venue</span>.favorite) : <span class="literal">true</span>]</div><div class="line">  </div><div class="line">  batchUpdate.affectedStores = coreDataStack.managedContext</div><div class="line">    .persistentStoreCoordinator?.persistentStores</div><div class="line">  </div><div class="line">  batchUpdate.resultType = .updatedObjectsCountResultType</div><div class="line">  </div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> batchResult = <span class="keyword">try</span> coreDataStack.managedContext</div><div class="line">      .execute(batchUpdate) <span class="keyword">as</span>! <span class="type">NSBatchUpdateResult</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Records updated <span class="subst">\(batchResult.result!)</span>"</span>)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行应用后显示：<code>Records updated 30</code></p>
<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>iOS 9 中，NSBatchDeleteRequest 能帮我批量删除数据，如批量更新一样，不需要把数据读取到内存再操作，而且父类也是 NSPersistentStoreRequest。</p>
<p>我们在回避 NSManagedObjectContext，所以批量更新或批量删除时，我们不会进行数据验证。数据的改动不会影响我们的 managed context，所以在用一个 persistent store request 之前要验证好数据。</p>
<h2 id="NSFetchedResultsController"><a href="#NSFetchedResultsController" class="headerlink" title="NSFetchedResultsController"></a>NSFetchedResultsController</h2><p>之前我们都是把 Core Data 和 UITableView 放在一起用，Core Data，提供了一个类来专门处理这种使用方式：NSFetchedResultsController。NSFetchedResultsController 是一个 controller，但是它不是一个 view controller，它没有界面，它的目的在于帮助开发者通过抽象大部分代码更容易地在 table view 上同步数据。</p>
<h3 id="实例：世界杯"><a href="#实例：世界杯" class="headerlink" title="实例：世界杯"></a>实例：世界杯</h3><p>下面的代码是关于一个世界杯胜场计数的应用示例。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c556a02.jpg" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fetchedResultsController: <span class="type">NSFetchedResultsController</span>&lt;<span class="type">Team</span>&gt;!</div><div class="line"></div><div class="line"><span class="comment">// MARK: - View Life Cycle</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  <span class="comment">// 1 fetchRequest 是万能的</span></div><div class="line">  <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Team</span>&gt; = <span class="type">Team</span>.fetchRequest()</div><div class="line">  </div><div class="line">  <span class="comment">// 2 初始化 fetchedResultsController</span></div><div class="line">  fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">    fetchRequest: fetchRequest,</div><div class="line">    managedObjectContext: coreDataStack.managedContext,</div><div class="line">    sectionNameKeyPath: <span class="literal">nil</span>,</div><div class="line">    cacheName: <span class="literal">nil</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 3 开始获取数据</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> fetchedResultsController.performFetch()</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有点奇怪的是 NSFetchedResultsController 没有返回什么值就可以获取数据了，其实 NSFetchedResultsController 既是 fetch request 的包装，也是一个获取数据用的 container，我们可以从中获取到数据。例如我们可以通过<code>fetchedObject</code>属性或<code>object(at:)</code>方法来获得。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - Internal</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">configure</span><span class="params">(cell: UITableViewCell, <span class="keyword">for</span> indexPath: IndexPath)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell = cell <span class="keyword">as</span>? <span class="type">TeamCell</span> <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> team = fetchedResultsController.object(at: indexPath)</div><div class="line">    cell.flagImageView.image = <span class="type">UIImage</span>(named: team.imageName!)</div><div class="line">    cell.teamLabel.text = team.teamName</div><div class="line">    cell.scoreLabel.text = <span class="string">"Wins: <span class="subst">\(team.wins)</span>"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - UITableViewDataSource</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">	<span class="comment">// section 数 </span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> sections = fetchedResultsController.sections <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sections.<span class="built_in">count</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> sectionInfo = fetchedResultsController.sections?[section] <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sectionInfo.numberOfObjects</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: teamCellIdentifier, <span class="keyword">for</span>: indexPath)</div><div class="line">    configure(cell: cell, <span class="keyword">for</span>: indexPath)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - UITableViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">	<span class="comment">//点击后胜场加一，保存数据到 Core Data，并重载 tableview</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> team = fetchedResultsController.object(at: indexPath)</div><div class="line">    team.wins = team.wins + <span class="number">1</span></div><div class="line">    coreDataStack.saveContext()</div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="section"><a href="#section" class="headerlink" title="section"></a>section</h4><p>到了这步，启动应用的话还会报<code>&#39;An instance of NSFetchedResultsController requires a fetch request with sort descriptors&#39;</code>的错，因为我们使用 NSFetchedResultsController，它需要我们给它提供至少一个 sort descriptor，才能知道如何整理数据。与之前不一样的是，前面获取数据的时候可以不提供 sort descriptor。</p>
<p>于是在之前的基础上加上 sort descriptor，这里同时增加了三种排序。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - View Life Cycle</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  <span class="comment">// 1 fetchRequest 是万能的</span></div><div class="line">  <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Team</span>&gt; = <span class="type">Team</span>.fetchRequest()</div><div class="line">  </div><div class="line">  <span class="comment">// 必须提供至少一个 sort descriptor</span></div><div class="line">  <span class="keyword">let</span> zoneSort = <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Team</span>.qualifyingZone), ascending: <span class="literal">true</span>)</div><div class="line">  <span class="keyword">let</span> scoreSort = <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Team</span>.wins), ascending: <span class="literal">false</span>)</div><div class="line">  <span class="keyword">let</span> nameSort = <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Team</span>.teamName), ascending: <span class="literal">true</span>)</div><div class="line">  fetchRequest.sortDescriptors = [zoneSort, scoreSort, nameSort]</div><div class="line">  </div><div class="line">  <span class="comment">// 2 初始化 fetchedResultsController</span></div><div class="line">  fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">    fetchRequest: fetchRequest,</div><div class="line">    managedObjectContext: coreDataStack.managedContext,</div><div class="line">    sectionNameKeyPath: <span class="literal">nil</span>,</div><div class="line">    cacheName: <span class="literal">nil</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 3 开始获取数据</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> fetchedResultsController.performFetch()</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在前面<code>viewDidLoad()</code>方法中更改下 fetchedResultsController 的 sectionNameKeyPath，就可以直接按照相关的字符串分类，例如这里把国家按照大洲分类。注意前面的 sort descriptor 也要加上相应的分类，例如<code>let zoneSort = NSSortDescriptor(key: #keyPath(Team.qualifyingZone), ascending: true)</code>，否则分类顺序会错乱。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 2 初始化 fetchedResultsController</span></div><div class="line">fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">  fetchRequest: fetchRequest,</div><div class="line">  managedObjectContext: coreDataStack.managedContext,</div><div class="line">  sectionNameKeyPath: #keyPath(<span class="type">Team</span>.qualifyingZone),</div><div class="line">  cacheName: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>再增加一个委托方法提供 section 的标题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">  <span class="keyword">let</span> sectionInfo = fetchedResultsController.sections?[section]</div><div class="line">  <span class="keyword">return</span> sectionInfo?.name</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c965d8b.jpg" alt=""></p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>NSFetchedResultsController 提供了缓存功能，只要在之前的<code>viewDidLoad()</code>方法中更改下<code>fetchedResultsController</code>的 cacheName 就能实现了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">  fetchRequest: fetchRequest,</div><div class="line">  managedObjectContext: coreDataStack.managedContext,</div><div class="line">  sectionNameKeyPath: #keyPath(<span class="type">Team</span>.qualifyingZone),</div><div class="line">  cacheName: <span class="string">"worldCup"</span>)</div></pre></td></tr></table></figure>
<p>我们要注意缓存是把数据缓存到硬盘中，和 Core Data 的 persistent store 是分开的。如果我们要更改获取的数据，或者不一样的 sort descriptor 等等导致缓存无效的时候，我们必须用<code>deleteCache(withName:)</code>删除现有缓存，或者换一个缓存名。</p>
<h4 id="数据控制"><a href="#数据控制" class="headerlink" title="数据控制"></a>数据控制</h4><p>前面更新数据的方法就是调用 table view 的<code>reloadData()</code>方法，其实 NSFetchedResultsController 直接给我们提供了委托方法，让我们可以在数据改动的时候直接更新 table view。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/16/587cc4c7d0865.gif" alt="gif"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - NSFetchedResultsControllerDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">NSFetchedResultsControllerDelegate</span> </span>&#123;</div><div class="line">  <span class="comment">// 数据将会改变，调用 beginUpdates() 方法</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerWillChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.beginUpdates()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 球队相关数据改变</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;, didChange anObject: Any, at indexPath: IndexPath?, <span class="keyword">for</span> type: NSFetchedResultsChangeType, newIndexPath: IndexPath?)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .update:</div><div class="line">      <span class="keyword">let</span> cell = tableView.cellForRow(at: indexPath!) <span class="keyword">as</span>! <span class="type">TeamCell</span></div><div class="line">      configure(cell: cell, <span class="keyword">for</span>: indexPath!)</div><div class="line">    <span class="keyword">case</span> .move:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 数据完成改变，应用变化。</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerDidChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.endUpdates()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// section 相关数据改变</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;, didChange sectionInfo: NSFetchedResultsSectionInfo, atSectionIndex sectionIndex: Int, <span class="keyword">for</span> type: NSFetchedResultsChangeType)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> indexSet = <span class="type">IndexSet</span>(integer: sectionIndex)</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>Todo:</p>
<ul>
<li>多线程</li>
<li>数据库迁移</li>
<li>Optimistic locking (deleteConflictsForObject)</li>
<li>Rolling back unsaved changes</li>
<li>Undo/Redo</li>
<li>Staleness (how long after a fetch until a refetch of an object is required?)</li>
<li>…</li>
</ul>
<p>如同上面的列表所示，本文没涉及的话题还很多，但会随着自己的学习逐渐补充。如何去保持 Core Data 高性能的最佳实践，如何正确地组合使用它，是使用 Core Data 的挑战所在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Core Data 应该被当成一个对象图管理系统来正确使用，得益于其内建的缓存和对象管理机制，它在很多方面比其他数据库实际上反而更快。抽象级别更高的 API 可以让你专注于优化 APP 里关键部分的性能，而不是从头一开始来实现如何持久化。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;《Core Data》&lt;/strong&gt;&lt;cite&gt;ObjC中国&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;本文为《Core Data by Tutorials》笔记上篇，代码用 swift 3 编写。等这系列写完会根据 ObjC 的《Core Data》 补充笔记，另外也推荐斯坦福课程 &lt;a href=&quot;https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developing iOS 9 Apps with Swift&lt;/a&gt; 中的第十课《Core Data》，用来大致地学习下 Core Data 重要的知识点，本文也有部分笔记参考了这课程。&lt;/p&gt;
&lt;p&gt;下面的代码只给其中关键部分，请指教。由于笔记是给自己看的，部分地方可能会跳跃性比较大。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://frankorz.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="Core Data" scheme="http://frankorz.com/tags/Core-Data/"/>
    
      <category term="iOS" scheme="http://frankorz.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>用 Workflow 把知乎答案存到 Instapaper</title>
    <link href="http://frankorz.com/2016/11/05/workflow-of-zhihu-to-instapaper/"/>
    <id>http://frankorz.com/2016/11/05/workflow-of-zhihu-to-instapaper/</id>
    <published>2016-11-05T12:19:01.000Z</published>
    <updated>2017-04-21T11:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>随着 Instapaper 宣布免费，我开始尝试使用这款应用。这款应用很适合我，唯独抓取的时候对知乎支持不太好，有强迫症的我尝试解决它，其中比较有效的方法是：右上角菜单「Safari 打开」-打开阅读器视图-发邮件至 Instapaper 邮箱。但是这依旧有点麻烦了，我后来找到 <a href="https://mercury.postlight.com" target="_blank" rel="external">Mercury</a> 这个服务，并用 Workflow 解决了这问题。<br><a id="more"></a></p>
<h3 id="Workflow-特点"><a href="#Workflow-特点" class="headerlink" title="Workflow 特点"></a>Workflow 特点</h3><ul>
<li>支持知乎答案抓取（答案太短可能会抓取失败）</li>
<li>知乎专栏文章和其他网站直接原生添加到 Instapapaer</li>
<li>清除知乎答案内的知乎超链接跳转</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>免费的 <a href="https://itunes.apple.com/cn/app/workflow-powerful-automation-made-simple/id915249334?mt=8" target="_blank" rel="external">Workflow</a></li>
<li>在 <a href="https://mercury.postlight.com" target="_blank" rel="external">Mercury</a> 上免费注册个账号</li>
</ul>
<h3 id="注册-Mercury"><a href="#注册-Mercury" class="headerlink" title="注册 Mercury"></a>注册 Mercury</h3><p>Mercury 是一个免费的在线文本解析网站，允许我们提供网址并得到 JSON 格式的解析结果。我们需要使用它们的服务，所以要注册个账号得到 API KEY 来配置 Workflow 使用。</p>
<p>首先进入 <a href="https://mercury.postlight.com" target="_blank" rel="external">Mercury</a> ，点击右上角的「SIGN UP FOR FREE」。注册完成并验证邮箱后，就能看到你专属的 API KEY 了。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/05/581e10644e725.jpg" alt=""></p>
<h3 id="配置-Workflow"><a href="#配置-Workflow" class="headerlink" title="配置 Workflow"></a>配置 Workflow</h3><p>你可以在下面获取到我写的 Workflow。</p>
<center><a id="download" href="https://workflow.is/workflows/946d07f3f3e44ff09fccb59d9fafdb96" target="_blank" rel="external"><i class="fa fa-download"></i><span> Workflow V5 下载</span><br></a></center>

<p>点击「GET WORKFLOW」，应该就能把这 workflow 保存到你应用当中了。</p>
<h4 id="配置-Mercury-API-KEY-和邮箱"><a href="#配置-Mercury-API-KEY-和邮箱" class="headerlink" title="配置 Mercury API KEY 和邮箱"></a>配置 Mercury API KEY 和邮箱</h4><p>KEY 我们已经拿到了，另外需要的 Instapaper 的邮箱地址可以在 <a href="https://www.instapaper.com/save/email" target="_blank" rel="external">How to Save</a> 中找到Instapaper接收邮件的邮箱地址。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/05/581e1064c8968.jpg" alt=""></p>
<p>把 Workflow 往下拉，找到注释，把 KEY 和 Instapaper 接收邮件的邮箱分别填到「Text」框中和「Email Address」框中。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/05/581e10670bc0c.png" alt="IMG_0177"></p>
<p>然后把 Workflow 拉到中间，找到绿色的「Ask When Run」圈圈，删除后添加自己用来发邮件的个人邮箱。再往下拉到 Workflow 四分之三的位置，同样配置好个人邮箱。第一次使用 Workflow 的同学需要授权邮箱应用，另外要注意的是邮箱服务器、用户名、密码都确认无误仍然提示 incorrect 的话，直接保存就好了，运行 Workflow 发送邮件无效后再修改。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/05/581e1068234c3.png" alt="IMG_0178"></p>
<p> Workflow 中共有四次要配置的地方，并且要在 Workflow 应用中对 Instapaper 授权，都配置完毕要在 Workflow 应用中运行一次，获得对新下载的 Workflow 运行的许可。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="http://ooo.0o0.ooo/2016/11/06/581ea49772c6a.gif" alt="知乎答案"></p>
<p>操作：右上角菜单-<strong>复制链接</strong>-运行 Workflow</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>自己实在等不到知乎官方支持 Instapaper 的那天了，于是写了这个 Workflow 。拿到 Matrix 内测资格后，这个 Workflow 已经是第五个版本了，相对比较完善。如果有什么疑问或者建议，请在评论区指出，我会尽快回复。</p>
<p>另外 Workflow 中对知乎答案的支持都是通过其他服务抓取数据而来，所以抓取时相当于下载一次网络数据，再用邮件发出，对于图片较多的答案或专栏会耗费较多流量。</p>
<p>注意事项：</p>
<ul>
<li>Workflow 对当前复制的文字中是否含有「http」判断是否为链接</li>
<li>如果不能运行请换其他邮箱测试（确保邮箱的SMTP、IMAP地址、端口号和邮箱密码正确，QQ 邮箱需要生成授权码来当密码使用）</li>
<li>运行后会清除当前剪贴板</li>
<li>图片越多，发送邮件速度越慢，耗费流量越多</li>
<li>已知不支持新浪文章</li>
<li><strong>该方法需要重新下载网页数据并发邮件，使用的时候请注意流量消耗</strong></li>
<li>如果有运行 Workflow 时自动打开应用再运行的现象，尝试重启设备</li>
<li>Workflow 点击运行后就会在后台运行，不用死等</li>
<li>如还是发送空邮件，且以上所有问题都排除了，那就是知乎答案过长，例如<a href="https://www.zhihu.com/question/22164041/answer/148128347" target="_blank" rel="external">这篇知乎答案</a>，导致 Mercury 解析超时…</li>
</ul>
<p>找到解决方法，马上写博文分享这也是一种强迫症吧哈哈哈(´ ˘ `๑)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 Instapaper 宣布免费，我开始尝试使用这款应用。这款应用很适合我，唯独抓取的时候对知乎支持不太好，有强迫症的我尝试解决它，其中比较有效的方法是：右上角菜单「Safari 打开」-打开阅读器视图-发邮件至 Instapaper 邮箱。但是这依旧有点麻烦了，我后来找到 &lt;a href=&quot;https://mercury.postlight.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mercury&lt;/a&gt; 这个服务，并用 Workflow 解决了这问题。&lt;br&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="Workflow" scheme="http://frankorz.com/tags/Workflow/"/>
    
  </entry>
  
  <entry>
    <title>macOS 上管理书的一些分享</title>
    <link href="http://frankorz.com/2016/10/24/manage-books-on-macOS/"/>
    <id>http://frankorz.com/2016/10/24/manage-books-on-macOS/</id>
    <published>2016-10-24T00:52:42.000Z</published>
    <updated>2016-11-01T15:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e54d12dd.jpg" alt=""></p>
<p>在生活中，我时不时会买一些书，包括电子书和实体书。随着书籍的增多，我作为一个工具控也有着自己一套管理书籍的方式，在这里与大家分享。</p>
<p>本文不会涉及电子书解密与分享，仅作经验分享。<br><a id="more"></a></p>
<h3 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h3><p>随着亚马逊的大力推广，我较关注的技术书也因其时效性多以电子书形式发布，电子书实际上占用了我生活中所购买书的一大部分。</p>
<p>下图是我所经历亚马逊一些较大的优惠，其中第二个限时优惠更是允许我不到 8 元买到四本接近百元的电子书(亚马逊药丸！！)。我也经常从<a href="http://www.ituring.com.cn" target="_blank" rel="external">图灵社区</a>购买一些技术书籍，图灵社区提供的是未加密的电子书，加之一些网友也有分享自制的电子书，因此能很方便地放到不同工具中阅读和管理。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e570b2b2.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e5b42da5.jpg" alt=""></p>
<p>我们所经常遇到的电子书格式通常有 Mobi、Epub、PDF 等格式，阅读 PDF 我推荐使用 PDF Expert 2，其余类型电子书我推荐用 Clearview 阅读，epub 用 iBook 阅读也是不错的体验，Mobi 也能放到 Kindle for mac 上阅读。</p>
<p><a href="https://book.douban.com" target="_blank" rel="external">豆瓣读书</a>也提供了一个很好的管理书籍的平台，也方便书友写书评和交流。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e57aa7b5.png" alt="书"></p>
<h4 id="Calibre"><a href="#Calibre" class="headerlink" title="Calibre"></a>Calibre</h4><p><a href="https://calibre-ebook.com" target="_blank" rel="external">Calibre</a> 是一款强大的免费开源电子书管理软件，支持 macOS、Windows、Linux。作者几乎每两周就会更新一次软件，这里是<a href="https://github.com/kovidgoyal/calibre" target="_blank" rel="external">开源地址</a>。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e60009b6.jpg" alt=""></p>
<h5 id="编辑书籍元数据"><a href="#编辑书籍元数据" class="headerlink" title="编辑书籍元数据"></a>编辑书籍元数据</h5><p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e5f5d8c5.jpg" alt=""></p>
<h5 id="下载元数据"><a href="#下载元数据" class="headerlink" title="下载元数据"></a>下载元数据</h5><p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e679cdca.jpg" alt=""></p>
<h5 id="转换书籍"><a href="#转换书籍" class="headerlink" title="转换书籍"></a>转换书籍</h5><p>Calibre 转换书籍也方便，能自定义字体、字体大小、自动检测增加目录、更改页面设置等，转 PDF 的时候注意下页面边距和行距。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e61c08a8.jpg" alt=""></p>
<h5 id="多种分类方便搜索"><a href="#多种分类方便搜索" class="headerlink" title="多种分类方便搜索"></a>多种分类方便搜索</h5><p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e681f75d.jpg" alt=""></p>
<p>在电子书右键选择 Calibre 打开后，Calibre 会把电子书复制到你设置的仓库中，根据作者名分类，编辑的书籍元数据也会储存到一起。仓库也能备份成一个文件，防止电子书丢失，方便转移。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e6071f09.jpg" alt=""></p>
<h5 id="推送电子书"><a href="#推送电子书" class="headerlink" title="推送电子书"></a>推送电子书</h5><p><img src="http://ooo.0o0.ooo/2016/11/01/581864c7e63f2.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/11/01/581864cb36b3f.jpg" alt=""></p>
<p>发送邮件的配置可以参考邮箱网页版的设置页面中STMP服务器项填写。</p>
<p>点击测试邮件发送按钮后会尝试发送一个内容为“Test mail from calibre”的邮件到亚马逊接收推送的电子邮箱，稍等片刻若收到如下图的邮件则说明测试成功。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/01/581864cd976a3.jpg" alt=""></p>
<p>其中接收电子书推送的邮箱可以在<a href="https://www.amazon.cn/gp/digital/fiona/manage?ref=sa_menu_kindle_l3_device&amp;#manageDevices" target="_blank" rel="external">管理我的内容和设备</a>中“我的设备”或“设置”中找到。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/01/581864ca6499a.jpg" alt=""></p>
<p>同时别忘了把你的邮箱添加到“已认可的发件人电子邮箱列表”中，否则 Kindle 将会接收不到推送，该页面可以在同页面的“设置”底部。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/01/581864c9b4dd7.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/11/01/581864cd8a9a0.jpg" alt=""></p>
<p>大概在半小时过后我的 Kindle 应用才同步到这本电子书，另外我只给 iPad 的 kindle 推送邮箱推送后，全部设备的 Kindle 应用云端上都可以看到这本电子书，还是很方便的。</p>
<p>更多Calibre 技巧可以参考<a href="http://kindlefere.com/post/tag/calibre" target="_blank" rel="external">Calibre 使用教程</a>，本文仅作抛砖引玉。</p>
<h3 id="实体书"><a href="#实体书" class="headerlink" title="实体书"></a>实体书</h3><p>京东抽奖得的 200-100 图书券、会员每月可得的 200-80 勋章券，还有亚马逊时不时的活动，我对买实体书完全没有抵抗力…</p>
<p>实体书的管理可能没电子书管理这么有必要，我们仍然可以管理书籍读书状态，拥有的书籍信息。这里要介绍的是一款新生的工具——Shelf。</p>
<h4 id="Shelf"><a href="#Shelf" class="headerlink" title="Shelf"></a>Shelf</h4><p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e67783a1.jpg" alt=""></p>
<p><a href="http://shelf.weazm.cc/" target="_blank" rel="external">Shelf</a> 是 <a href="https://www.v2ex.com/member/bryantandk" target="_blank" rel="external">bryantandk</a> 与小伙伴在国庆做的小应用。由于是由electron 制作的，所以安装文件有点大。</p>
<p>Shelf 提供了书籍搜索，获取书籍评分、简介、目录等元数据，修改读书状态等较基础的功能，界面设计较出色。目前看来是实现了部分豆瓣读书的功能，由于是新应用，我还是挺期待应用的后期更新的。</p>
<p>注意这里输入的账号不是豆瓣账号</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e6a50ac7.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e682de6f.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580d9e670e4d9.jpg" alt=""></p>
<p>macOS 上在书籍方面有很多出色的工具，不仅仅是管理书籍，更多的是创作文字、阅读、制作电子书等各方面的工具。iPhone 上也有很多方便管理实体书的 App，例如：美丽阅读、藏书阁等，通过扫书籍条形码添加书籍再管理。这方面也是不同设备的优点吧，我认为 macOS 实际上更适合写书评、读后感之类的创造性行为。</p>
<h3 id="小脚本"><a href="#小脚本" class="headerlink" title="小脚本"></a>小脚本</h3><p>买书时我喜欢参考豆瓣网的评分，但是我不喜欢复制书名再打开新的页面搜索，有个小脚本可以帮到我们。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/24/580dfdbd9cb03.jpg" alt=""></p>
<p>这个油猴脚本需要浏览器插件支持，详情如下：</p>
<ol>
<li>Microsoft Edge 14以上：<a href="http://tampermonkey.net/index.php?ext=dhdg&amp;browser=edge" target="_blank" rel="external">Tampermonkey</a>。</li>
<li>Firefox 及相关的浏览器：<a href="https://addons.mozilla.org/zh-CN/firefox/addon/greasemonkey/" target="_blank" rel="external">Greasemonkey</a>。</li>
<li>Google Chrome、Chromium 及相关的浏览器：<a href="http://tampermonkey.net/index.php?ext=dhdg&amp;browser=chrome" target="_blank" rel="external">Tampermonkey</a>。</li>
<li>Opera (版本 15 及更晚)：<a href="https://addons.opera.com/extensions/details/tampermonkey-beta/" target="_blank" rel="external">Tampermonkey</a> 或者 <a href="https://addons.opera.com/zh-cn/extensions/details/violent-monkey/?display=en" target="_blank" rel="external">Violentmonkey</a>。</li>
<li>Opera 版本 12 及更早原生支持用户脚本。但 <a href="https://addons.opera.com/zh-cn/extensions/details/violent-monkey/?display=en" target="_blank" rel="external">Violentmonkey</a> 能提供更友好的界面和更好的兼容性。</li>
<li>Safari： <a href="http://tampermonkey.net/index.php?ext=dhdg&amp;browser=safari" target="_blank" rel="external">Tampermonkey</a></li>
</ol>
<p>装完插件后到这安装脚本 <a href="https://greasyfork.org/zh-CN/scripts/3737-douban-book-bar" target="_blank" rel="external">Douban Book Bar</a> [安装此脚本]-&gt;[安装] </p>
<p>脚本适用于：图灵社区、京东、亚马逊中国、当当、多看、苏宁易购、文轩和 China-pub</p>
<p>祝买书快乐！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>“买书如山倒，读书如抽丝”这句话很适合我，本博文只为买书提供了一个管理方法的整理，关键还是”读书”。</p>
<p>前不久我写了篇关于<a href="http://frankorz.com/2016/10/21/new-time-tracking-app-on-macOS/">macOS 上的时间跟踪软件</a>的文章，直到今天我写完本文章，心情是挺苦恼的，因为我能帮别人节省的仅仅是找书的时间。我真正想做到的是让人读书，估计得自己还有很长一段路要走。(一刹那宛如鲁迅再生，毅然弃医从文！！)</p>
<p>有了挤出来的时间，有了最好的阅读工具，有了方便的书籍管理工具，我们距离读书还差点什么呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/10/24/580d9e54d12dd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在生活中，我时不时会买一些书，包括电子书和实体书。随着书籍的增多，我作为一个工具控也有着自己一套管理书籍的方式，在这里与大家分享。&lt;/p&gt;
&lt;p&gt;本文不会涉及电子书解密与分享，仅作经验分享。&lt;br&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="macOS" scheme="http://frankorz.com/tags/macOS/"/>
    
      <category term="APP" scheme="http://frankorz.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>macOS 上的时间跟踪软件</title>
    <link href="http://frankorz.com/2016/10/21/new-time-tracking-app-on-macOS/"/>
    <id>http://frankorz.com/2016/10/21/new-time-tracking-app-on-macOS/</id>
    <published>2016-10-21T04:32:50.000Z</published>
    <updated>2016-12-07T15:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed7f43054.jpg" alt=""></p>
<blockquote><p>时间统计法-不是一个节俭的计划工作者的预算，而是向时间自我剖析，对时间的崇敬。</p>
<footer><strong>《奇特的一生》</strong><cite>格拉宁</cite></footer></blockquote>
<p>今天在 Next 上发现又一款时间追踪软件横空出世了，所以对几个 macOS 上的时间追踪软件做个总结。近年以来，可以看到很多时间方面的应用遍地开花：Todo 类、番茄钟、备忘事项、日历等等，可以看出来人们对自己的时间越来越看重，如何掌握和使用好碎片时间，是当今一个热门的主题。而时间追踪类软件是其中一个较低调的类别，我目前遇到的大多是帮助你知道时间是如何花掉的，所以这类软件还需要一个会分析时间的使用者。<br><a id="more"></a><br><img src="http://ooo.0o0.ooo/2016/10/21/5809ed777617a.png" alt="时间管理"></p>
<h3 id="RescueTime"><a href="#RescueTime" class="headerlink" title="RescueTime"></a>RescueTime</h3><p><a href="http://rescuetime.com" target="_blank" rel="external">RescueTime</a> 是一款易用的多平台时间追踪软件，支持 macOS、Windows、Android、Chrome、FireFox 等(iOS 版尚在开发中)，它可以挂在电脑后台自动追踪时间，生成时间报表，Pro 版可以禁用消极网页、设定目标、设定提醒等。</p>
<p>我曾经在 V2EX 社区上发起过一次调查：<a href="https://www.v2ex.com/t/311343?p=1" target="_blank" rel="external">你会为什么样的网络服务付费？</a>，其中 RescueTime 也能占一席之地，我认为这是能代表一些东西的。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed77774f5.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed7a98536.jpg" alt=""></p>
<p>如图可以看到 RescueTime 把你的行为分成几类，大多数行为能够自动判断消极或者积极(知乎居然是积极的我很不信服..)。当然了，行为的类别和积极性都可以编辑，例如你可以把一些经常使用但未归类的网页编辑好属性，更好的监控你的时间，另外 RescueTime 还能每天晚上主动推送每日的追踪报告。</p>
<p>日视图：</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed777f516.jpg" alt=""></p>
<p>周视图：</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed7c9419f.jpg" alt=""></p>
<p>RescueTime 中详细的时间报表让你明白时间去哪儿了，上图右下角可以编辑行为的积极性和类别噢。值得注意的是基础的报表统计功能免费用户就能使用，因此是控制时间入门的好选择。</p>
<p>Pro用户的屏蔽消极网页功能，可以不用改 hosts 了…</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed8dd5bdf.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed81bac2a.jpg" alt=""></p>
<p>(我这里就是今天消极时间到达半小时自动开始专注状态，把要本博文要查的一些网站都给屏蔽掉了….)</p>
<p>喜欢工作流的同学可以尝试下 RescueTime 提供的 API</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809eda37c832.jpg" alt=""></p>
<p>想要尝试Pro用户版的可以通过这个<a href="https://www.rescuetime.com/ref/1150093" target="_blank" rel="external">推荐链接</a>注册，获得两星期的高级用户功能解锁，如果你想买一年，建议去数码荔枝买国人专供的99元一年，而不是原本坑爹的72美刀一年。</p>
<h3 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h3><p>如果你不喜欢 RescueTime 那种把数据上传到服务器统计的感觉，你可以尝试下<a href="https://timingapp.com" target="_blank" rel="external">Timing</a>，Timing 可以看做离线版的 RescueTime。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9ae72c6.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9314bfb.jpg" alt=""></p>
<p>详细的网站、文件地址记录，还支持播放记录等</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed8beb068.jpg" alt=""></p>
<p>支持数据导出</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9403149.jpg" alt=""></p>
<p>点击<a href="https://timingapp.com/faq.php" target="_blank" rel="external">这里</a>可以查看更详细的支持软件列表</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ef362e08a.jpg" alt=""></p>
<p>相比 RescueTime，Timing 只是单纯地记录时间，唯一会联网的操作可能就是升级软件了..你可以在 <a href="https://itunes.apple.com/cn/app/timing-automatic-time-tracker/id431511738?mt=12&amp;ign-mpt=uo%3D4" target="_blank" rel="external">Mac App Store</a> 花253元购买，不过在数码荔枝里面这 APP 是99元。</p>
<p>我以前购买The 2016 All-Star Mac Bundle的时候剩了一个，自己已经有一个了，如果不介意Registration Email是我邮箱的话，我打算50元出售这个 Key，有意的可以发邮件给我：<code>superfrankie621@gmail.com</code>。</p>
<h3 id="TopTracker"><a href="#TopTracker" class="headerlink" title="TopTracker"></a>TopTracker</h3><p><a href="https://www.toptal.com/tracker" target="_blank" rel="external">TopTracker</a> 就是我今天在 Next 上看到的令人惊喜的一个时间追踪软件，为什么说是惊喜呢？因为它是<strong>完全免费的</strong>！免费万岁！！</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed96c22a7.jpg" alt=""></p>
<p>TopTracker 适用于macOS、Windows、Linux。不过 TopTracker 是属于<strong>主动记录</strong>的时间追踪软件，你可以创建一个事件，开始做了就让软件开始记录，做完再停止。TopTracker 是设计给自由职业者的，所以会多一些团队协作的功能。例如下面可以邀请成员来到 Project 中，互相查看工作进度。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9634ddd.jpg" alt=""></p>
<p>你可以在网页上操作</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9a97301.jpg" alt=""></p>
<p>也可以在客户端上操作</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9e270f3.jpg" alt=""></p>
<p>你还可以把忙时没记录的事件补充进去</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809ed9ea4a63.jpg" alt=""></p>
<p>网页版也能记录事件，还能够查看桌面端查看不了的时间报表。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809eda0a4abd.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809edbd31827.jpg" alt=""></p>
<p>注意：这软件有个让我费解的功能就是会自动截图，在使用的过程中出现一个“是否同意截图”的框，拒绝后你的状态就是短暂变成 Offline。你可以在设置中设置自动模糊<code>Blur Screenshots Before Upload</code>，也可以主动删除截图文件夹，否则上传截图到服务器的行为会让一些用户炸毛，这里先打预防针。</p>
<p>总而言之 TopTracker 的功能较类似 iOS 上各种时间记录 App，例如时间块、iHour 等等，团队协作方面类似 macOS 上的奇妙清单。个人认为相对于传统的手打表格记录时间(洪荒气息扑面而来！)，TopTracker 也不失为一个好的选择，因为不是每个人都会每天在电脑面前呆十小时以上，每天尝试有意识地记录时间，一周下来再详细设定计划如何利用好荒废掉的时间，不过太琐碎的事情(比如5分钟以内)都记录的话反而会是一种累赘，最重要的是养成习惯再调整自己。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>做个总结吧，RescueTime 免费提供的功能其实就已经足够使用了，目标和屏蔽网站这种高级功能按需购买吧(我已经剁手了！)。</p>
<p>另外 macOS 上的时间追踪软件还有Qbserve、Tyme 2、Time Sink等等，大家可以自己找找评测看，其中Tyme 2设置较繁琐，但是提供的接口也多。总之我把相对最好用最实惠的这三款时间追踪软件推荐给你们了，当然成效不是看工具而是看使用者如何使用。经常使用iPhone 的也可以尝试使用时间块和 iHour 培养记录时间的习惯，女生也可以把记录时间当成记账一样，细水长流嘛~</p>
<p>博文写到这里我 RescueTime 分数已经从65升到71了哈哈哈，还弹出来自己设的提醒，积极行为到达三小时发送自定义通知~</p>
<p><img src="http://ooo.0o0.ooo/2016/10/21/5809edc245a04.jpg" alt=""></p>
<p>希望你们能够通过这些足够好的工具管理好碎片时间，认真分析什么时间适合做什么。例如坐公交搭地铁就不要看要动脑筋的书，有大块的空闲时间也不要拿来浪费到无聊事情上。</p>
<table>
<thead>
<tr>
<th></th>
<th>有趣</th>
<th>无趣</th>
</tr>
</thead>
<tbody>
<tr>
<td>烧脑</td>
<td>高度专注力(看算法书、写博客)</td>
<td>高度专注力(背单词、写代码)</td>
</tr>
<tr>
<td></td>
<td>中度专注力(TED,纪录片,科普书)</td>
<td></td>
</tr>
<tr>
<td></td>
<td>中度专注力(游戏)</td>
<td></td>
</tr>
<tr>
<td>不烧脑</td>
<td>低度专注力(和朋友聊天)</td>
<td>低度专注力(打扫卫生、整理文件)</td>
</tr>
<tr>
<td></td>
<td>低度专注力(刷美剧、刷朋友圈、刷知乎)</td>
<td>低度专注力(删苹果广告、备份文件、整理收藏夹)</td>
</tr>
</tbody>
</table>
<p>最后推荐 <a href="https://www.zhihu.com/question/27297809/answer/110588267" target="_blank" rel="external">怎样用 Mac 和 iPhone 高效学习？-胖子邓的回答</a>，共勉之~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/10/21/5809ed7f43054.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;时间统计法-不是一个节俭的计划工作者的预算，而是向时间自我剖析，对时间的崇敬。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;《奇特的一生》&lt;/strong&gt;&lt;cite&gt;格拉宁&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;今天在 Next 上发现又一款时间追踪软件横空出世了，所以对几个 macOS 上的时间追踪软件做个总结。近年以来，可以看到很多时间方面的应用遍地开花：Todo 类、番茄钟、备忘事项、日历等等，可以看出来人们对自己的时间越来越看重，如何掌握和使用好碎片时间，是当今一个热门的主题。而时间追踪类软件是其中一个较低调的类别，我目前遇到的大多是帮助你知道时间是如何花掉的，所以这类软件还需要一个会分析时间的使用者。&lt;br&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="macOS" scheme="http://frankorz.com/tags/macOS/"/>
    
      <category term="APP" scheme="http://frankorz.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>用JSONExport一键生成JSON Model</title>
    <link href="http://frankorz.com/2016/10/17/powerful-jsonexport/"/>
    <id>http://frankorz.com/2016/10/17/powerful-jsonexport/</id>
    <published>2016-10-17T10:08:17.000Z</published>
    <updated>2017-04-06T11:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>以前跟着《第一行代码》入门 Android 的时候，学过几个解析 JSON 的方法，一个一个按 key 名找、建对象存等等，解析的工具也很多，以前对 JSON 不熟悉，这也浪费了我很多时间。现在刚入门 iOS 没多久就让我看到神器 JSONExport，解析 JSON 从此只是几行代码的事情~</p>
<p>JSONExport 是一个运行在 macOS 上通过 JSON 字符串转为 model 的开源工具，支持 Java、Objective-C 和 Swift。我发现了这工具之后忍不住用 Charles 到处抓 API 测试，这是后话~</p>
<p>每次学完了都觉得很基础..还是记下来吧..<br><a id="more"></a></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>JSONExport 的项目地址在这：<a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="external">JSONExport</a><br>不过项目需要自己编译，嫌麻烦的可以直接下载我汉化好的 <a href="https://pan.baidu.com/s/1dE4WX1J" target="_blank" rel="external">JSONExport</a> ，如果失效请在评论留言，下面是界面：</p>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecadbf15f.jpg" alt=""></p>
<p>左边把 JSON 字符串放入，右下角选择要生成的 Model 即可。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这里我使用<a href="https://developers.douban.com/wiki/?title=book_v2" target="_blank" rel="external">豆瓣图书 Api V2</a>的 API 做示范。</p>
<p>根据提供的 API ，假如我想获得十个书名为”ios 开发”的书籍名，可以构建 URL 为<code>&quot;https://api.douban.com/v2/book/search?count=10&amp;q=ios%20%E5%BC%80%E5%8F%91&quot;</code>，在网页中打开获得 JSON 字符串。</p>
<p>遇到的坑：</p>
<ul>
<li>JSON 字符串中含有中文可能会被说明“无效 JSON”，转成unicode再放到工具里去用吧，例如：<a href="http://www.bejson.com/convert/unicode_chinese/" target="_blank" rel="external">在线unicode转中文</a>，或者用下图的 Paw。</li>
<li>Mac App Store 中也有同名工具，应该是别人直接修改原作者后上传的，能够根据 JSON 地址提取 JSON 数据，不过也是一搜中文就闪退。</li>
<li>JSONExport 没生成正确的 Model 就重启吧。</li>
</ul>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecb16dbe5.jpg" alt=""></p>
<p>复制至JSONExport中，右下角按需选择，这里我用 Swift - Struct 做示范。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecb43951a.jpg" alt=""></p>
<p>之后点右下角保存，把这六个文件拷到项目中就能直接使用了！我们可以直接构建一个 Struct。</p>
<p><code>BookInfo.swift</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BookInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> images = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> title = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> isbn13 = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> url = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> summary = <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我只需要图片、标题、isbn13、url和简介，接下来在 ViewController 中新建个方法获取数据，这里用了用 Swift 写的第三方网络库 Just。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> searchUrl = <span class="string">"https://api.douban.com/v2/book/search?count=10&amp;q=ios%20%E5%BC%80%E5%8F%91"</span><span class="comment">//搜索"ios 开发"</span></div><div class="line"><span class="keyword">var</span> booklist : [<span class="type">BookInfo</span>] = []</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">   <span class="keyword">super</span>.viewDidLoad()</div><div class="line">   loadList()</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadList</span><span class="params">()</span></span> &#123;</div><div class="line">   <span class="type">Just</span>.<span class="keyword">get</span>(searchUrl) &#123; (r) <span class="keyword">in</span></div><div class="line">       <span class="keyword">guard</span> <span class="keyword">let</span> json = r.json <span class="keyword">as</span>? <span class="type">NSDictionary</span> <span class="keyword">else</span> &#123;</div><div class="line">           <span class="built_in">print</span>(<span class="string">"没有数据啊！！！"</span>)</div><div class="line">           <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">let</span> books = <span class="type">SearchBook</span>(fromDictionary: json).books!</div><div class="line">       </div><div class="line">       <span class="keyword">self</span>.booklist = books.<span class="built_in">map</span>(&#123; (book) -&gt; <span class="type">BookInfo</span> <span class="keyword">in</span></div><div class="line">           <span class="comment">//数组转换数组 直接在 map 中用闭包</span></div><div class="line">           <span class="keyword">return</span> <span class="type">BookInfo</span>(images: book.images.large, title: book.title, isbn13: book.isbn13, url: book.url, summary: book.summary)</div><div class="line">       &#125;)</div><div class="line"></div><div class="line">       <span class="built_in">dump</span>(<span class="keyword">self</span>.booklist)</div><div class="line">       </div><div class="line">       <span class="type">OperationQueue</span>.main.addOperation &#123;</div><div class="line">           <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">           <span class="keyword">self</span>.refreshControl?.endRefreshing()</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 Xcode 自动提示没有提供初始化语句，可以在刚刚的 <code>BookInfo.swift</code> 中自动补全代码，再剪切过来用。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecaebfedf.jpg" alt=""></p>
<p>运行后可以看到 dump 的数据已经出来了：</p>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecb190f67.jpg" alt=""></p>
<p>其实本文到这就差不多了，主要注意 JSON 中数组和这里生成 Model 的关系。最后附上一个小 Demo ，还没加搜索框，没用完解析的数据，将就看吧…_(:ｪ｣∠)_</p>
<p><img src="http://ooo.0o0.ooo/2016/10/17/5804ecb0df52d.jpg" alt=""></p>
<p>项目可以参照这里 <a href="https://github.com/Latias94/Donban-demo-with-JSONExport" target="_blank" rel="external">Donban-demo-with-JSONExport</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前跟着《第一行代码》入门 Android 的时候，学过几个解析 JSON 的方法，一个一个按 key 名找、建对象存等等，解析的工具也很多，以前对 JSON 不熟悉，这也浪费了我很多时间。现在刚入门 iOS 没多久就让我看到神器 JSONExport，解析 JSON 从此只是几行代码的事情~&lt;/p&gt;
&lt;p&gt;JSONExport 是一个运行在 macOS 上通过 JSON 字符串转为 model 的开源工具，支持 Java、Objective-C 和 Swift。我发现了这工具之后忍不住用 Charles 到处抓 API 测试，这是后话~&lt;/p&gt;
&lt;p&gt;每次学完了都觉得很基础..还是记下来吧..&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://frankorz.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://frankorz.com/tags/iOS/"/>
    
      <category term="JSON" scheme="http://frankorz.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Swift 算法查找篇笔记</title>
    <link href="http://frankorz.com/2016/10/12/Swift-Algorithms-1/"/>
    <id>http://frankorz.com/2016/10/12/Swift-Algorithms-1/</id>
    <published>2016-10-12T10:22:47.000Z</published>
    <updated>2016-10-13T23:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>未完工<br>尚缺 k-th Largest Element、Selection Sampling、Union-Find</p>
</blockquote>
<p><img src="http://ooo.0o0.ooo/2016/10/12/57fe492d1e042.jpg" alt=""></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是一系列关于Swift语言的算法笔记，Swift版本为3.0，参考的教程来自 <a href="https://github.com/raywenderlich/swift-algorithm-club" target="_blank" rel="external">Swift Algorithms Club</a> 。</p>
<p>所有的代码可以直接在Xcode的Playground中运行，前面的算法较简单，主要说说算法的基础、思路和一些Swift语言的特性，我十分推荐你把这里的算法独自实现一遍。</p>
<p>另外这里可以下载 Swift Algorithms Club 算法教程的Epub文件！ <a href="https://github.com/aquarchitect/swift-algorithm-club/releases/download/1.0.0/SwiftAlgo.epub" target="_blank" rel="external">点我下载</a><br><a id="more"></a></p>
<h3 id="大-O-符号"><a href="#大-O-符号" class="headerlink" title="大 O 符号"></a>大 O 符号</h3><p>大O符号（英语：Big O notation）是一种算法复杂度的相对表示方式。</p>
<p>这个句子里有一些重要而严谨的用词：</p>
<ul>
<li><p>相对(relative)：你只能比较相同的事物。你不能把一个做算数乘法的算法和排序整数列表的算法进行比较。但是，比较2个算法所做的算术操作（一个做乘法，一个做加法）将会告诉你一些有意义的东西。</p>
</li>
<li><p>表示(representation)：大O(用它最简单的形式)把算法间的比较简化为了一个单一变量。这个变量的选择基于观察或假设。例如，排序算法之间的对比通常是基于比较操作(比较2个结点来决定这2个结点的相对顺序)。这里面就假设了比较操作的计算开销很大。但是，如果比较操作的计算开销不大，而交换操作的计算开销很大，又会怎么样呢？这就改变了先前的比较方式。</p>
</li>
<li><p>复杂度(complexity)：如果排序10,000个元素花费了我1秒，那么排序1百万个元素会花多少时间？在这个例子里，复杂度就是相对其他东西的度量结果。 </p>
</li>
</ul>
<p>简单地说，O 表示法能给你一个算法的运行时间和它使用的内存量的粗略表示，这两种表示分为时间复杂度和空间复杂度，不过我们通常用 O 来表示时间复杂度，即一个算法执行的快慢。</p>
<table>
<thead>
<tr>
<th>大 O</th>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(1)</td>
<td>常数</td>
<td>这是最好的。 该算法不管有多少数据，总是花费相同的时间。 示例：通过索引查找数组的元素。</td>
</tr>
<tr>
<td>O(log n)</td>
<td>对数</td>
<td>特别好。 该算法将每次迭代的数据量减半。 如果你有100个元素，它需要大约7个步骤来找到答案。 有1000个，需要10个步骤。 100万个只需要20步。 即使对于大量的数据，这也是超快的。 示例：二进制搜索。</td>
</tr>
<tr>
<td>O(n)</td>
<td>线性，次线性</td>
<td>很好。 如果你有100个元素，需要100个步骤。 元素个数增加一倍，该算法花费的时间会是两倍。 示例：顺序搜索。</td>
</tr>
<tr>
<td>O(n log n)</td>
<td>线性对数</td>
<td>体面的表现。 这比线性稍差，但不太差。 示例：最快的通用排序算法。</td>
</tr>
<tr>
<td>O(n^2)</td>
<td>平方</td>
<td>有点慢。 如果你有100个元素，要执行100 ^ 2 = 10,000步骤。 加倍的元素数量使其慢四倍（因为2平方等于4）。 示例：使用嵌套循环的算法，如插入排序。</td>
</tr>
<tr>
<td>O(n^3)</td>
<td>立方</td>
<td>很慢。 如果你有100元素，会是100 ^ 3 = 1,000,000步骤。 输入大小加倍使其慢8倍。 示例：矩阵乘法。</td>
</tr>
<tr>
<td>O(2^n)</td>
<td>指数</td>
<td>特别慢。 你想避免这些算法，但有时你没有选择。 添加一个元素就会使运行时间加倍。 示例：<a href="http://baike.baidu.com/view/45957.htm" target="_blank" rel="external">旅行推销员问题</a>。</td>
</tr>
<tr>
<td>O(n!)</td>
<td>阶乘</td>
<td>无法忍受的慢。 一百万年也运行不完。</td>
</tr>
</tbody>
</table>
<p><img src="http://ooo.0o0.ooo/2016/10/19/58076cee4c984.png" alt=""></p>
<h3 id="Linear-Search"><a href="#Linear-Search" class="headerlink" title="Linear Search"></a>Linear Search</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Linear Search，又称线性查找、顺序查找。在给定的数组中，我们会遍历所有的元素，并逐个对比是否与要找的特定元素相等，找到即停止查找，返回特定元素的索引，反之继续遍历对比直至对比完最后一个元素。</p>
<p>目标：从一个数组查找到一个元素</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">linearSearch</span>&lt;T: Equatable&gt;<span class="params">(<span class="number">_</span> array: [T], <span class="number">_</span> object: T)</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line">  <span class="keyword">for</span> (index, obj) <span class="keyword">in</span> array.enumerated() <span class="keyword">where</span> obj == object &#123;</div><div class="line">    <span class="keyword">return</span> index</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>放进playground中测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>]</div><div class="line">linearSearch(array, <span class="number">2</span>) <span class="comment">//返回1</span></div></pre></td></tr></table></figure>
<p>这是最简单的一个查找了，这里说说Swift的语言特性。</p>
<p><code>&lt;T: Equatable&gt;</code> 中 <code>T</code> 指<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/23_Generics.html" target="_blank" rel="external">泛型</a>，而 <code>Equatable</code> 是Swift标准库中定义的一个协议，该协议要求任何遵循该协议的类型必须实现等式符 <code>==</code> 及不等符 <code>!=</code>，从而能对该类型的任意两个值进行比较。所有的 Swift 标准类型自动支持 <code>Equatable</code> 协议。</p>
<p><code>Int?</code> 中的 <code>?</code> 是指返回的值是 <code>Optional</code> 的，如果查找找到值就返回索引值，找不到就返回 <code>nil</code>，<code>Optional</code> 特性让一个值能同时兼容两种情况。</p>
<p><code>enumerated()</code>是一个实例方法，返回的是键值对 <code>(n, x)</code>，n 表示一个连续的从0开始的正整数，x 表示对应的元素。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>]</div><div class="line"><span class="keyword">for</span> (index, obj) <span class="keyword">in</span> array.enumerated() &#123;<span class="comment">//返回一个 array 拷贝</span></div><div class="line">	<span class="built_in">print</span>(<span class="string">"<span class="subst">\(index)</span> -&gt; <span class="subst">\(obj)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//0 -&gt; 5</span></div><div class="line"><span class="comment">//1 -&gt; 2</span></div><div class="line"><span class="comment">//2 -&gt; 4</span></div><div class="line"><span class="comment">//3 -&gt; 7</span></div></pre></td></tr></table></figure>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>线性查找的效率是<strong>O(n)</strong><a href="关于大O符号可以参考这里：[维基百科](https://zh.wikipedia.org/wiki/大O符号)">^Big O notation</a>。在最差的情况，我们需要把全部元素都比较一边，最好的情况是我们第一次就查找到相同元素。</p>
<h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Binary Search，就是著名、高效并应用广泛的<strong>二分查找</strong>算法。</p>
<p>目标：快速地从一个数组查找到一个元素</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>通常情况下，Swift 的<code>indexOf()</code>方法已经足够好了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">11</span>, <span class="number">59</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">53</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">67</span>, <span class="number">47</span>, <span class="number">13</span>, <span class="number">37</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">41</span>, <span class="number">23</span>]</div><div class="line"></div><div class="line">numbers.indexOf(<span class="number">43</span>)  <span class="comment">// returns 15</span></div></pre></td></tr></table></figure>
<p>内置的<code>indexOf()</code>方法实现了一个线性查找，实现方式类似以下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">linearSearch</span>&lt;T: Equatable&gt;<span class="params">(<span class="number">_</span> a: [T], <span class="number">_</span> key: T)</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; a.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> a[i] == key &#123;</div><div class="line">            <span class="keyword">return</span> i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linearSearch(numbers, <span class="number">43</span>)  <span class="comment">// returns 15</span></div></pre></td></tr></table></figure>
<p>这代码其实和一开始的线性查找差不多，但是线性查找效率不太高，平均都要搜索半个数组，如果数组足够大，查找将会变得很慢。</p>
<h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><blockquote>
<p>凡邦之有疾病者，疕疡者造焉，则使医分而治之，是亦不自医也。<br>──清·俞樾《群经平议·周官二》</p>
</blockquote>
<p>分而治之方法与软件设计的模块化方法非常相似。为了解决一个大的问题，可以： </p>
<ol>
<li>把它分成两个或多个更小的问题</li>
<li>分别解决每个小问题</li>
<li>把各小问题的解答组合起来，即可得到原问题的解答。小问题通常与原问题相似，可以递归地使用分而治之策略来解决。</li>
</ol>
<p>在本算法中，我们需要用这策略去不断的拆分数组，直到找到特定元素。另外二分查找的效率是<strong>O(log n)</strong>，也就是对一个有着1,000,000个元素的数组只要将近20步就能找到特定元素，因为<code>log_2(1,000,000) = 19.9</code>，十亿个元素也只需要30步就能完成查找！</p>
<p>听起来爽，但是二分查找有个缺点，就是数组必须是<strong>排序好</strong>的，不过这通常不是一个问题。</p>
<p>二分查找是怎么操作的呢？</p>
<ul>
<li>把排序好的数组平分成两部分，把特定元素与中间键比较，看特定元素应该会在数组左部分（较小）、右部分（较大）或直接相等。</li>
<li>如果在数组左部分，则把数组切剩下左部分，继续进行二分查找。</li>
<li>这里使用了递归，切分的是数组范围<code>range</code></li>
</ul>
<p>先来看看代码吧：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: [T], key: T, range: Range&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span> range.lowerBound &gt;= range.upperBound &#123;</div><div class="line">        <span class="comment">// 如果经过不断的数组切分，导致范围下界大于等于范围上界，则说明找不到特定元素</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 计算从哪划分数组</span></div><div class="line">        <span class="keyword">let</span> midIndex = range.lowerBound + (range.upperBound - range.lowerBound) / <span class="number">2</span></div><div class="line"></div><div class="line">        <span class="comment">// 如果中间键（索引为midIndex）比特定元素大，说明特定元素在数组左部分(range.lowerBound ..&lt; midIndex)</span></div><div class="line">        <span class="keyword">if</span> a[midIndex] &gt; key &#123;</div><div class="line">            <span class="keyword">return</span> binarySearch(a, key: key, range: range.lowerBound ..&lt; midIndex)</div><div class="line"></div><div class="line">        <span class="comment">// 如果中间键（索引为midIndex）比特定元素小，说明特定元素在数组右部分(midIndex + 1 ..&lt; range.upperBound)</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a[midIndex] &lt; key &#123;</div><div class="line">            <span class="keyword">return</span> binarySearch(a, key: key, range: midIndex + <span class="number">1</span> ..&lt; range.upperBound)</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果中间键（索引为midIndex）与特定元素相等，说明找到啦！</span></div><div class="line">            <span class="keyword">return</span> midIndex</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试1：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>]</div><div class="line"></div><div class="line">binarySearch(numbers, key: <span class="number">43</span>, range: <span class="number">0</span> ..&lt; numbers.<span class="built_in">count</span>)  <span class="comment">// gives 13</span></div><div class="line"></div><div class="line"><span class="comment">//要查找的特定元素：43</span></div><div class="line"><span class="comment">//第1次查找</span></div><div class="line"><span class="comment">//--数组：[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;19</span></div><div class="line"><span class="comment">//--中间键是：29</span></div><div class="line"><span class="comment">//第2次查找</span></div><div class="line"><span class="comment">//--数组：[31, 37, 41, 43, 47, 53, 59, 61, 67]</span></div><div class="line"><span class="comment">//--查找范围：10..&lt;19</span></div><div class="line"><span class="comment">//--中间键是：47</span></div><div class="line"><span class="comment">//第3次查找</span></div><div class="line"><span class="comment">//--数组：[31, 37, 41, 43]</span></div><div class="line"><span class="comment">//--查找范围：10..&lt;14</span></div><div class="line"><span class="comment">//--中间键是：41</span></div><div class="line"><span class="comment">//第4次查找</span></div><div class="line"><span class="comment">//--数组：[43]</span></div><div class="line"><span class="comment">//--查找范围：13..&lt;14</span></div><div class="line"><span class="comment">//--中间键是：43</span></div><div class="line"><span class="comment">//--查找到，索引为13</span></div></pre></td></tr></table></figure>
<p>测试2：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>]</div><div class="line"></div><div class="line">binarySearch(numbers, key: <span class="number">24</span>, range: <span class="number">0</span> ..&lt; numbers.<span class="built_in">count</span>)  <span class="comment">// gives nil</span></div><div class="line"></div><div class="line"><span class="comment">//要查找的特定元素：24</span></div><div class="line"><span class="comment">//第1次查找</span></div><div class="line"><span class="comment">//--数组：[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;19</span></div><div class="line"><span class="comment">//--中间键是：29</span></div><div class="line"><span class="comment">//第2次查找</span></div><div class="line"><span class="comment">//--数组：[2, 3, 5, 7, 11, 13, 17, 19, 23]</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;9</span></div><div class="line"><span class="comment">//--中间键是：11</span></div><div class="line"><span class="comment">//第3次查找</span></div><div class="line"><span class="comment">//--数组：[13, 17, 19, 23]</span></div><div class="line"><span class="comment">//--查找范围：5..&lt;9</span></div><div class="line"><span class="comment">//--中间键是：19</span></div><div class="line"><span class="comment">//第4次查找</span></div><div class="line"><span class="comment">//--数组：[23]</span></div><div class="line"><span class="comment">//--查找范围：8..&lt;9</span></div><div class="line"><span class="comment">//--中间键是：23</span></div><div class="line"><span class="comment">//第5次查找</span></div><div class="line"><span class="comment">//--数组：[]</span></div><div class="line"><span class="comment">//--查找范围：9..&lt;9</span></div><div class="line"><span class="comment">//--找不到！不干了！</span></div></pre></td></tr></table></figure>
<p>这其中使用了 <code>Comparable</code> 协议，没有这协议，泛型和其他值是不能比较的， <code>Comparable</code> 协议就是说明<code>T</code>是可比较的。</p>
<p>测试1中用线性查找的话要查找13次，测试2中用线性查找要查找19次，而二分查找分别只用4次和5次就完成查找，能感受算法的威力吗~</p>
<h4 id="迭代和递归"><a href="#迭代和递归" class="headerlink" title="迭代和递归"></a>迭代和递归</h4><p>二分查找是递归的因为我们每次查找都是相同的逻辑，当然用迭代去实现将会更加有效率，因为不需要一次一次地调用函数（考虑下内存空间！）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: [T], key: T)</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line">    <span class="keyword">var</span> lowerBound = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> upperBound = a.<span class="built_in">count</span></div><div class="line">    <span class="keyword">while</span> lowerBound &lt; upperBound &#123;</div><div class="line">        <span class="keyword">let</span> midIndex = lowerBound + (upperBound - lowerBound) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> a[midIndex] == key &#123;</div><div class="line">            <span class="keyword">return</span> midIndex</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a[midIndex] &lt; key &#123;</div><div class="line">            lowerBound = midIndex + <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            upperBound = midIndex</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>]</div><div class="line"></div><div class="line">binarySearch(numbers, key: <span class="number">43</span>)  <span class="comment">// gives 13</span></div></pre></td></tr></table></figure>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>由于数组必须要先排序，排序和查找的时间加在一起算的话，二分查找耗时可能比顺序查找还多，因此二分查找适合在那种只用排序一次而要查找很多次的情况。</p>
<h3 id="Count-Occurrences"><a href="#Count-Occurrences" class="headerlink" title="Count Occurrences"></a>Count Occurrences</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>Count Occurrences 就是计数，有时候我们需要计算一个数字出现的次数。当然我们可以用线性查找从头查到尾，这样这种计数的效率是<strong>O(n)</strong>，当然如果我们修改一下二分查找，也能把计数的效率提高到<strong>O(log n)</strong>，别忘了二分查找的条件是数组排序好。</p>
<p>目标：计算一个特定元素在一个<strong>排序好</strong>的数组中出现的次数</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">countOccurrencesOfKey</span><span class="params">(<span class="number">_</span> key: Int, inArray a: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">leftBoundary</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> low = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> high = a.<span class="built_in">count</span></div><div class="line">    <span class="keyword">while</span> low &lt; high &#123;</div><div class="line">      <span class="keyword">let</span> midIndex = low + (high - low)/<span class="number">2</span></div><div class="line">      <span class="keyword">if</span> a[midIndex] &lt; key &#123;</div><div class="line">        low = midIndex + <span class="number">1</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        high = midIndex</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">rightBoundary</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> low = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> high = a.<span class="built_in">count</span></div><div class="line">    <span class="keyword">while</span> low &lt; high &#123;</div><div class="line">      <span class="keyword">let</span> midIndex = low + (high - low)/<span class="number">2</span></div><div class="line">      <span class="keyword">if</span> a[midIndex] &gt; key &#123;</div><div class="line">        high = midIndex</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        low = midIndex + <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> rightBoundary() - leftBoundary()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span> ]</div><div class="line"></div><div class="line">countOccurrencesOfKey(<span class="number">3</span>, inArray: a)  <span class="comment">// returns 4</span></div><div class="line"></div><div class="line"><span class="comment">//右边界第1次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11]</span></div><div class="line"><span class="comment">//--索引为6的中间键：3</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;12</span></div><div class="line"><span class="comment">//右边界第2次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[6, 8, 10, 11, 11]</span></div><div class="line"><span class="comment">//--索引为9的中间键：10</span></div><div class="line"><span class="comment">//--查找范围：7..&lt;12</span></div><div class="line"><span class="comment">//右边界第3次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[6, 8]</span></div><div class="line"><span class="comment">//--索引为8的中间键：8</span></div><div class="line"><span class="comment">//--查找范围：7..&lt;9</span></div><div class="line"><span class="comment">//右边界第4次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[6]</span></div><div class="line"><span class="comment">//--索引为7的中间键：6</span></div><div class="line"><span class="comment">//--查找范围：7..&lt;8</span></div><div class="line"><span class="comment">//low值为：7</span></div><div class="line"><span class="comment">//---------------</span></div><div class="line"><span class="comment">//左边界第1次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11]</span></div><div class="line"><span class="comment">//--索引为6的中间键：3</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;12</span></div><div class="line"><span class="comment">//左边界第2次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[0, 1, 1, 3, 3, 3]</span></div><div class="line"><span class="comment">//--索引为3的中间键：3</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;6</span></div><div class="line"><span class="comment">//左边界第3次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[0, 1, 1]</span></div><div class="line"><span class="comment">//--索引为1的中间键：1</span></div><div class="line"><span class="comment">//--查找范围：0..&lt;3</span></div><div class="line"><span class="comment">//左边界第4次查找</span></div><div class="line"><span class="comment">//--划分范围后的数组：[1]</span></div><div class="line"><span class="comment">//--索引为2的中间键：1</span></div><div class="line"><span class="comment">//--查找范围：2..&lt;3</span></div><div class="line"><span class="comment">//low值为：3</span></div></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/Latias94/3d85a5362ce68998f08310d2c7839efd" target="_blank" rel="external">带print版二分查找计数</a></p>
<p>这里使用二分查找方式计数的技巧就是找到特定元素出现的左右边界，当然我们这次要查找的不是特定元素3，而是索引为2的1（左边界）和索引为7的6（右边界）。我们通过不断把左边界和特定元素比较，在第n-1次查找中，范围中的数组upperbound就是左边界，同理右边界在第n-1次查找中，范围中的数组lowerbound就是右边界。如果左边界和右边界都返回0，则代表找不到特定元素。</p>
<p>这是运用算法解决问题的一次实践。</p>
<p>跑个题，我在高中的时候是个小课代表，老师通常会把一叠改好的按学号排序的试卷交给我发放给全班同学。我记得同学各自的学号，查找的时候我会估摸着同学的学号，然后在一叠试卷中的相应位置抽出一张来。不是，放进去，试卷对应的学号小了，我就继续往后估摸位置再抽一张，直到找到为止，这很像二分查找吧！</p>
<h3 id="Select-Minimum-Maximum"><a href="#Select-Minimum-Maximum" class="headerlink" title="Select Minimum / Maximum"></a>Select Minimum / Maximum</h3><h4 id="最大值或最小值"><a href="#最大值或最小值" class="headerlink" title="最大值或最小值"></a>最大值或最小值</h4><p>Select Minimum / Maximum，选择最小值或最大值，也是我们会遇到的情况。</p>
<p>目标：在一个未排序的数组中找到最小值或最大值</p>
<h5 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a>🌰</h5><p>举个栗子，我们要在一个未排序的数组<code>[ 8, 3, 9, 4, 6 ]</code>中找到最大值。</p>
<ol>
<li>找到第一个元素<code>8</code>，存储为最大值</li>
<li>找到下一个元素<code>3</code>，比较现有最大值<code>8</code>，3&lt;8，所以最大值<code>8</code>不变</li>
<li>找到下一个元素<code>9</code>，比较现有最大值<code>8</code>，9&gt;8，所以最大值赋值为<code>9</code></li>
<li>重复步骤直到所有元素遍历一遍</li>
</ol>
<p>最小值和以上步骤类似，每次储存较小值即可。</p>
<h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">minimum</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: [T])</span></span> -&gt; <span class="type">T</span>? &#123; </div><div class="line">  <span class="comment">//本来swift2的写法是(var a:[T])直接定义一个可变数组..3.0不可用</span></div><div class="line">  <span class="keyword">var</span> array = a </div><div class="line">  <span class="keyword">guard</span> !array.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">//如果数组不是不空，就不返回 nil....</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> minimum = array.removeFirst()</div><div class="line">  <span class="keyword">for</span> element <span class="keyword">in</span> array &#123;</div><div class="line">    minimum = element &lt; minimum ? element : minimum</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> minimum</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximum</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> array: [T])</span></span> -&gt; <span class="type">T</span>? &#123;</div><div class="line">  <span class="keyword">var</span> array = a</div><div class="line">  <span class="keyword">guard</span> !array.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> maximum = array.removeFirst()</div><div class="line">  <span class="keyword">for</span> element <span class="keyword">in</span> array &#123;</div><div class="line">    maximum = element &gt; maximum ? element : maximum</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> maximum</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [ <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span> ]</div><div class="line">minimum(array)   <span class="comment">// return 3</span></div><div class="line">maximum(array)   <span class="comment">// return 9</span></div></pre></td></tr></table></figure>
<h5 id="Swift标准库"><a href="#Swift标准库" class="headerlink" title="Swift标准库"></a>Swift标准库</h5><p>然而 Swift 标准库已经给我们提供了查最大值或最小值的方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [ <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span> ]</div><div class="line">array.<span class="built_in">min</span>()   <span class="comment">// This will return 3</span></div><div class="line">array.<span class="built_in">max</span>()		<span class="comment">// This will return 9</span></div></pre></td></tr></table></figure></p>
<h4 id="最大值和最小值"><a href="#最大值和最小值" class="headerlink" title="最大值和最小值"></a>最大值和最小值</h4><p>如果我们要同时查找最大值和最小值呢？</p>
<h5 id="🌰-1"><a href="#🌰-1" class="headerlink" title="🌰"></a>🌰</h5><p>如果我们要同时在一个未排序的数组<code>[ 8, 3, 9, 6, 4 ]</code>同时查找最大值和最小值，我们需要两两比较其中的元素。</p>
<ol>
<li>找到第一个元素<code>8</code>，同时存储为最大值和最小值</li>
<li>由于数组中有奇数个数组，当移除元素<code>8</code>之后，剩下<code>[3, 9]</code>和<code>[6, 4]</code>这两对子数组</li>
<li>在第一个子数组<code>[3, 9]</code>中，比较两数大小。<code>3</code>较小，与当前最小值<code>8</code>比较，3<8，因此把最小值赋值为`3`。`9`较大，与当前最大值`8`比较，9>8，因此把最大值赋值为<code>9</code>。</8，因此把最小值赋值为`3`。`9`较大，与当前最大值`8`比较，9></li>
<li>第二个子数组<code>[6, 4]</code>中，比较两数大小。<code>4</code>较小，与当前最小值<code>3</code>比较，4&gt;3，因此最小值不变。<code>6</code>较大，与当前最大值<code>9</code>比较，6&lt;9，因此最大值不变。</li>
<li>最大值为9，最小值为3。</li>
</ol>
<h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">minimumMaximum</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: [T])</span></span> -&gt; (minimum: <span class="type">T</span>, maximum: <span class="type">T</span>)? &#123;</div><div class="line">  <span class="keyword">var</span> array = a</div><div class="line">  <span class="keyword">guard</span> !array.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> minimum = array.first!</div><div class="line">  <span class="keyword">var</span> maximum = array.first!</div><div class="line"></div><div class="line">  <span class="keyword">let</span> hasOddNumberOfItems = array.<span class="built_in">count</span> % <span class="number">2</span> != <span class="number">0</span></div><div class="line">  <span class="keyword">if</span> hasOddNumberOfItems &#123;</div><div class="line">    array.removeFirst()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> !array.isEmpty &#123;</div><div class="line">    <span class="keyword">let</span> pair = (array.removeFirst(), array.removeFirst())</div><div class="line">    <span class="keyword">if</span> pair.<span class="number">0</span> &gt; pair.<span class="number">1</span> &#123;</div><div class="line">      <span class="keyword">if</span> pair.<span class="number">0</span> &gt; maximum &#123;</div><div class="line">        maximum = pair.<span class="number">0</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> pair.<span class="number">1</span> &lt; minimum &#123;</div><div class="line">        minimum = pair.<span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> pair.<span class="number">1</span> &gt; maximum &#123;</div><div class="line">        maximum = pair.<span class="number">1</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> pair.<span class="number">0</span> &lt; minimum &#123;</div><div class="line">        minimum = pair.<span class="number">0</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (minimum, maximum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = [ <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span> ]</div><div class="line"><span class="keyword">let</span> result = minimumMaximum(array)!</div><div class="line">result.minimum   <span class="comment">// This will return 3</span></div><div class="line">result.maximum   <span class="comment">// This will return 9</span></div></pre></td></tr></table></figure></p>
<p><code>hasOddNumberOfItems</code>确保数组一直能够被两两分组，实际上数组元素在 while 循环中一直在被两个两个地 remove，同时在做比较大小并赋大小值。</p>
<h3 id="k-th-Largest-Element-Problem"><a href="#k-th-Largest-Element-Problem" class="headerlink" title="k-th Largest Element Problem"></a>k-th Largest Element Problem</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>k-th Largest Element Problem，是查找一个数组中第 k 个较大的元素的问题。</p>
<p>例如，第一个较大的元素是数组中的最大值，如果数组有 n 个元素，那么第 n 个较大的元素就是该数组的最小值，中位数就是第 n/2 个较大的元素。</p>
<h4 id="naive-solution"><a href="#naive-solution" class="headerlink" title="naive solution"></a>naive solution</h4><p>下面的算法是 semi-naive (较幼稚..?)的，从第一次排序好数组后，时间复杂度为<code>O(n log n)</code>，并且额外用了 O(n)的空间复杂度。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthLargest</span><span class="params">(a: [Int], k: Int)</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line">  <span class="keyword">let</span> len = a.<span class="built_in">count</span></div><div class="line">  <span class="keyword">if</span> k &gt; <span class="number">0</span> &amp;&amp; k &lt;= len &#123;</div><div class="line">    <span class="keyword">let</span> sorted = a.<span class="built_in">sort</span>()</div><div class="line">    <span class="keyword">return</span> sorted[len - k]</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这方法中，<code>a</code> 是接受输入的数组，<code>k</code> 是返回第 k 个较大的数。</p>
<p>举个例子，设 <code>k = 4</code>，输入数组为<br><code>[ 7, 92, 23, 9, -1, 0, 11, 6 ]</code><br>一开始没有直接的办法去找第 k 个较大的数，首先我们需要排序好数组。<br><code>[ -1, 0, 6, 7, 9, 11, 23, 92 ]</code><br>现在我们需要拿到索引为<code>a.count - k</code>的元素。<br><code>a[a.count - k] = a[8 - 4] = a[4] = 9</code><br>当然了，如果要找第 k 个较小的数，我们会用<code>a[k]</code>。</p>
<h4 id="A-faster-solution"><a href="#A-faster-solution" class="headerlink" title="A faster solution"></a>A faster solution</h4><p>这里有一种结合了二分查找和快速排序的算法，时间复杂度能达到 <code>O(n)</code>。</p>
<p>还记得二分查找不断的划分一半数组吗？这样能快速地靠近要查找的元素，这里我们也需要这么做。</p>
<p>快速排序也划分数组，它把所有较小的元素移到中轴的左边，较大的元素放在右边。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未完工&lt;br&gt;尚缺 k-th Largest Element、Selection Sampling、Union-Find&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/10/12/57fe492d1e042.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;这是一系列关于Swift语言的算法笔记，Swift版本为3.0，参考的教程来自 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithms Club&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;所有的代码可以直接在Xcode的Playground中运行，前面的算法较简单，主要说说算法的基础、思路和一些Swift语言的特性，我十分推荐你把这里的算法独自实现一遍。&lt;/p&gt;
&lt;p&gt;另外这里可以下载 Swift Algorithms Club 算法教程的Epub文件！ &lt;a href=&quot;https://github.com/aquarchitect/swift-algorithm-club/releases/download/1.0.0/SwiftAlgo.epub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Swift 算法" scheme="http://frankorz.com/categories/Swift-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://frankorz.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="未完工" scheme="http://frankorz.com/tags/%E6%9C%AA%E5%AE%8C%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>macOS 代理解决方案</title>
    <link href="http://frankorz.com/2016/10/06/proxy-methods/"/>
    <id>http://frankorz.com/2016/10/06/proxy-methods/</id>
    <published>2016-10-06T02:46:24.000Z</published>
    <updated>2017-02-23T09:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://ooo.0o0.ooo/2016/10/06/57f603c594c1a.png" alt=""><br><a id="more"></a></p>
<h4 id="SpechtLite"><a href="#SpechtLite" class="headerlink" title="SpechtLite"></a>SpechtLite</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><img src="http://ooo.0o0.ooo/2016/10/06/57f603c6383e7.jpg" alt=""></p>
<p>Specht 是 <a href="https://github.com/zhuhaow" target="_blank" rel="external">zhuhaow</a> 写的一款开源的基于 Network Extension 的 Mac 版代理。Specht 有两个版本，其中 <a href="https://github.com/zhuhaow/Specht" target="_blank" rel="external">Specht</a>是基于 Network Extension 的。可以自动设置代理，可以转发所有的 TCP 流，包括所有不支持代理的软件。但 Specht 需要有开发者帐号并且申请 Network Extension 自己编译使用，因此作者又提供了 <a href="https://github.com/zhuhaow/SpechtLite" target="_blank" rel="external">SpechtLite</a>，单方面代理功能和 Surge for Mac 相当，能自定义黑白域名和ip名单，支持http、https、shadowsocks、sock5等代理方式。</p>
<p>如果你还在使用 shadowsocksX 或 shadowsocksX-R，不妨尝试下功能更丰富的 SpechtLite ，这里是<a href="https://github.com/zhuhaow/SpechtLite/releases" target="_blank" rel="external">下载地址</a>、<a href="https://github.com/zhuhaow/SpechtLite/wiki/如何配置Specht-Lite" target="_blank" rel="external">说明</a>和<a href="https://github.com/HoonHwang/SpechtLiteConf" target="_blank" rel="external">配置模板</a>。</p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>我使用的是上面配置模板链接中的配置，下载之后把几个配置文件放入<code>~/.SpechtLite</code>中，修改之后在SpechtLite菜单中点击<code>reload config</code>，别忘了还要点击<code>Set as system log</code>设置为系统代理。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- id:</span> <span class="string">adapter1</span></div><div class="line">   <span class="comment"># 类型为HTTP代理服务器.</span></div><div class="line"><span class="attr">  type:</span> <span class="string">HTTP</span></div><div class="line"><span class="attr">  host:</span> <span class="string">http.proxy</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3128</span></div><div class="line"><span class="attr">  auth:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  username:</span> <span class="string">proxy_username</span></div><div class="line"><span class="attr">  password:</span> <span class="string">proxy_password</span></div><div class="line"><span class="attr">- id:</span> <span class="string">adapter2</span></div><div class="line">   <span class="comment"># 类型为HTTP代理，但是使用SSL进行加密。</span></div><div class="line"><span class="attr">  type:</span> <span class="string">SHTTP</span></div><div class="line"><span class="attr">  host:</span> <span class="string">http.proxy.connect.via.https</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3128</span></div><div class="line"><span class="attr">  auth:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  username:</span> <span class="string">proxy_username</span></div><div class="line"><span class="attr">  password:</span> <span class="string">proxy_password</span></div><div class="line"><span class="attr">- id:</span> <span class="string">adapter3</span></div><div class="line">  <span class="comment"># 类型为shadowsocks服务器。</span></div><div class="line"><span class="attr">  type:</span> <span class="string">ss</span></div><div class="line"><span class="attr">  host:</span> <span class="string">http.proxy.connect.via.https</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3128</span></div><div class="line">  <span class="comment"># 当前支持的加密方法有: AES-128-CFB, AES-192-CFB, AES-256-CFB, chacha20, salsa20, rc4-md5</span></div><div class="line"><span class="attr">  method:</span> <span class="string">AES-128-CFB</span></div><div class="line"><span class="attr">  password:</span> <span class="string">ss_password</span></div><div class="line"><span class="attr">- id:</span> <span class="string">adapter4</span></div><div class="line"><span class="attr">  type:</span> <span class="string">socks5</span></div><div class="line"><span class="attr">  host:</span> <span class="string">socks5.server</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3128</span></div></pre></td></tr></table></figure>
<p>如果你只想使用其中的shadowsocks配置，请参考<code>adapter3</code>的<code>host</code>处填写服务器ip、<code>port</code>处填写端口、<code>method</code>参考注释填写加密方法、<code>password</code>处填写ss密码，然后把其他三个adapter项删掉，其他代理方法同理，下面的<code>speed</code>测速项也要对应修改有的<code>adapter</code>项。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rule:</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">iplist</span></div><div class="line">  <span class="comment"># 被污染的 host IP 地址</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/pollutedip</span></div><div class="line">  <span class="comment"># 我们要使用的adapter的id。</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">list</span></div><div class="line">  <span class="comment"># 直接连接给定的list文件中的正则表达式匹配域名信息（不包括IP）。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/directlist</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">direct</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">iplist</span></div><div class="line">  <span class="comment"># 直接连接基于给定的list文件中的ip范围。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/directiprange</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">direct</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">list</span></div><div class="line">  <span class="comment"># 代理连接给定的list文件中的正则表达式匹配域名信息（不包括IP）。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/proxylist</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">iplist</span></div><div class="line">  <span class="comment"># 连接基于给定的list文件中的ip范围。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/proxyiprange</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">list</span></div><div class="line">  <span class="comment"># 拒绝连接给定的list文件中的正则表达式匹配域名信息（不包括IP）。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/rejectlist</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">reject</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">iplist</span></div><div class="line">  <span class="comment"># 拒绝连接基于给定的list文件中的ip范围。</span></div><div class="line"><span class="attr">    file:</span> <span class="string">~/.SpechtLite/rejectiprange</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">reject</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">country</span></div><div class="line">  <span class="comment"># ISO 国家代码</span></div><div class="line">  <span class="comment"># 基于目标服务器的国家信息</span></div><div class="line"><span class="attr">    country:</span> <span class="string">CN</span></div><div class="line">  <span class="comment"># 这条规则是否匹配到符合这个国家的IP信息。</span></div><div class="line"><span class="attr">    match:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">direct</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">country</span></div><div class="line">  <span class="comment"># 当无法找到对应IP的地理位置信息时会返回“--”，这通常意味着这是一个内网IP。</span></div><div class="line"><span class="attr">    country:</span> <span class="bullet">--</span></div><div class="line"><span class="attr">    match:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">direct</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">DNSFail</span></div><div class="line">  <span class="comment"># 当DNS解析失败时匹配。</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  - type:</span> <span class="string">all</span></div><div class="line">  <span class="comment"># 匹配所有的请求，建议为direct，需要走代理的网站写在proxylist中。</span></div><div class="line"><span class="attr">    adapter:</span> <span class="string">proxy</span></div></pre></td></tr></table></figure>
<p>要修改规则的话可以直接去上面的路径修改，例如要走代理的域名按照下面正则的方式添加到<code>~/.SpechtLite/proxylist</code>。</p>
<p><code>list</code>规则中的<code>file</code>是一组正则表达式，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\.cn</div><div class="line">zhihu\.com  </div><div class="line">google</div></pre></td></tr></table></figure>
<p>其中第二行 和 Surge 配置文件中<code>DOMAIN-SUFFIX</code>相似，第三行和 Surge 配置文件中<code>DOMAIN-KEYWORD</code>相似。</p>
<ul>
<li>注意如果 <code>Reload config</code> 时出错，请检查每项间隔有没有多余空格</li>
</ul>
<p>你也可以一个ss服务器一个项，这样就很像Surge for Mac了。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/06/57f606ca3ac40.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/06/57f606cb61d51.jpg" alt=""></p>
<h5 id="添加测速"><a href="#添加测速" class="headerlink" title="添加测速"></a>添加测速</h5><p>如果你想实现自动选择最优线路，可以像我下面配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- id:</span> <span class="string">adapter1</span></div><div class="line"><span class="attr">  type:</span> <span class="string">ss</span></div><div class="line"><span class="attr">  host:</span> <span class="string">（ss</span> <span class="string">服务器地址）</span></div><div class="line"><span class="attr">  port:</span> <span class="string">（ss</span> <span class="string">端口）</span></div><div class="line"><span class="attr">  method:</span> <span class="string">（密码类型）</span></div><div class="line"><span class="attr">  password:</span> <span class="string">（ss</span> <span class="string">密码）</span></div><div class="line">   </div><div class="line"><span class="attr">- id:</span> <span class="string">adapter2</span></div><div class="line"><span class="attr">  type:</span> <span class="string">ss</span></div><div class="line"><span class="attr">  host:</span> <span class="string">（ss</span> <span class="string">服务器地址）</span></div><div class="line"><span class="attr">  port:</span> <span class="string">（ss</span> <span class="string">端口）</span></div><div class="line"><span class="attr">  method:</span> <span class="string">（密码类型）</span></div><div class="line"><span class="attr">  password:</span> <span class="string">（ss</span> <span class="string">密码）</span></div><div class="line">  </div><div class="line"><span class="attr">- id:</span> <span class="string">adapter3</span></div><div class="line"><span class="attr">  type:</span> <span class="string">ss</span></div><div class="line"><span class="attr">  host:</span> <span class="string">（ss</span> <span class="string">服务器地址）</span></div><div class="line"><span class="attr">  port:</span> <span class="string">（ss</span> <span class="string">端口）</span></div><div class="line"><span class="attr">  method:</span> <span class="string">（密码类型）</span></div><div class="line"><span class="attr">  password:</span> <span class="string">（ss</span> <span class="string">密码）</span></div><div class="line">  </div><div class="line"><span class="attr">- id:</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  type:</span> <span class="string">SPEED</span></div><div class="line"><span class="attr">  adapters:</span></div><div class="line"><span class="attr">    - id:</span> <span class="string">adapter1</span></div><div class="line">    <span class="comment"># Delay in milliseconds.</span></div><div class="line"><span class="attr">      delay:</span> <span class="number">0</span></div><div class="line"><span class="attr">    - id:</span> <span class="string">adapter2</span></div><div class="line">    <span class="comment"># Delay in milliseconds.</span></div><div class="line"><span class="attr">      delay:</span> <span class="number">0</span></div><div class="line"><span class="attr">    - id:</span> <span class="string">adapter3</span></div><div class="line">    <span class="comment"># Delay in milliseconds.</span></div><div class="line"><span class="attr">      delay:</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>然后下面要走代理的 <code>rule</code> 项的 <code>adapter</code> 参数写 <code>proxy</code> 即可。</p>
<h5 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h5><p>Chrome 需要安装 SwitchOmega 插件后选择系统代理使用。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/06/57f606cc988b8.jpg" alt=""></p>
<h5 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h5><p>至于要用到 hosts 的话，你可以考虑走 hosts 的网站放进 directlist 中，再在 hosts 文件中添加配置。例如苹果服务可以通过 <a href="https://github.com/gongjianhui/AppleDNS" target="_blank" rel="external">AppleDNS</a> 配置进 hosts 中，然后在 directlist 中添加相应 Keyword。</p>
<h5 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h5><p><img src="http://ooo.0o0.ooo/2016/10/06/57f603c73da67.jpg" alt=""></p>
<p>还有这个应用的Log文件不太准，一开始配置的时候就被坑了…像上图应该是<code>ShadowsocksAdapter</code>的这里却显示<code>DirectAdapter</code>，但是直连的话我是看不了Youtube的，真是迷呀。</p>
<h4 id="iTerm-2"><a href="#iTerm-2" class="headerlink" title="iTerm 2"></a>iTerm 2</h4><p>在<code>~/.zshrc</code>中加入下面代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">where</span> proxy</span></div><div class="line">proxy () &#123;</div><div class="line">  export http_proxy="http://127.0.0.1:1086" # http代理地址</div><div class="line">  export https_proxy="http://127.0.0.1:1086" # https代理地址</div><div class="line">  echo "HTTP Proxy on"</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">where</span> noproxy</span></div><div class="line">noproxy () &#123;</div><div class="line">  unset http_proxy</div><div class="line">  unset https_proxy</div><div class="line">  echo "HTTP Proxy off"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你想使用 SpechtLite 代理，可以把端口改成 SpechtLite 默认端口9090，修改后<code>source ~/.zshrc</code>就能使用了。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/06/57f603c4f05a7.jpg" alt=""></p>
<p>如果是终端.app的话需要自己复制export语句来使用代理。</p>
<h4 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h4><ol>
<li><a href="https://github.com/RobertYan/ShadowsocksX/releases" target="_blank" rel="external">ShadowsocksX</a></li>
<li><a href="https://github.com/yichengchen/ShadowsocksX-R/releases" target="_blank" rel="external">ShadowsocksX-R</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/10/06/57f603c594c1a.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="macOS" scheme="http://frankorz.com/tags/macOS/"/>
    
      <category term="代理" scheme="http://frankorz.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>打造属于自己的RSS源</title>
    <link href="http://frankorz.com/2016/10/01/rss-tutor/"/>
    <id>http://frankorz.com/2016/10/01/rss-tutor/</id>
    <published>2016-10-01T09:25:18.000Z</published>
    <updated>2017-04-10T05:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>阅读是一个主动寻求知识的过程，在如今碎片信息充斥着我们生活中的时代，我们需要清楚自己想要获取什么，把有限的时间放在消化信息上，而不是放在获取信息的途径上。如今我们可以通过各种 APP、公众号、聚合信息网站获取相对大众并符合自己的信息，但也有缺点：我需要下载这么多个 APP 去看新闻和文章吗？这些网站就拥有所有我想知道的吗？当然，像「即刻」、「Flipboard」这种阅读聚合类应用适当地缓解了这样的矛盾，但是这些信息源真的已经足够适合自己了吗？当初我找到了解决方法，也一直使用到现在，这个方法就是订阅 RSS 源。</p>
<p>本篇文章将简介 RSS，初步订阅适合自己的 RSS 源，并对于一部分不提供 RSS 订阅的网站，我们为其创建 RSS 源并订阅。<br><a id="more"></a></p>
<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>RSS（Really Simple Syndication，简易信息聚合）是一种消息来源格式规范，表达了「聚合真的很简单」这样的愿景，我们可以将其看作是一种定制个性化推送信息的服务。</p>
<h3 id="macOS-客户端"><a href="#macOS-客户端" class="headerlink" title="macOS 客户端"></a>macOS 客户端</h3><p>我推荐 Reeder 3，因其功能足且美观，还支持iOS平台，付费。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6ad03ce5.jpg" alt=""></p>
<p>另外 Leaf 也不错。</p>
<h3 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h3><p>自己不使用 Windows，根据<a href="https://www.zhihu.com/question/19580096" target="_blank" rel="external">你必读的 RSS 订阅源有哪些？</a>不负责地推荐 <a href="http://www.feeddemon.com" target="_blank" rel="external">FeedDemon</a>。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6a8da7fa.jpg" alt=""></p>
<h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>RSS 平台提供了更广泛的服务，例如查找网站的 RSS 源并订阅，查看热门订阅源，管理分类订阅源等。优秀的 RSS 平台有 Feedly、Inoreader 等，由于不可描述的原因，国内这些平台连接速度会较慢，所以我给了一下两种推荐：</p>
<p>入门的话推荐国产的<a href="http://bluereader.org" target="_blank" rel="external">深蓝阅读</a>，支持 iOS、Android 平台。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6a7a1d78.jpg" alt=""></p>
<p>✨进阶推荐 Inoreader <a href="https://www.inoreader.com/" target="_blank" rel="external">官网</a> <a href="http://sspai.com/27576" target="_blank" rel="external">评测</a><br>Inoreader 也支持 iOS、Android、Windows Phone 平台，也有对应的浏览器插件。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb132d5167d.jpg" alt=""></p>
<p>Ioreader 推荐的第三方 RSS 阅读器。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb1327dc309.jpg" alt=""></p>
<p>RSS 阅读器只是显示 RSS 内容的一个平台，因此选自己喜欢的就好，我们的重点是如何获取适合自己的 RSS 源。</p>
<h2 id="RSS源"><a href="#RSS源" class="headerlink" title="RSS源"></a>RSS源</h2><h3 id="常见网站-RSS-订阅位置"><a href="#常见网站-RSS-订阅位置" class="headerlink" title="常见网站 RSS 订阅位置"></a>常见网站 RSS 订阅位置</h3><p>我们可以再去到自己常去的网站，看看有没有提供RSS订阅。例如<a href="http://sspai.com" target="_blank" rel="external">少数派首页</a>，我搜索<code>rss</code>，就找到了RSS源。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6a57f383.jpg" alt=""></p>
<p>再例如在一些博客中，WIFI 一样的图标就是 RSS 订阅地址，不认识的话现在就记下来吧~</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb17bddd2a1.jpg" alt=""></p>
<p>我们可以直接复制链接地址到阅读器中，这样就能简单的订阅 RSS 了。</p>
<h3 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h3><p><a href="http://picklemonkey.net/feedflipper-home" target="_blank" rel="external">Feed Flipper</a> 可以把 iTunes 的播客链接转成 RSS 源地址。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb13311ee9c.jpg" alt=""></p>
<p>作者另外一个项目 <a href="http://picklemonkey.net/cloudflipper" target="_blank" rel="external">Cloud Flipper</a> 能把 SoundCloud 转成 RSS。</p>
<p>关于中文播客网站的订阅可以参考<a href="https://www.jinbo123.com/6280.html" target="_blank" rel="external">如何获取喜马拉雅、荔枝FM、考拉FM等中文播客RSS源</a>。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><p>Medium 是国外版的「简书」，里面有很多独特而优质的内容和天才般的作家，单独拿出来讲是因为我实在是太喜欢 Medium 了！</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb13282536a.jpg" alt=""></p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb132a54eb6.jpg" alt=""></p>
<p>注：这里使用的是 Safari 插件（macOS 专属）—— <a href="https://safari-extensions.apple.com/details/?id=co.kaishin.syndicate-5G38N4D8G2" target="_blank" rel="external">Syndicate</a></p>
<h3 id="RSS-搜索利器"><a href="#RSS-搜索利器" class="headerlink" title="RSS 搜索利器"></a>RSS 搜索利器</h3><p>如果不依赖平台自带的 RSS 源搜索功能，我们也有其他选择。</p>
<h4 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h4><p>前面介绍了 Safari 的 RSS 源查找插件 <a href="https://safari-extensions.apple.com/details/?id=co.kaishin.syndicate-5G38N4D8G2" target="_blank" rel="external">Syndicate</a>，这里介绍一个 Chrome 浏览器的插件——<a href="https://chrome.google.com/webstore/detail/rss-subscription-extensio/nlbjncdgjeocebhnmkbbbdekmmmcbfjd?hl=zh-CN" target="_blank" rel="external">RSS Subscription Extension</a>。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb13314368e.jpg" alt=""></p>
<h4 id="微广场"><a href="#微广场" class="headerlink" title="微广场"></a>微广场</h4><p><a href="http://www.iwgc.cn/" target="_blank" rel="external">微广场</a>提供微信公众号的RSS订阅，免费用户可订阅10个内容源。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6ac1ff41.jpg" alt=""></p>
<h3 id="RSS源推荐"><a href="#RSS源推荐" class="headerlink" title="RSS源推荐"></a>RSS源推荐</h3><p><a href="https://www.zhihu.com/question/19580096" target="_blank" rel="external">你必读的 RSS 订阅源有哪些？</a> 这里已经总结了很多优秀的订阅源。</p>
<p>例如：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>RSS地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>知乎每日精选</td>
<td><a href="http://www.zhihu.com/rss" target="_blank" rel="external">http://www.zhihu.com/rss</a></td>
</tr>
<tr>
<td>读书笔记</td>
<td><a href="http://www.write.org.cn/feed" target="_blank" rel="external">http://www.write.org.cn/feed</a></td>
</tr>
<tr>
<td>褪墨</td>
<td><a href="http://feed.mifengtd.cn/" target="_blank" rel="external">http://feed.mifengtd.cn/</a></td>
</tr>
</tbody>
</table>
<p>不再阐述太多，适合自己的才是最好的。</p>
<h2 id="创建RSS源"><a href="#创建RSS源" class="headerlink" title="创建RSS源"></a>创建RSS源</h2><p>部分网站可能比较看重 PV 值，就是希望用户主动进入他们的网站，或者其他原因不提供 RSS 源，这时候就需要我们使用 <a href="http://feed43.com" target="_blank" rel="external">feed43</a> 的服务来为我们扫平障碍。国内网站似乎不太热衷主动提供 RSS 订阅地址，这点国外做的较好。</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>首先点进 <a href="http://feed43.com" target="_blank" rel="external">feed43</a> 右上角 <code>Create Account</code> 注册，登录完之后到主页点击 <code>Create new feed</code> 来创建自己的RSS源。接下来我将会用<a href="http://www.guokr.com/scientific/" target="_blank" rel="external">科学人|果壳网</a>来做示范。</p>
<p>我们把<code>http://www.guokr.com/scientific/</code>复制进 Step 1的 Address，编码会自动选择，如果出现乱码可以尝试<code>utf-8</code>或其他编码，之后点击 Reload。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6b430b63.jpg" alt=""></p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>我们可以看到页面的源码，看到这不要慌，这些都有套路。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6d71fbb4.jpg" alt=""></p>
<p>像上面的图一样，红框中就是我们想要获取的单条信息。其中文章都是一块一块的，样子一样，变的只是其中的文字内容、图片地址，所以相应的代码块也是相似的。我们要清楚的就是想要获取的信息，例如：标题、图片、简介。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6b4e08ad.jpg" alt=""></p>
<p>网页源代码是一层一层的，我们首先定位到大红框单个文章块的代码块。简单点可以直接 Ctrl+F 查询其中的标题，例如弱光子。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6b097fad.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/02/57f05e81414b4.jpg" alt=""></p>
<p>如果不容易找到文章所在的代码块的话可以搜索下一个文章标题来找到代码之间的分界点，现在总结下找到的代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span>&gt;</span></div><div class="line">...无关代码...</div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">href</span>=<span class="string">"http://www.guokr.com/article/441758/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-gaevent</span>=<span class="string">"scientific_title:v1.1.1.1:scientific"</span>&gt;</span>“弱光子人体安检仪”会损害健康吗？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">...无关代码...</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.guokr.com/article/441758/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-gaevent</span>=<span class="string">"scientific_image:v1.1.1.1:scientific"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-height</span>=<span class="string">"188"</span> <span class="attr">data-width</span>=<span class="string">"330"</span> <span class="attr">src</span>=<span class="string">"http://3.im.guokr.com/iTOiB3e1WalZmxiYApnzUIzxRoZcw6AHj2fjxVTRncNKAQAAvAAAAEpQ.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...无关空格...</div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"article-summary"</span>&gt;</span>成都双流机场使用的“弱光子人体安检仪”，其实是一种X射线成像装置，这种仪器会对人体健康产生什么影响，目前尚无法验证。而在安检中应该使用何种仪器，则不只是个科学问题。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">...无关空格...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你还可以用 Chrome 或其他浏览器来找到文章对应的代码块。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6bae524b.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6d76e52f.jpg" alt=""></p>
<p>注意HTML标记符号是两两对应的，在截取的时候尽量保持完整，例如：<code>&lt;h3&gt;标题代码&lt;/h3&gt;</code>、<code>&lt;a href...&gt;&lt;/a&gt;</code>、<code>&lt;p ..&gt;简介内容&lt;/p&gt;</code>。</p>
<p>在feed43中，我们会用到两种代码块：<code>{ % }</code>和<code>{*}</code>，其中<code>{ % }</code>替换你想获取的内容，<code>{*}</code>用来省略无关代码。</p>
<p><strong>注意，由于文章某些发布限制，{ % }大括号中间应没有空格，如下面代码所示</strong></p>
<p>替换之后得到：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"article-title"</span> <span class="attr">href</span>=<span class="string">"&#123;*&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-gaevent</span>=<span class="string">"scientific_title:v1.1.1.1:scientific"</span>&gt;</span>&#123;%&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;%&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-gaevent</span>=<span class="string">"scientific_image:v1.1.1.1:scientific"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-height</span>=<span class="string">"&#123;*&#125;"</span> <span class="attr">data-width</span>=<span class="string">"&#123;*&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;%&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"article-summary"</span>&gt;</span>&#123;%&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;*&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li><code>&lt;div&gt;</code>到<code>&lt;/div&gt;</code>之间就是一个层，注意保留对应文章代码块的完整</li>
<li>两个标签中间有空格可以直接用<code>{*}</code>代替</li>
<li>上面文章链接出现了不止一次，可以只找一个，其他忽略</li>
<li>观察代码，图片宽高不一致，所以<code>data-height</code>和<code>data-width</code>处参数要用<code>{*}</code>忽略</li>
<li><code>class=&quot;&quot;</code>可以看作为小套路，一般代码块对应的参数都是一致的，例如标题对标题，内容对内容。</li>
<li>网站中每个代码层之间可能会有冗余的空格存在（例如<code>&lt;div&gt;</code> 和下一个<code>&lt;div&gt;</code>之间），所以多用<code>{*}</code>替换你觉得出错的地方。（<code>&lt;div&gt;...&lt;/div&gt;{*}&lt;div&gt;...&lt;/div&gt;</code>）</li>
</ul>
<p>点击 Extract，可以看到想要的信息都被找出来了，接下来就是用这些信息去组成RSS文章的界面。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6be382cf.jpg" alt=""></p>
<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6c854350.jpg" alt=""></p>
<p>把对应的文章标题、文章链接标记块填到对应区域，当然你可以自定义每个文章的标题、链接、内容，这里我们用我们获取到的。</p>
<p><code>&lt;center&gt;...&lt;/center&gt;</code>表示居中代码块中的元素，<code>&lt;img src=&quot;&quot;&gt;</code>是图片标签，中间填入图片链接以显示图片，<code>&lt;br&gt;</code>表示换一行。你还可以在内容内再添加一个指向文章的链接，例如<code>&lt;a href=&quot;{ %2 }&quot;&gt;链接显示文字&lt;/a&gt;</code>，更多标签可以参考<a href="http://www.w3school.com.cn/tags/att_img_src.asp" target="_blank" rel="external">HTML图片标签</a>左下角的标签列表。</p>
<p>点击Preview来到 Step 4 收获成果。</p>
<h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6bd615be.jpg" alt=""></p>
<p>把地址添加到 RSS 阅读器上</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6bedc81d.jpg" alt=""></p>
<p>我们可以直接点击标题跳转到网页（其他阅读器可能不一样），现在说说 feed43 的注意事项。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="feed43-爬取限制"><a href="#feed43-爬取限制" class="headerlink" title="feed43 爬取限制"></a>feed43 爬取限制</h4><p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6bdc0486.jpg" alt=""></p>
<p>免费的计划是六小时刷新一次 RSS 地址，也就是六小时才更新一次内容，有需要的可以购买计划，不过一般够用了。</p>
<h4 id="feed43-爬取失败部分原因"><a href="#feed43-爬取失败部分原因" class="headerlink" title="feed43 爬取失败部分原因"></a>feed43 爬取失败部分原因</h4><ul>
<li>需要登录才看到内容的网页，例如一些论坛。</li>
<li>内容由 JS 方式生成</li>
<li>网站禁止了 feed43 ip 的访问，即403错误。</li>
<li>网站不支持IE浏览器</li>
</ul>
<h2 id="RSS-全文输出"><a href="#RSS-全文输出" class="headerlink" title="RSS 全文输出"></a>RSS 全文输出</h2><p>全文输出即是直接从文章链接提取内容，并替代与链接匹配的介绍内容，例如上文中科学人文章的简介和其文章内容。我在看 RSS 订阅源内容时一般先看标题与简介，对内容感兴趣的话才去查看原文内容，我认为这也是体现 RSS 获取信息效率的一方面。这里也给出 RSS 全文输出的教程，让大家有更多选择。</p>
<h3 id="Free-Full-RSS"><a href="#Free-Full-RSS" class="headerlink" title="Free Full RSS"></a>Free Full RSS</h3><p>这里我用 <a href="https://www.freefullrss.com/" target="_blank" rel="external">Free Full RSS</a> 做示范。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6bd2d312.jpg" alt=""></p>
<p>创建成功后，会得到新的 RSS 订阅地址。<a href="https://www.freefullrss.com/makefulltextfeed.php?url=www.feed43.com%2F4536674726572775.xml&amp;max=10&amp;links=preserve&amp;exc=&amp;submit=Create+Full+Text+RSS" target="_blank" rel="external">科学人 | 果壳网 全文输出RSS源地址</a></p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6c1e928b.jpg" alt=""></p>
<p>效果：</p>
<p><img src="http://ooo.0o0.ooo/2016/10/01/57efd6c384ed1.jpg" alt=""></p>
<h3 id="其他全文输出网站"><a href="#其他全文输出网站" class="headerlink" title="其他全文输出网站"></a>其他全文输出网站</h3><table>
<thead>
<tr>
<th>名称</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://fulltextrssfeed.com/" target="_blank" rel="external">Full Text RSS Feed Builder</a></td>
<td>完全免费</td>
</tr>
<tr>
<td><a href="http://fivefilters.org/content-only/" target="_blank" rel="external">fivefilters</a></td>
<td>抠门的免费计划，有付费计划。</td>
</tr>
<tr>
<td><a href="http://www.fullcontentrss.com/" target="_blank" rel="external">FULL CONTENT RSS</a></td>
<td>限时免费 KEY，过时失效</td>
</tr>
</tbody>
</table>
<h2 id="自制-RSS-源用途"><a href="#自制-RSS-源用途" class="headerlink" title="自制 RSS 源用途"></a>自制 RSS 源用途</h2><p>学会了制作 RSS 源，那么我们能做什么有趣的事情呢？！</p>
<p>订阅自己关注的网站、有价值的博客、买买买信息、政府机关部门（？）、播客等等。</p>
<p>例如自己用 Feed43 做了些 RSS 源：<br><a href="http://www.queshu.com" target="_blank" rel="external">缺书网</a>来获取买书优惠信息，<a href="http://feed43.com/0321836552054708.xml" target="_blank" rel="external">RSS 源地址</a>。<br><a href="http://www.ituring.com.cn" target="_blank" rel="external">图灵社区</a>关注新出版的技术书籍，<a href="http://feed43.com/3267066686713821.xml" target="_blank" rel="external">RSS 源地址</a>。</p>
<p>想要了解更多关于 RSS 可以看看这篇文章 <a href="http://sspai.com/34280" target="_blank" rel="external">使用 RSS 可以做什么你未曾想过的事</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2013年 Google Reader 关闭，谷歌给的原因是用户流失，这最主流的RSS阅读器的退出似乎说明了 RSS 已经快要成为一个过时的阅读方式。这种阅读方式减少了网站和用户之间的交流，也不太适应短信息的节奏（想想你会用 RSS 刷微博吗？）。往大了看这是当今社会的节奏，人们更喜欢刷微博、刷朋友圈。海量的碎片信息会导致人们喜欢浅浅尝一口，而缺少深度的思考，逐渐迷失在海量的信息流中。生活离不开阅读，我们可能不能变成万事通，但我们可以更有效率地去获取自己想要的信息。</p>
<p>如果你看到这，或许可以考虑尝试下这种阅读方式？RSS 源贵精不贵多，先养成习惯，并判断这些信息对于自己的价值。</p>
<p>另外如果你根据本文成功创建了自己的 RSS 源，或者有疑问，请在本文评论中告诉我，欢迎分享你的 RSS 地址和经验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读是一个主动寻求知识的过程，在如今碎片信息充斥着我们生活中的时代，我们需要清楚自己想要获取什么，把有限的时间放在消化信息上，而不是放在获取信息的途径上。如今我们可以通过各种 APP、公众号、聚合信息网站获取相对大众并符合自己的信息，但也有缺点：我需要下载这么多个 APP 去看新闻和文章吗？这些网站就拥有所有我想知道的吗？当然，像「即刻」、「Flipboard」这种阅读聚合类应用适当地缓解了这样的矛盾，但是这些信息源真的已经足够适合自己了吗？当初我找到了解决方法，也一直使用到现在，这个方法就是订阅 RSS 源。&lt;/p&gt;
&lt;p&gt;本篇文章将简介 RSS，初步订阅适合自己的 RSS 源，并对于一部分不提供 RSS 订阅的网站，我们为其创建 RSS 源并订阅。&lt;br&gt;
    
    </summary>
    
      <category term="工具癖" scheme="http://frankorz.com/categories/%E5%B7%A5%E5%85%B7%E7%99%96/"/>
    
    
      <category term="RSS" scheme="http://frankorz.com/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客补丁</title>
    <link href="http://frankorz.com/2016/09/30/Hexo-patch/"/>
    <id>http://frankorz.com/2016/09/30/Hexo-patch/</id>
    <published>2016-09-30T12:46:29.000Z</published>
    <updated>2017-07-06T06:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本博客部分修改内容</p>
<p>注：原文的主题为 Next，现在在使用 Even，所以配置可能有些地方不一样。<br><a id="more"></a></p>
<h3 id="小建议"><a href="#小建议" class="headerlink" title="小建议"></a>小建议</h3><p><code>hexo new &quot;标题&quot;</code> 的时候尽量取英文标题，在文章中再用 <code>title:</code> 指定中文标题，这样未来改标题好改，相应文章的多说评论也不会消失。</p>
<h3 id="Github-Pages-中增加-README-md"><a href="#Github-Pages-中增加-README-md" class="headerlink" title="Github Pages 中增加 README.md"></a>Github Pages 中增加 README.md</h3><p>很多朋友的 hexo 博客都是建在 Github 上的，作为一个项目，<code>README.md</code>文件能够在 Github 上介绍博客的一些信息，但是贸然把文件放到 <code>source</code> 文件夹中会被 hexo 检测并转为 html 文档，我们在站点配置文件中跳过即可。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">skip_render:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">README.md</span></div></pre></td></tr></table></figure>
<h3 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h3><p>安装 hexo-wordcount<br><code>npm install hexo-wordcount --save</code></p>
<p>在<code>（博客主目录）/themes/next/layout/_partials/footer.swig</code>中最后加上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更多参考：<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="external">hexo-wordcount</a></p>
<h3 id="添加文章更新时间"><a href="#添加文章更新时间" class="headerlink" title="添加文章更新时间"></a>添加文章更新时间</h3><p>修改<code>（博客主目录）/themes/next/layout/_macro/post.swig</code>文件，在<code>&lt;span class=&quot;post-time&quot;&gt;...&lt;/span&gt;</code>标签后添加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;%<span class="keyword">if</span> post.updated and post.updated &gt; post.date%&#125;</div><div class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-updated"</span>&gt;</div><div class="line">	&amp;nbsp; | &amp;nbsp; &#123;&#123; __(<span class="string">'post.updated'</span>) &#125;&#125;</div><div class="line">	&lt;time itemprop=<span class="string">"dateUpdated"</span> datetime=<span class="string">"&#123;&#123; moment(post.updated).format() &#125;&#125;"</span> content=<span class="string">"&#123;&#123; date(post.updated, config.date_format) &#125;&#125;"</span>&gt;</div><div class="line">	  &#123;&#123; date(post.updated, config.date_format) &#125;&#125;</div><div class="line">	&lt;<span class="regexp">/time&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>span&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ooo.0o0.ooo/2016/10/14/58004a76775f7.jpg" alt=""></p>
<p>根据博客配置文件中的 <code>language</code> 参数修改对应的语言配置文件<code>（博客主目录）/themes/next/languages/zh_Hans.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">post:</div><div class="line">  updated: 更新于</div></pre></td></tr></table></figure></p>
<p>修改主题配置文件<code>（博客主目录）/themes/next/_config.yml</code>，增加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display_updated: true</div></pre></td></tr></table></figure></p>
<p>写文章的时候可以直接在文章开头设置更新时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">updated: 2016-10-14 10:53:09</div></pre></td></tr></table></figure></p>
<p>没有这参数的话将会显示md文件的修改日期</p>
<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>安装 hexo-generator-search<br><code>npm install hexo-generator-search --save</code></p>
<p>编辑主目录下站点配置文件<code>_config.yml</code>加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><h4 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h4><p>在markdown文件中要添加音乐处加入iframe标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;auto=0&amp;id=34578162&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要居中可以在外添加<code>&lt;center&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=34578162&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中id后数字为网易云音乐歌曲id，可以从<a href="http://music.daoapp.io" target="_blank" rel="external">Music</a>处搜索歌名，例如搜索<code>memories</code>，我选择了<code>MEMORIES - 『MEMORIES』- ALAN WALKER</code>之后到达 <a href="http://music.daoapp.io/player?song=34578162" target="_blank" rel="external">http://music.daoapp.io/player?song=34578162</a> ，song后数字便是歌曲id。另外高度宽度可以自己根据博客样式更改，<code>auto = 0</code>是不自动播放，需要自动播放请改为<code>auto = 1</code>。</p>
<p>你也可以直接从网易云音乐<a href="http://music.163.com/" target="_blank" rel="external">官网</a>中搜索到歌曲，再生成外链播放器。有些版权保护的歌曲或歌单不支持生成外链，可以直接像上面的方法一样查 id 改代码即可。</p>
<p><img src="http://ooo.0o0.ooo/2016/10/20/5808e65d13ca0.jpg" alt=""></p>
<p>示例：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=34578162&auto=0&height=66"></iframe>

<h4 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h4><p>操作和上面一样，搜索后选择歌单，找到id再替换。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">450</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=0&amp;id=144236857&amp;auto=0&amp;height=430"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="http://music.163.com/outchain/player?type=0&id=144236857&auto=0&height=430"></iframe>

<p>其他高深玩法参考 <a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="external">163music-APlayer-you-get-docker</a></p>
<h4 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h4><p>要带歌词的话需要用到适用于 Hexo 的 <a href="https://github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="external">Aplayer</a>。<br>如果歌词、音乐文件、音乐图片保存到博客服务器中，请参考上面的链接进去设置 <code>post asset folders</code>，这里用外链做例子。</p>
<p>安装 Aplayer：<br><code>npm install --save hexo-tag-aplayer</code></p>
<p>使用：</p>
<script src="//gist.github.com/7c95ad593ae121addbd0f49952346f95.js"></script>
<p>参数：</p>
<ul>
<li><code>title</code> : 音乐标题</li>
<li><code>author</code> : 歌手名</li>
<li><code>url</code>: 音乐文件路径</li>
<li><code>picture_url</code>: 可选，音乐图片路径</li>
<li><code>narrow</code>: 可选，狭窄的样式</li>
<li><code>autoplay</code>: 可选，自动播放，不支持移动浏览器</li>
<li><code>width:xxx</code> : 可选，前缀 <code>width:</code>，播放器的宽度 (默认: 100%)</li>
<li><code>lrc:xxx</code> : 可选，前缀 <code>lrc:</code>，LRC 文件路径</li>
</ul>
<p>例子：<br><script src="//gist.github.com/ebfae5e491e63bd58425b793596767e1.js"></script></p>
<p>建议使用七牛云存文件，直接用文件外链来设置，其中歌词文件内容参照 lrc 格式填写。</p>
<p><img src="http://ooo.0o0.ooo/2016/11/24/58367ff2a6f88.jpg" alt=""></p>
<div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">[00:00.00]童话镇
[00:05.00]演唱：陈一发儿
[00:10.00]作曲 : 暗杠
[00:15.00]作词 : 竹君
[00:22.93]听说白雪公主在逃跑
[00:26.43]小红帽在担心大灰狼
[00:29.83]听说疯帽喜欢爱丽丝 
[00:33.17]丑小鸭会变成白天鹅
[00:36.34]听说彼得潘总长不大
[00:40.23]杰克他有竖琴和魔法
[00:43.56]听说森林里有糖果屋
[00:46.82]灰姑娘丢了心爱的玻璃鞋
[00:50.39]只有睿智的河水知道
[00:53.68]白雪是因为贪玩跑出了城堡
[00:57.31]小红帽有件抑制自己
[01:00.73]变成狼的大红袍
[01:03.80]总有一条蜿蜒在童话镇里七彩的河
[01:11.00]沾染魔法的乖张气息
[01:14.42]却又在爱里曲折
[01:17.76]川流不息扬起水花
[01:20.87]又卷入一帘时光入水
[01:24.68]让所有很久很久以前
[01:28.12]都走到幸福结局的时刻
[01:33.18]music....
[01:47.00]听说睡美人被埋藏
[01:50.44]小人鱼在眺望金殿堂
[01:53.79]听说阿波罗变成金乌
[01:57.12]草原有奔跑的剑齿虎
[02:00.73]听说匹诺曹总说着谎
[02:04.16]侏儒怪拥有宝石满箱
[02:07.57]听说悬崖有颗长生树
[02:10.80]红鞋子不知疲倦地在跳舞
[02:14.43]只有睿智的河水知道
[02:17.84]睡美人逃避了生活的煎熬
[02:21.14]小人鱼把阳光抹成眼影
[02:24.58]投进泡沫的怀抱
[02:27.77]总有一条蜿蜒在童话镇里七彩的河
[02:35.06]沾染魔法的乖张气息
[02:38.43]却又在爱里曲折
[02:41.82]川流不息扬起水花
[02:44.87]又卷入一帘时光入水
[02:48.69]让所有很久很久以前
[02:52.00]都走到幸福结局的时刻
[02:55.46]总有一条蜿蜒在童话镇里梦幻的河
[03:02.47]分隔了理想分隔现实
[03:05.82]又在前方的山口汇合
[03:09.22]川流不息扬起水花
[03:12.36]又卷入一帘时光入水
[03:16.23]让所有很久很久以前
[03:19.38]都走到幸福结局的时刻
[03:22.72]又陌生
[03:24.52]啊~~啊~~啊~~啊~~</pre></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: false,
				showlrc: 2,
				music: {
					title: "童话镇",
					author: "陈一发儿",
					url: "http://oelv7v3r6.bkt.clouddn.com/%E9%99%88%E4%B8%80%E5%8F%91%E5%84%BF%20-%20%E7%AB%A5%E8%AF%9D%E9%95%87.mp3",
					pic: "http://p3.music.126.net/tfa811GLreJI_S0h9epqRA==/3394192426154346.jpg",
				}
			});
		</script>
<h3 id="添加思维导图"><a href="#添加思维导图" class="headerlink" title="添加思维导图"></a>添加思维导图</h3><p>利用之前App store 限免过的iOS版 MindNode，制作完导图之后，选择在MyMindNode上共享。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57ee83d2a3e7b.png" alt="IMG_0165"></p>
<p>上传文件后得到网址，打开后选择右上角导出按钮-&gt;Embed。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57ee83d13764e.jpg" alt=""></p>
<p>这里选择宽度和高度，再如添加音乐一样添加iframe标签即可，示例参考：<a href="http://latias94.github.io/books/" target="_blank" rel="external">2016年书单、公开课</a> 。</p>
<h3 id="本博客动态背景"><a href="#本博客动态背景" class="headerlink" title="本博客动态背景"></a>本博客动态背景</h3><p>在 <a href="https://pan.baidu.com/s/1jIuJ03s" target="_blank" rel="external">百度云</a> 下载<code>particle.js</code>，并移动到<code>（博客主目录）/themes/next/source/js/src</code> 文件夹下。</p>
<p>然后在<code>（博客主目录）/themes/next/source/layout/_layout.swig</code>中的最后<code>body</code>标签上添加</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="控制首页中文章显示量"><a href="#控制首页中文章显示量" class="headerlink" title="控制首页中文章显示量"></a>控制首页中文章显示量</h3><p>在要显示的文字后添加<code>&lt;!--more--&gt;</code>，例如本文章：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo 博客补丁</div><div class="line">date: 2016-09-30 22:46:29</div><div class="line">tags: [hexo]</div><div class="line">---</div><div class="line"></div><div class="line">本博客大部分的修改都在这里找到喔！</div><div class="line">&lt;!--more--&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客部分修改内容&lt;/p&gt;
&lt;p&gt;注：原文的主题为 Next，现在在使用 Even，所以配置可能有些地方不一样。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://frankorz.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用iPad Pro学习方面的探索</title>
    <link href="http://frankorz.com/2016/09/29/iPad-Pro%20study/"/>
    <id>http://frankorz.com/2016/09/29/iPad-Pro study/</id>
    <published>2016-09-29T10:49:13.000Z</published>
    <updated>2016-12-11T06:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://ooo.0o0.ooo/2016/09/30/57ee011831539.jpg" alt=""></p>
<p>前几天趁着Apple教育优惠买了9.7inch的iPad Pro 附送耳机，还买了个smart cover。昨天在香港剁手了Apple pencil，对深挖iPad Pro潜能做了些探索，在这里总结下。<br><a id="more"></a></p>
<h3 id="iPad-Pro是否有必要买？"><a href="#iPad-Pro是否有必要买？" class="headerlink" title="iPad Pro是否有必要买？"></a>iPad Pro是否有必要买？</h3><p>这个问题其实要从产品定位说起。对于我而言，我已经有iPhone 6 、Macbook 和 Kindle，我买了iPad Pro，就是想让它承担一些三者都不擅长或不方便的事情，例如看电子书，其中PDF为主(kindle对pdf体验差、我也不会在外出的时候带Macbook看，手机屏幕太小)、看视频(四个喇叭，大屏幕，爽！)、玩游戏(自己不太玩)、轻量的文字编辑(我没买键盘，因为觉得买了不如直接带Macbook)、手写笔记(本帖主题)、图片处理和绘画(真的很惊艳)等等。总而言之就是“带出去不麻烦的重量”+“一本书的大小”+“iOS系统”+“众多精致优秀的应用”。如果你觉得这些优点你愿意花五千多换取，那么你就不会买回来再抱怨iPad Pro也就那样。另外我入手的是128G，32G很容易满的相信我！</p>
<p>考虑到 iPad Pro 过剩的性能，如果没有触控笔的需求，可以考虑性价比更高的 iPad mini 或 iPad Air 2。</p>
<p>当然iPad Pro取代不了操作系统，它只是一种需求的折中处理方式，就像你不可能在其上进行大量的Excel编辑、视频编辑等，摆对iPad的位置，否则只会徒生烦恼。</p>
<p>应用方面我应该会另外写一帖出来，先放些链接待整理。<br><a href="https://www.zhihu.com/question/20077914" target="_blank" rel="external">【知乎】怎样利用 iPad 学习？</a><br><a href="https://www.zhihu.com/question/22578656" target="_blank" rel="external">【知乎】如何装备一个学术型的 iPad ？</a><br><a href="https://www.zhihu.com/question/21482079" target="_blank" rel="external">【知乎】有哪些适合大学生使用的 app？</a></p>
<h3 id="支持手写的笔记软件"><a href="#支持手写的笔记软件" class="headerlink" title="支持手写的笔记软件"></a>支持手写的笔记软件</h3><p>iPad Pro上的笔记软件非常多，评测也多，我简单放放一些链接，诸君自取。下面软件没提价格的就是免费的。<br><a href="http://matrix.sspai.com/p/cd982420" target="_blank" rel="external">【推荐】手写笔记软件Notability，Notes Plus，Noteshelf，Upad横评</a><br><a href="https://www.zhihu.com/question/20009593" target="_blank" rel="external">【知乎】iPad 是否可以取代纸质笔记本？</a><br><a href="https://www.zhihu.com/question/22238071" target="_blank" rel="external">【知乎】iPad 笔记应用 UPad、Noteshelf、goodNotes 哪个更值得买？</a><br><a href="https://www.zhihu.com/question/37086615" target="_blank" rel="external">【知乎】学生党，用到 PDF 的时候较多，各位觉得 iOS 设备上相对好用的PDF应用有哪些？</a><br><a href="https://www.zhihu.com/question/21218718" target="_blank" rel="external">【知乎】如何利用 iPad 高效学习？</a><br><a href="http://www.********/single/20492/" target="_blank" rel="external">手写笔记专题 Notability简评及和同类软件比较</a></p>
<p>经过自己试用Notability、Notes Plus、Upad3、GoodNotes，最后自己选用Notability。</p>
<h4 id="Notability"><a href="#Notability" class="headerlink" title="Notability"></a>Notability</h4><p>iOS、Mac端都齐了，经常降价，有限免记录，50元。<br>优点：</p>
<ul>
<li>支持PDF导入</li>
<li>录音功能强：能分段录音，录音还能索引到，点击录音会跳转到相应笔记记录(未测试)。</li>
<li>编辑功能强：基本的标记功能都有，能插入基本的图片拍照、图形、Web片段和便签。长按会出现放大框供手写，编辑后也容易修改。</li>
<li>导出功能强：支持大部分国外网盘，还支持WebDAV(这代表支持国内的坚果云网盘)，输出格式有PDF(压缩包内另有m4a格式录音)、RTF、Notability的原生格式。</li>
<li>有Mac客户端，能在客户端上再次编辑。</li>
<li>稳定</li>
</ul>
<p>缺点：</p>
<ul>
<li>笔刷略少，只有铅笔和标记笔。</li>
<li>导出不保留原文件</li>
<li>模板少</li>
<li>耗电</li>
</ul>
<p>点评：<br>很全面的一款笔记软件，国外965的评价达到4星。其中录音功能是亮点，编辑功能也不弱，单单录音方面我觉得就是我心中最想要的笔记。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57eddeabf345f.jpg" alt=""></p>
<p><a href="http://ipadpapers.com/search.asp?q=&amp;search=Search" target="_blank" rel="external">这个网站</a>能够下载一些pdf模板…</p>
<p>下面其他软件就一句带过，或者点上面的链接进去看评测。<br>Notes Plus手写棒，Upad3模板多，GoodNotes较中庸。另外还有一款MarginNote听说是学术神器，做笔记还有思维导图..未测试，留个坑。</p>
<h3 id="跨平台的笔记系统"><a href="#跨平台的笔记系统" class="headerlink" title="跨平台的笔记系统"></a>跨平台的笔记系统</h3><p>笔记方面两大巨头印象笔记和OneNote分开说是因为他们比较适合当作一个“笔记系统”，就是我们可以通过上面几个软件搞定完一篇笔记之后可以放进去重新整理、分类、加标签等。上面说的笔记软件都是偏重手写和标记，其中的标记包括了PDF的标记和图片的标记，也就是我们可以通过一些扫描类的APP扫描PPT获得图片再在上面做手写笔记等(这里推荐Readdle家的Scanner Pro)，OCR(图片识别成文字)方面推荐刚限免过的TextGrabber。</p>
<p>笔记系统方面参考：<br><a href="http://www.15yan.com/story/eK9ubPnu9Q1/" target="_blank" rel="external">从卡片柜到OneNote</a><br><a href="https://www.zhihu.com/question/23427617" target="_blank" rel="external">【知乎】如何构建自己的笔记系统？</a></p>
<p>其实涉及到印象笔记和OneNote的话有能有很多方面的对比了..</p>
<h4 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h4><p>优点：</p>
<ul>
<li>功能齐全</li>
<li>如果想建立自己的知识体系(无限层次的笔记系统)</li>
<li>丰富的格式支持</li>
<li>免费</li>
</ul>
<p>缺点：</p>
<ul>
<li>iOS、Mac端功能不全</li>
<li>onedrive同步慢</li>
</ul>
<p>我曾在知乎写过一篇关于OneNote的答案，想入门可以看看:)<br><a href="http://bbs.feng.com/怎样用好%20OneNote？" target="_blank" rel="external">【知乎】怎样用好 OneNote？</a></p>
<h4 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h4><p>优点：</p>
<ul>
<li>界面精致</li>
<li>功能够用，移动端也很方便</li>
<li>同步快</li>
<li>有丰富的第三方接口</li>
</ul>
<p>缺点：</p>
<ul>
<li>笔记层次只有三层</li>
<li>每月免费上传空间只有60M</li>
<li>免费用户只能授权两台机器</li>
<li>原生不支持markdown</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总而言之，OneNote特点是功能强大，印象笔记强调的是用得爽。<br>如果你喜欢层次分明，很注重每个笔记的结构，和关联的附件等等的强大功能，OneNote适合你。</p>
<p>如果你喜欢知识片段或文章的收集和搜索(还能搜索图中的文字)，互联网上文章的摘抄(印象笔记强大的剪藏插件)，喜欢小巧精致实用这些特色的，印象笔记适合你。</p>
<p>(自己还有点偏见就是笔记就要用大公司的，小公司动不动就倒闭这咋整？)<br>实际上，这两个笔记软件并不排斥，还能和很多应用配合。其中的OneNote更是可以单独作为笔记软件用，支持手写。另外我们还可以想象下日常生活中的应用：</p>
<h5 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h5><p>我在图书馆看书，看到某一页，“唔，非常有感悟！”，我会用Scanner Pro去扫描下来，还想要在上面手写些笔记的话，导入到Notability补充一些笔记，搞定了我导出到印象笔记加标签分类。如果你习惯用强大的OneNote，还能把印象笔记当成第一步知识的分类，再在OneNote构建你的笔记系统。这部分在上面的从卡片柜到OneNote有很详细的说明。</p>
<h5 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h5><p>我事先有老师的PPT讲义，我事先在电脑把PPT导入的Readdle家的Documents 5(文件管理应用，我iPad的文件都存在内，能随时导出到其他应用操作)，或者直接导入Notability，上课的时候我可以一边录音一边做些标记，课后根据录音整理笔记，再导入到你的笔记系统：印象笔记或OneNote。<br>在这里也介绍下PDF Expert，之前不和笔记软件放一起是因为他是一款优秀的PDF阅读器和标记软件。</p>
<h3 id="PDF-阅读和批注"><a href="#PDF-阅读和批注" class="headerlink" title="PDF 阅读和批注"></a>PDF 阅读和批注</h3><h4 id="PDF-Expert"><a href="#PDF-Expert" class="headerlink" title="PDF Expert"></a>PDF Expert</h4><p><a href="https://itunes.apple.com/cn/app/pdf-expert-5-tian-biao-pi/id743974925?mt=8" target="_blank" rel="external">PDF Expert</a>是iOS版刚出时限免收的(没错就是炫耀！)，现价68元。</p>
<p>优点：</p>
<ul>
<li>支持大量PDF标记(Notability和其他笔记软件只支持手写的荧光笔，PDF Expert还支持选中文字标记)</li>
<li>支持众多网盘，包括WebDAV(包括国内的坚果云)</li>
<li>PDF加密、压缩。</li>
<li>阅读时的目录、书签都很人性化。</li>
<li>长按能加录音、图像、文字、笔记。</li>
<li>有Mac客户端，能在客户端进行二次编辑，</li>
<li>支持简单的裁剪，文本语音等。</li>
</ul>
<p>缺点：</p>
<ul>
<li>录音没有索引，只能自己记得插入录音时的文本位置去查找。</li>
</ul>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde25949ac.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde2cf18ed.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde2b0a18d.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde1f42671.jpg" alt=""></p>
<p>云同步方面建议国外用dropbox或其他的国外网盘，国内用坚果云(国内唯一支持WebDAV，<a href="http://sspai.com/34613" target="_blank" rel="external">介绍点我</a>)，我现在百度云存资源，坚果云配合PDF Expert、Notability、Scanner Pro等软件存文档(注意文档和资源的差别)，OneDrive(配合hosts勉强能用)配合OneNote。</p>
<p>这款软件和Notability其实不太一样，Notability注重会议、课堂或其他录音场合时做笔记，还支持导入网页视图等(维基百科或你能想到的，缺点是不能对视图进行编辑)，而PDF Expert注重阅读的体验和对PDF进行一些更漂亮的批注。<br>其实阅读和标注方面还有很多不错的软件，例如几乎万能的GoodReader、专注批注的iAnnotate PDF等，但Readdle公司的PDF Expert足够精致和优秀！</p>
<h4 id="Flexcil"><a href="#Flexcil" class="headerlink" title="Flexcil"></a>Flexcil</h4><p><a href="https://itunes.apple.com/us/app/apple-store/id1146812963?mt=8" target="_blank" rel="external">Flexcil</a> 是最近找到一款不错的免费应用，主要功能是对 PDF 文件提供标注和笔记需求。</p>
<p>优点：</p>
<ul>
<li>对 PDF 做的<strong>笔记</strong>(注意不是标注)能够整理到一起</li>
<li>支持 Apple pencil</li>
<li>手势强大，用手标记或复制文字图片到笔记中非常快捷</li>
<li>对触控笔的支持同样强大方便</li>
</ul>
<p>缺点：</p>
<ul>
<li>只主打对 PDF 写笔记的功能</li>
</ul>
<p><img src="http://ooo.0o0.ooo/2016/11/26/58393b52caf2c.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/11/26/58393b511aa9d.jpg" alt=""></p>
<h3 id="扫描文档"><a href="#扫描文档" class="headerlink" title="扫描文档"></a>扫描文档</h3><p>扫描文档我推荐Readdle家的<a href="https://itunes.apple.com/cn/app/scanner-pro-7-ocr-pdf-wen/id333710667?mt=8" target="_blank" rel="external">Scanner Pro</a>, 易用，我就不横向对比其他应用了，大家看效果就好。最低曾到1元，现价25.</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde39b0615.png" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde341c983.png" alt=""></p>
<p>图一的蓝框是自动选中的，能够自己再次移动，另外Scanner Pro 支持OCR，不过又慢又差。还支持自动上传和处理流程，其中自动上传网盘除了国外的著名网盘外还有OneNote、Evernote、WebDAV(国内的坚果云)。缺点是在黄光下支持不好，尽量在光线充足下照相。</p>
<p>同类型的应用还推荐<a href="https://itunes.apple.com/cn/app/sao-miao-quan-neng-wang-camscanner/id569846869?mt=8" target="_blank" rel="external">扫描全能王</a>，如今还在限免，估计赚钱方向放在自家云空间上了。扫描效果可能没Scanner Pro好，但是OCR又快又棒！如果有这种需求的不妨选择他。他有自己的一套云空间供上传文件，另外上传还支持百度云网盘(亮点)，可惜不支持WebDAV。</p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><h5 id="Scanner-Pro"><a href="#Scanner-Pro" class="headerlink" title="Scanner Pro"></a>Scanner Pro</h5><p>这应用的亮点是能在照相的时候动态框选文字，如果你手稳的话框选一小段时间会自动照相，很人性化。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde38dfc04.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde387d39e.jpg" alt=""></p>
<p>照完相能在编辑的地方重选区域，我这里是直接按软件识别的文档照相po出来。</p>
<h5 id="全能扫描王"><a href="#全能扫描王" class="headerlink" title="全能扫描王"></a>全能扫描王</h5><p><img src="http://ooo.0o0.ooo/2016/09/30/57edde3989ff3.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde54f25c2.jpg" alt=""></p>
<p>这里是照完相自动选中的框，文档图是锐化过的，可以对比下。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde454cd52.jpg" alt=""></p>
<p>文字识别就是意外之喜了。</p>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>如果你们观察仔细的话，会看到Scanner Pro框选中上面一个带页码的横线是弯曲的，处理之后自动整平了。漫画处也能看出来，我认为他的算法比全能扫描王好，全能扫描王强在和TextGrabber相当的OCR文字且免费，但不支持WebDAV。</p>
<h3 id="OCR识别文字"><a href="#OCR识别文字" class="headerlink" title="OCR识别文字"></a>OCR识别文字</h3><p>识别文字我使用<a href="https://itunes.apple.com/cn/app/textgrabber-%20-qr-code-scanner/id438475005?mt=8" target="_blank" rel="external">TextGrabber</a>，该应用前不久免费，现价30。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde52c9642.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde451e721.jpg" alt=""></p>
<p>偶尔有用哈~</p>
<h3 id="查询单词释义"><a href="#查询单词释义" class="headerlink" title="查询单词释义"></a>查询单词释义</h3><p>查单词倚重的是词库，权威的词库对一些专业而言重要性更是不言而喻。在这里我推荐扩展性极强的<a href="https://itunes.apple.com/cn/app/ou-lu-ying-yu-ci-dian-eudic/id393670998?mt=8" target="_blank" rel="external">欧路词典Pro</a>，1元你买不了吃亏买不了上当(也有免费版的)，词库只要你找得到就是你的能耐。话不多说放截图：</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde45e82db.jpg" alt=""></p>
<p>依次是红宝书、柯林斯英汉双解、Dictionary.com的词典..还能加有道在线翻译啊牛津啊什么的。<a href="http://www.pdawiki.com/forum/forum-4-1.html" target="_blank" rel="external">词库点我</a><br>词典方面还推荐免费的<a href="https://itunes.apple.com/cn/app/merriam-webster-dictionary/id438477986?mt=8" target="_blank" rel="external">Merriam-Webster Dictionary</a>，有道也不错。</p>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>思维导图不多介绍，可以给自己整理思路脉络，iPad版的思维导图中有两款很优秀：<a href="https://itunes.apple.com/cn/app/mindnode-delightful-mind-mapping/id312220102?mt=8" target="_blank" rel="external">Mindnode</a> 68元，<a href="https://itunes.apple.com/cn/app/ithoughts-mindmap/id866786833?mt=8" target="_blank" rel="external">iThoughts</a> 78元。前者漂亮，后者功能全，以前用的是后者，现在使用MindNode，因为可以把思维导图嵌入到博客~<a href="http://frankorz.com/books">实例</a></p>
<p>Mindnode:</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde40419ce.png" alt=""></p>
<p>iThoughts:</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde4943d2e.jpg" alt=""></p>
<h3 id="免VPN上谷哥搜索"><a href="#免VPN上谷哥搜索" class="headerlink" title="免VPN上谷哥搜索"></a>免VPN上谷哥搜索</h3><p><img src="http://ooo.0o0.ooo/2016/09/30/57edde54443f3.jpg" alt=""></p>
<p>学习怎么能不谷鸽？！<br>原理：利用Surge+host配置实现免SS或VPN上谷歌，够用就好！ <a href="https://github.com/ifyour/Hosts-for-Surge" target="_blank" rel="external">配置点我</a><br>支持Dropbox、OneDrive等，不过稳妥起见，还是建议使用国内的网盘，因为前者ip容易被封(经测试Dropbox ip被封了不少..)。</p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>在iPad上，浏览器除了经常听见的Safari、QQ浏览器、Chrome、Opera等，其实还有不错的选择。<br>Safari有下载功能，但是却没有下载管理。这点下面两个浏览器都做的不错，自带扩展+下载。</p>
<h4 id="Mercury"><a href="#Mercury" class="headerlink" title="Mercury"></a>Mercury</h4><p><a href="https://itunes.apple.com/cn/app/mercury-web-browser-pro-powerful/id1000610117?mt=8" target="_blank" rel="external">下载地址</a><br>支持部分扩展、下载列表、阅读列表、用户代理、无痕浏览等等。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde51d4a89.jpg" alt=""></p>
<p>唯一的不足是广告拦截功能要钱….</p>
<h4 id="iCabMobile"><a href="#iCabMobile" class="headerlink" title="iCabMobile"></a>iCabMobile</h4><p><a href="https://itunes.apple.com/cn/app/icab-mobile-web-browser/id308111628?mt=8" target="_blank" rel="external">下载地址</a> 12元<br>这里的扩展名改成模块，也是为一些app提供了支持，下载功能、分页功能、设置中很多项可以调，具体请自己测试。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde5752c52.jpg" alt=""></p>
<h3 id="好用的画图工具"><a href="#好用的画图工具" class="headerlink" title="好用的画图工具"></a>好用的画图工具</h3><p>这里介绍的是<a href="https://itunes.apple.com/cn/app/paper-fiftythree-ti-gong-zuo/id506003812?mt=8" target="_blank" rel="external">Paper 53</a>，留心官网的话你们应该能在Apple pencil的介绍页上看到这款app的推荐！</p>
<p>这简直就是标识利器！又萌又好看！</p>
<p>有时候我们不需要秒天秒地的Procreate、photoshop，只是简单的给一张图加批注，或者简单画画表格、图案，小巧的paper 53就是你的选择！</p>
<p>前不久里面的笔刷已经全部免费，此时不入手更待何时？！</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde55755ed.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde5648a03.jpg" alt=""></p>
<p>特别是画一些简图、图表插入到你的笔记中，不要太方便！</p>
<h3 id="计算工具"><a href="#计算工具" class="headerlink" title="计算工具"></a>计算工具</h3><p><a href="https://itunes.apple.com/cn/app/wolframalpha/id334989259?mt=8" target="_blank" rel="external">WolframAlpha</a> 18元，需联网，学术神器，自己看功能。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde67c39ca.jpg" alt=""></p>
<p><a href="https://itunes.apple.com/cn/app/you-shu-zhong-xin-ding-yi/id721606556?mt=8" target="_blank" rel="external">有数</a> 12元，颜值还行的计算器。</p>
<p><a href="https://itunes.apple.com/cn/app/geogebra/id687678494?mt=8" target="_blank" rel="external">GeoGebro</a> 动态教学软件，推荐给理工狗。</p>
<p>还有Matlab啊Calcbot啊自己去试吧不贴链接了。</p>
<h3 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h3><p><a href="https://itunes.apple.com/cn/app/istudiez-pro-schedule-homework/id310636441?mt=8" target="_blank" rel="external">iStudiez Pro</a> 才18！！！！！</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde617bad3.jpg" alt=""></p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde617edc8.jpg" alt=""></p>
<p>毕业了才有iPad我真是追悔莫及….这个应用也有Mac版，你可以把所有考试、老师、作业、课程表等信息录入，配合日历使用，能追踪你整个学期的学业情况！为了用得上这个应用我打算考个研！学生日常必备！！</p>
<h3 id="阅读方式"><a href="#阅读方式" class="headerlink" title="阅读方式"></a>阅读方式</h3><p>这里再总结下哈，如今网上的电子书大多分扫描版和非扫描版(主要为PDF文件)，非扫描版就是所谓的文字版，玩kindle的应该都知道一些格式：亚马逊主推的Mobi、AZW，还有Epub和PDF(TXT无排版，不考虑)。</p>
<p>这些格式你可以直接用Kindle for iPad 看，除了PDF。</p>
<ul>
<li>Epub，直接放iBooks上看，或者用多看阅读看也行，都能作批注，后者功能多些。Documents 5 也能看和批注，非常神奇…</li>
<li>Mobi，建议下个Calibre转换下格式，当然Kindle.app看也行。</li>
<li>AZW，同上。</li>
<li>PDF，用PDF Expert看，上文已经介绍很多，重点是能用笔批注。</li>
</ul>
<p>对我而言如果是小说之类批注不会太多的我会直接多看上看，Kindle看也行，主要看批注能否导出。</p>
<p>如果有需要批注较多的文件，我就直接用Calibre转PDF放PDF Expert上看，Apple pencil批注也是很方便的~(主要是因为不这样用我会觉得那只七百多的笔白买了你懂吧)</p>
<h3 id="分屏做笔记"><a href="#分屏做笔记" class="headerlink" title="分屏做笔记"></a>分屏做笔记</h3><p>我觉得分屏做笔记不如直接在PDF上批注或者iPad看文档电脑来写。当然真的要分屏的话紧凑是肯定的，12.9的体验也高不到哪去，这些事情还要靠应用来配合。下面我举个PDF Expert+Notability的例子大家看看：</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57eddea32f379.jpg" alt=""></p>
<p>右边Notability可以双指缩放笔记大小，手指长按或者点放大镜有缩放模式可以直接写，右边蓝色框是续写区域，在续写区域写完停顿后续写区域框会向右移动继续提供空白区域手写。</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde6ada00d.jpg" alt=""></p>
<p>在左边的PDF Expert里右上角的按钮出现了之前没说过的文字重排功能(当然你也可以双指缩放去看文档)，但不支持扫描版(就是图片)。点击后的效果如下图：</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde6f2e53c.jpg" alt=""></p>
<p>格式没了，不过可以调字体和大小。</p>
<p>受屏幕限制，笔记体验的确会差点，纠结这方面的建议考虑是否经常在桌上使用，是否需要这么大屏幕而且分屏做笔记。前一个问题是考虑到12.9的重量会让你只想放桌面上用、后一个问题如果你真的真的很依赖分屏做笔记那就直接12.9不要纠结了。</p>
<h3 id="通知面板"><a href="#通知面板" class="headerlink" title="通知面板"></a>通知面板</h3><ul>
<li><a href="https://itunes.apple.com/cn/app/n-stats/id911261630?mt=8" target="_blank" rel="external">N stats</a> 管理流量很直观，又免费！直接用iphone版的就好。</li>
<li><a href="https://itunes.apple.com/cn/app/omnifocus-2/id904071710?mt=8" target="_blank" rel="external">OmniFocus</a> 258元，内购128元…其实以前感觉GTD的概念比较“玄学”，现在觉得还是挺好用的。生活中如果琐碎事太多，交给软件管理是很明智的选择，不过入门有学习成本，建议去少数派专题看看。</li>
<li><a href="https://itunes.apple.com/cn/app/atimelogger-2-si-ren-shi-jian/id576718804?mt=8" target="_blank" rel="external">aTimeLogger 2</a> 25元，能管理你生活的一切所用时间，比较适合对自己时间管理十分严格的同学把玩！</li>
<li><a href="http://bbs.feng.com/Calendars%205" target="_blank" rel="external">Calendars 5</a> 45元，也是Readdle家的日历软件，限免入的(哈哈哈哈哈哈爽啊)，能自动同步日历中的事件。上面就是Keep健身制定计划时候自动导入的日历，这里能直接显示出来，一条龙服务！(不用原生日历是因为日历的widget在面板上太丑..)</li>
</ul>
<h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>其实时间管理这块推荐我纠结了蛮久的，一是不是所有人都喜欢管理自己的时间，二是市面上To-do list类的应用数不胜数(优秀的有如“潮汐”，“BeFocus Pro”等)，三是这类软件主观性略强，每个人可能习惯的管理方式都不一样。今天我来推荐一个新生的，较全面的时间监控软件<a href="https://itunes.apple.com/cn/app/timetrack.io/id1087340819?mt=8" target="_blank" rel="external">Timetrack.io</a>。上面我推荐过aTimeLogger 2，这款软件则是同一个作者写的，功能更甚，加入了番茄钟，收费采取的是订阅制。<a href="http://sspai.com/34820" target="_blank" rel="external">测评点我</a></p>
<p>功能不多说，点测评看。我的用法主要是给自己每天定一个目标，例如今天要读四小时的书，那我可以开始读的时候用软件开始计时，其中还能选择番茄钟模式。通过这种碎片时间，达到完成小目标的效果。(当然吃饭睡觉这些不用监控啦，监控你觉得必要的就好，例如工作、学习等)</p>
<h4 id="记录历史"><a href="#记录历史" class="headerlink" title="记录历史"></a>记录历史</h4><p><img src="http://ooo.0o0.ooo/2016/09/30/57edde656e412.jpg" alt=""></p>
<p>目标页，你可以制定适合条件的监控时间(例如学习一块，也可以用标签计算)</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde630ea35.jpg" alt=""></p>
<p>软件一开始使用的时候可能有些复杂，但是有心整理自己生活的同学可以尝试下~</p>
<p>widget和aTimeLogger 2差不多，订阅是6个月18元。不过目前大家可以先下应用，注册完之后email给作者邮箱 <a href="support@timetrack.io">support@timetrack.io</a> 获取一年专业版使用资格(用英文哈，邮件里带上你的账户邮箱)。</p>
<p>有人说iPad没啥用，有人说iPad必不可少，我觉得这是iPad有没有真正进入到你生活中的区别。当然再好的应用也只是工具，关键还要看使用工具的人，再好的工具也拦不住你刷漫画看段子哈&gt; w &lt;</p>
<h3 id="公开课"><a href="#公开课" class="headerlink" title="公开课"></a>公开课</h3><p>只推两个，从iPad体验和知识获取方面都是最佳应用！</p>
<h4 id="网易公开课"><a href="#网易公开课" class="headerlink" title="网易公开课"></a>网易公开课</h4><p>网易良心作，大名鼎鼎得大家可能都耳闻过，但是实在是太！好！用！了！</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde6dd7dbd.jpg" alt=""></p>
<p>支持离线下载(满速)、调整字幕、记录播放位置等，世界名校有名的课程很多都找得到！(多嘴一句学iOS的话可以去找找斯坦福白胡子爷爷的课哈，里面也有，iOS8的)当然也要感谢无私的字幕组！</p>
<h4 id="Coursera"><a href="#Coursera" class="headerlink" title="Coursera"></a>Coursera</h4><p>国外很火热的慕课平台，上完课还有认证证书！不过大多只有英文字幕，自己挑吧！</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde6a582f2.jpg" alt=""></p>
<p>deadline 就是你学习的动力！</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>类似的还有<a href="https://itunes.apple.com/cn/app/xue-tang-zai-xianhd/id1021841572?mt=8" target="_blank" rel="external">学堂在线</a>，给小孩子学的课程推荐<a href="https://itunes.apple.com/cn/app/khan-academy-you-can-learn/id469863705?mt=8" target="_blank" rel="external">可汗学院</a>，编程的还有<a href="https://itunes.apple.com/cn/app/mu-ke-wang/id966761381?mt=8" target="_blank" rel="external">慕课网</a>。</p>
<p>慕课方面还推荐一个网站<a href="http://blog.coursegraph.com/" target="_blank" rel="external">课程图谱</a>，对慕课信息整理非常全面的一个网站，楼主只能帮你到这了！其他的自己挖掘吧哈！</p>
<h3 id="稍后阅读"><a href="#稍后阅读" class="headerlink" title="稍后阅读"></a>稍后阅读</h3><p>人们生活越发繁忙，很多好文章不能及时看，稍后阅读类应用解决的就是这类痛点，让人们暂时存下网页，空闲时再查看信息。<br>通常来说稍后阅读有两大应用：1、<a href="https://itunes.apple.com/cn/app/instapaper/id288545208" target="_blank" rel="external">Instapaper</a>  2、<a href="https://itunes.apple.com/cn/app/pocket-save-articles-videos/id309601447" target="_blank" rel="external">Pocket</a></p>
<p>这两类应用对多平台都有很好的支持， 电脑端有各种浏览器插件能够支持保存网页内容，其中 Pocket 还有 macOS 客户端。鉴于 Pocket 收费，而 Instapaper 前不久宣布免费，这里介绍 Instapaper。</p>
<p>收集英文文章的时候会提供更美观的字体<br><img src="http://ooo.0o0.ooo/2016/12/08/5848e8756ee53.png" alt="IMG_0193"></p>
<p>应用内支持阅读文本信息，调整字体、字体大小、背景色，添加喜欢和归档文章<br><img src="http://ooo.0o0.ooo/2016/12/08/5848e887d1a45.png" alt="IMG_0190"></p>
<p>另外国内部分网站提高了反爬虫技术，所以一些网站例如知乎、新浪文章等等都会阻止这类应用的抓取。</p>
<p>我自己写了一个 Workflow ，支持收集知乎答案、知乎专栏、微信公众号文章和其他普通网站的文章到 Instapaper，暂时不支持新浪文章，有需要的可以看看博客中另外一篇文章：<a href="http://frankorz.com/2016/11/05/workflow-of-zhihu-to-instapaper/">用 Workflow 把知乎答案存到 Instapaper</a></p>
<h3 id="PDF写笔记新选择"><a href="#PDF写笔记新选择" class="headerlink" title="PDF写笔记新选择"></a>PDF写笔记新选择</h3><p>有天无意发现了这个免费的应用——<a href="https://itunes.apple.com/cn/app/flexcil-pdf-reader-with-note/id1146812963?mt=8" target="_blank" rel="external">Flexcil</a><br>之前说过 PDF Expert 是一个最佳的 PDF 阅读应用，但是这里 Flexcil 解决的痛点就是能在阅读 PDF 的同时在另外一块区域中写笔记！</p>
<p>偷个懒拿苹果商店的图片放在这..<br><img src="http://a1.mzstatic.com/us/r30/Purple22/v4/2e/af/fd/2eaffd0f-4671-ba06-7aff-f0cbc21debfb/sc552x414.jpeg" alt=""></p>
<p><img src="http://a1.mzstatic.com/us/r30/Purple71/v4/58/fe/16/58fe16a2-13f4-34fa-7bda-84e73d2c4e98/sc552x414.jpeg" alt=""></p>
<p>这应用厉害的地方在于极其丰富的手势，和对 Apple Pencil 的支持，所以要玩转这个应用，手势一定要先熟悉！</p>
<p><img src="http://ooo.0o0.ooo/2016/12/08/5848e88015c81.png" alt="IMG_0191"></p>
<p><img src="http://ooo.0o0.ooo/2016/12/08/5848e87f86dad.png" alt="IMG_0192"></p>
<p><img src="http://ooo.0o0.ooo/2016/12/08/5848e88313f96.png" alt="IMG_0198"></p>
<p>应用的功能就这么简单，笔记本里面可以新建笔记本，整理笔记，书籍里面存放 PDF 文件，这样的免费应用简直良心~</p>
<h3 id="限免渠道"><a href="#限免渠道" class="headerlink" title="限免渠道"></a>限免渠道</h3><p>收集限免应用这个坏习惯导致我成为松鼠症患者，不过这样能让你尽量不花钱的前提下找到额外的适合你的应用。我忽然想说这个就是因为我几乎上面大部分应用都是限免和冰点入的，Notability经常冰点到1元，其他的也偶尔半价。</p>
<p>1、<a href="https://itunes.apple.com/cn/app/appzapp-hd-pro-mei-ri-xin/id428248004?mt=8" target="_blank" rel="external">Appzapp Pro</a><br>iPad最方便最全面的搜集限免冰点应用，能看历史价格，可以加降价提醒。<br>2、<a href="https://itunes.apple.com/cn/app/appzapp-hd-pro-mei-ri-xin/id428248004?mt=8" target="_blank" rel="external">爱应用助手</a><br>国内应用，主打精品应用限免冰点推荐。<br>3、<a href="https://itunes.apple.com/cn/app/appshopper-social/id602522782?mt=8" target="_blank" rel="external">AppShopper</a><br>和Appzapp类似的国外应用，功能差不多，缺点是只有iPhone版。<br>4、<a href="https://itunes.apple.com/cn/app/appso-wan-zhuan-*********eng/id966457637?mt=8" target="_blank" rel="external">AppSo</a><br>国内应用，主打精品应用推荐，也有部分限免信息，缺点只有iPhone版。<br>5、<a href="http://sspai.com/" target="_blank" rel="external">少数派</a><br>国内网站，主打移动设备上应用测评，有时候也会有优惠活动和限免信息，有很多有深度的精品文章。<br>6、<a href="http://free.apprcn.com/" target="_blank" rel="external">反斗限免</a><br>这个网站就厉害了，啥限免信息都有，Windows、Mac、iOS、电子书、字体、游戏等，udemy的课程限免也有….RSS订阅也方便。</p>
<h3 id="保持专注"><a href="#保持专注" class="headerlink" title="保持专注"></a>保持专注</h3><p>这是因为看到知乎的一篇答案让我有感而发。<a href="https://www.zhihu.com/question/27297809/answer/110588267" target="_blank" rel="external">我们使用的软件太多，而不是太少</a></p>
<p>例如单单手写笔记应用就有这么多种，我们真的都需要吗？新闻资讯类我真的都要下几个客户端去看吗？</p>
<ul>
<li>我以前会在众多效率工具中迷失，追求做到极致的应用，后来发现浪费其上的时间还不如好好看一本书。</li>
<li>我以前会迷茫的去寻求一款最适合自己的背单词应用和慕课应用，都下载下来，大部分却没打开过。</li>
<li>我以前会在使用印象笔记和OneNote中纠结其功能，但是自己连笔记都很少记。</li>
</ul>
<p>软件再好，但你不用，只会剩下自己莫名的成就感。</p>
<p>其实我上面说了这么多，不是让各位都用用看，而是节省时间，从我的帖子中直接找到最适合自己的应用，并使用下去，真正用在生活之中。<br>确定好自己的需求，选择最适合自己的应用，在适合的时间使用它，并享受它给你带来的便利，这就够了！</p>
<p>这里贴一张那位知乎答主的图</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57edde680af44.png" alt=""></p>
<p>在各种场景下找到可以充分利用这段时间的专注力的方式，例如你想用坐地铁公交的时间拿来背单词(高度专注力)，但是效果不佳，我是不是可以看看TED(中度专注力)？当然每个人的使用方式都不一样，最重要是找到适合自己的，并履行下去。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>截至目前我也只是浅浅的说了自己围绕PDF文件学习的一些处理方案，也准备初步搭建自己的笔记系统，没有谈及一些学术方面和阅读方面的的APP应用。另外Apple pencil很优秀，用到目前，没有手腕的误触现象。部分电容笔不支持屏蔽手腕误触，写字要悬着写，希望买触控笔的时候能考虑下这方面。题外话，画图方面的procreate配合Apple pencil简直爆炸，但是楼主不会画画啊TAT..</p>
<p>这里放一张上午寄过来的TEN DESIGN夹子照片，这样IPAD夹起来还能配合Dust Display作为Macbook的扩展屏！</p>
<p><img src="http://ooo.0o0.ooo/2016/09/30/57eddea316f91.jpg" alt=""></p>
<p>这夹子叫“Ten One Design Mountie”<br>购买链接：<a href="https://www.amazon.cn/gp/product/B00S74HI1K/ref=oh_aui_detailpage_o06_s00?ie=UTF8&amp;psc=1" target="_blank" rel="external">Amazon</a> 具体的样子看这 <a href="https://www.v2ex.com/t/247157" target="_blank" rel="external">v2ex</a><br>夹子的力道是分摊的，对不同型号的设备也提供的不同的橡胶替换，总得来说没想象中那么脆弱。</p>
<p>对于笔记来说，iPad作为一个过渡产品，我建议应用在考虑实用的同时，兼顾考虑跨平台这一方面，同样应用跨平台，说明也能在电脑端编辑你的批注，扩展更多的功能等。中间的云储存按自己需求选择坚果云、百度云或dropbox。重点是稳定，易用！</p>
<p>非常感谢你读到这里，如果有什么见解和疑问也请在评论提出，我进行会逐渐补充点图片和加入自己对iPad学习的想法，充分利用iPad Pro改变自己。</p>
<p>最后</p>
<p><strong>不要安装聊天应用！！！<br>不要安装聊天应用！！！<br>不要安装聊天应用！！！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/09/30/57ee011831539.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前几天趁着Apple教育优惠买了9.7inch的iPad Pro 附送耳机，还买了个smart cover。昨天在香港剁手了Apple pencil，对深挖iPad Pro潜能做了些探索，在这里总结下。&lt;br&gt;
    
    </summary>
    
    
      <category term="iPad" scheme="http://frankorz.com/tags/iPad/"/>
    
  </entry>
  
  <entry>
    <title>iOS学习资源集合</title>
    <link href="http://frankorz.com/2016/09/24/iOS-learning-source/"/>
    <id>http://frankorz.com/2016/09/24/iOS-learning-source/</id>
    <published>2016-09-24T00:11:01.000Z</published>
    <updated>2017-05-06T02:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://ooo.0o0.ooo/2016/09/30/57ee03bfdc293.jpg" alt=""></p>
<p>总结个人在学习 iOS 的过程中遇到的精品资源，包含书籍、视频、网站等，一切等待我去探索的好物，主要以Swift 3.0为主。<br><a id="more"></a></p>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><table>
<thead>
<tr>
<th>视频</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://itunes.apple.com/us/course/developing-ios-10-apps-swift/id1198467120" target="_blank" rel="external">Developing iOS 10 Apps with Swift</a></td>
<td>斯坦福白胡子老爷爷最新的 iOS10 和 Swift 3.0 课程。创建于 2017年1月24日，预计时长9周。</td>
</tr>
<tr>
<td><a href="https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961" target="_blank" rel="external">Developing iOS 9 Apps with Swift</a></td>
<td>斯坦福白胡子老爷爷的 iOS9 和 Swift 课程，现在 <a href="https://github.com/SwiftGGTeam/Developing-iOS-9-Apps-with-Swift" target="_blank" rel="external">GitHub</a> 只翻译到第三节课。</td>
</tr>
<tr>
<td><a href="https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099" target="_blank" rel="external">Developing iOS 8 Apps with Swift</a></td>
<td>斯坦福白胡子老爷爷的 iOS8 和 Swift 课程，已经翻译完成 <a href="https://github.com/SwiftGGTeam/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="external">GitHub</a></td>
</tr>
<tr>
<td><a href="http://www.swiftv.cn" target="_blank" rel="external">SwiftV课堂</a></td>
<td>国内一个Swift视频学习站</td>
</tr>
<tr>
<td><a href="http://www.pomo.tv" target="_blank" rel="external">pomo.tv</a></td>
<td>国外一个收集关于Mac、iOS 和 Swift视频的网站</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/playlist?list=PLgwNtYvZGv9STGDSx_knjYyzS7XzmpK84" target="_blank" rel="external">Principle UI/UX Animation Tutorials</a></td>
<td>SketchTV 在 Youtube 上录制的 Principle (交互原型设计软件) 视频，Principle 相关<a href="http://principleux.com/principle-chinese-document/" target="_blank" rel="external">中文文档</a>，<a href="http://principleformac.com/tutorial.html" target="_blank" rel="external">官方文档</a></td>
</tr>
</tbody>
</table>
<h3 id="YouTube-频道"><a href="#YouTube-频道" class="headerlink" title="YouTube 频道"></a>YouTube 频道</h3><table>
<thead>
<tr>
<th>频道名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.youtube.com/channel/UCysEngjfeIYapEER9K8aikw" target="_blank" rel="external">Brian Advent</a></td>
<td>Follow me around and learn iOS and macOS Development by examples.</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UC-d1NWv5IWtIkfH47ux4dWA" target="_blank" rel="external">The Swift Guy</a></td>
<td>On this channel I put out tutorials, and other types of videos that are relevant to the Swift programming language.</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UC2D6eRvCeMtcF5OGHf1-trw" target="_blank" rel="external">CodeWithChris</a></td>
<td>Learn how to make an app with Swift and Xcode and how to turn your app idea into a reality!</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UCDIBBmkZIB2hjBsk1hUImdA" target="_blank" rel="external">Jared Davidson</a></td>
<td>IOS Developer / How to Make Apps</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA" target="_blank" rel="external">Lets Build That App</a></td>
<td>I’ll do my best to teach you how to build working apps from the AppStore, i.e. YouTube, Facebook, FB Messenger, etc.</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UChH6WbyYeX0INJjrK2-6WSg" target="_blank" rel="external">Mark Moeykens</a></td>
<td>Free iOS, Xcode and Swift tutorials!</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UCrhO60YNOqODpMPRQZj2NQg" target="_blank" rel="external">Harry Ng</a></td>
<td>主要是 OSX 的教程</td>
</tr>
</tbody>
</table>
<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><table>
<thead>
<tr>
<th>书名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://gg.swiftguide.cn" target="_blank" rel="external">中文版 Apple 官方 Swift 教程《The Swift Programming Language》</a></td>
<td>国人发起的官方教程翻译，目前更新到Swift 3.0 <a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="external">Github</a> <a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html" target="_blank" rel="external">Start Developing iOS Apps (Swift)</a></td>
</tr>
<tr>
<td><a href="https://www.raywenderlich.com/store/ios-10-by-tutorials" target="_blank" rel="external">iOS 10 by tutorials</a></td>
<td>raywenderlich精品书籍，付费</td>
</tr>
<tr>
<td><a href="https://www.appcoda.com/swift/" target="_blank" rel="external">Beginning iOS 10 Programming with Swift</a></td>
<td>appcoda精品书籍，付费</td>
</tr>
<tr>
<td><a href="http://www.appcoda.com.tw/books/" target="_blank" rel="external">iOS 10 App 程式設計實力超進化實戰攻略</a></td>
<td>和楼上电子书对应的湾湾翻译版</td>
</tr>
<tr>
<td><a href="https://www.bignerdranch.com/we-write/ios-programming/" target="_blank" rel="external">iOS Programming: The Big Nerd Ranch Guide 5th Edition</a></td>
<td>The Big Nerd Ranch Guide 推崇困难式学习，该系列书的第四版中译获得豆瓣9.0的高分，目前第六版更新到iOS 10和Swift 3.0，十分值得学习，付费</td>
</tr>
<tr>
<td><a href="https://itunes.apple.com/us/book/core-image-for-swift/id1073029980?mt=13" target="_blank" rel="external">Core Image for Swift</a></td>
<td>学习 Core Image 框架，付费</td>
</tr>
<tr>
<td><a href="https://book.douban.com/subject/26919791/" target="_blank" rel="external">Beginning iPhone Development with Swift 3 Exploring the iOS SDK</a></td>
<td>Apress精品书，本系列中译名为精通iOS编程。这版本讲iOS 10和Swift 3.0，付费</td>
</tr>
<tr>
<td><a href="https://www.gitbook.com/book/zsisme/ios-/details" target="_blank" rel="external">ios核心动画高级技巧</a></td>
<td><a href="http://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques" target="_blank" rel="external">iOS Core Animation: Advanced Techniques</a>中文译本，由 OC 编写</td>
</tr>
<tr>
<td><a href="https://www.gitbook.com/book/zonble/kkbox-ios-dev/details" target="_blank" rel="external">KKBOX iOS/Mac OS X 基本開發教材</a></td>
<td>這份教材是為了 KKBOX iOS/Mac OS X 開發部門的新人訓練所設計，目的是培養 出可以開發、維護 KKBOX 的 iOS 與 Mac OS X 版本，以及我們其他軟體產品的工程師。本书由 OC 编写</td>
</tr>
<tr>
<td><a href="https://gumroad.com/l/JnWS" target="_blank" rel="external">A GUIDE TO IOS ANIMATION 2.0</a></td>
<td>一本关于 iOS 动画的独具匠心的交互式电子书，付费</td>
</tr>
<tr>
<td><a href="https://www.hackingwithswift.com" target="_blank" rel="external">Hacking With Swift</a></td>
<td>免费在线 Swift 教程</td>
</tr>
<tr>
<td><a href="https://designcode.io" target="_blank" rel="external">Design+Code</a></td>
<td>学习 iOS 开发设计最好的书籍，付费</td>
</tr>
<tr>
<td><a href="https://designthencode.com" target="_blank" rel="external">Design Then Code</a></td>
<td>学会设计和开发 iOS 应用，付费。<a href="https://github.com/Cloudox/Motion-Design-for-iOS" target="_blank" rel="external">中文翻译</a></td>
</tr>
</tbody>
</table>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table>
<thead>
<tr>
<th>网站名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">Swift Resources</a></td>
<td>苹果官方为开发者提供的 Swift 学习资源</td>
</tr>
<tr>
<td><a href="http://swift.gg" target="_blank" rel="external">SwiftGG</a></td>
<td>国内走心的Swift翻译组，翻译了很多高质量文章</td>
</tr>
<tr>
<td><a href="https://swift.org/" target="_blank" rel="external">Swift 官方网站</a></td>
<td>Swift的开源阶段成果和使用指导</td>
</tr>
<tr>
<td><a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">swift-evolution</a></td>
<td>Swift改进的最新进度</td>
</tr>
<tr>
<td><a href="https://www.raywenderlich.com" target="_blank" rel="external">Ray Wenderlich</a></td>
<td>专注苹果开发，创造大量有价值的开发资源如文章、视频、播客、书籍等。<a href="https://www.raywenderlich.com/category/swift" target="_blank" rel="external">Swift文章区</a> <a href="https://www.raywenderlich.com/category/ios" target="_blank" rel="external">iOS文章区</a></td>
</tr>
<tr>
<td><a href="http://www.learnswift.tips/" target="_blank" rel="external">LearnSwift.tips</a></td>
<td>国外一个学习Swift资源列表网站</td>
</tr>
<tr>
<td><a href="https://www.objc.io" target="_blank" rel="external">objc</a></td>
<td>objc.io是一个专门为iOS和OS X开发者提供的深入讨论技术的平台,文章含金量很高。</td>
</tr>
<tr>
<td><a href="https://www.objccn.io" target="_blank" rel="external">objc中国</a></td>
<td>objc翻译组，<a href="https://github.com/objccn/articles" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td><a href="http://www.appcoda.com.tw/" target="_blank" rel="external">APPCoda 台湾</a></td>
<td><a href="http://www.appcoda.com" target="_blank" rel="external">APPCoda</a> 中教程的翻译，APPCoda 也是专注苹果开发的网站，有自己的电子书和开发教学文章，<a href="http://www.appcoda.com.tw/feed/" target="_blank" rel="external">RSS</a></td>
</tr>
<tr>
<td><a href="http://nshipster.cn" target="_blank" rel="external">NSHipster翻译</a></td>
<td>NSHipster 关注被忽略的 Objective-C、Swift 和 Cocoa 特性，这里是NSHipster的翻译组网站</td>
</tr>
<tr>
<td><a href="http://www.cocoachina.com" target="_blank" rel="external">CocoChina</a></td>
<td>国内苹果开发中文社区</td>
</tr>
<tr>
<td><a href="http://ios.jobbole.com" target="_blank" rel="external">伯乐在线</a></td>
<td>国内分享iOS和Swift开发的网站</td>
</tr>
</tbody>
</table>
<h3 id="各大iOS资源合集"><a href="#各大iOS资源合集" class="headerlink" title="各大iOS资源合集"></a>各大iOS资源合集</h3><table>
<thead>
<tr>
<th>Github</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/insidegui/WWDC" target="_blank" rel="external">WWDC</a></td>
<td>非官方的 WWDC app for macOS</td>
</tr>
<tr>
<td><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">trip-to-iOS</a></td>
<td>6000+star的iOS学习资料整理</td>
</tr>
<tr>
<td><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">SwiftGuide</a></td>
<td>1W+star的swift语言学习资源指南</td>
</tr>
<tr>
<td><a href="https://github.com/Tim9Liu9/TimLiu-iOS" target="_blank" rel="external">TimLiu-iOS</a></td>
<td>4000+star的iOS开发常用三方库、插件、知名博客汇总</td>
</tr>
<tr>
<td><a href="https://github.com/jobbole/awesome-ios-cn" target="_blank" rel="external">awesome-ios-cn</a></td>
<td>1W5+star的 <a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="external">awesome-ios</a> 中译版</td>
</tr>
<tr>
<td><a href="https://github.com/matteocrippa/awesome-swift" target="_blank" rel="external">awesome-swift</a></td>
<td>9000+star的Swift资源集合</td>
</tr>
<tr>
<td><a href="https://github.com/dkhamsing/open-source-ios-apps" target="_blank" rel="external">open-source-ios-apps</a></td>
<td>1W+star的开源iOS应用集合</td>
</tr>
<tr>
<td><a href="https://github.com/raywenderlich/swift-algorithm-club" target="_blank" rel="external">swift-algorithm-club</a></td>
<td>8000+star的Swift算法和数据结构集合，由raywenderlich创建。</td>
</tr>
<tr>
<td><a href="https://github.com/larrynatalicio/15DaysofAnimationsinSwift" target="_blank" rel="external">15DaysofAnimationsinSwift</a></td>
<td>2000+star学习用swift写动画的项目</td>
</tr>
<tr>
<td><a href="https://www.v2ex.com/t/309549" target="_blank" rel="external">iOS 开发学习笔记</a></td>
<td>OneNote笔记，onepkg格式可在win版导入OneNote，笔记适合刚入门的 iOS 开发或有 C 、 OC 基础的同学。</td>
</tr>
<tr>
<td><a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="external">iOSBlogCN</a></td>
<td>中文 iOS/Mac 开发博客列表</td>
</tr>
<tr>
<td><a href="https://github.com/Draveness/iOS-Source-Code-Analyze" target="_blank" rel="external">iOS-Source-Code-Analyze</a></td>
<td>深入解析 iOS 开源项目 <a href="http://draveness.me" target="_blank" rel="external">http://draveness.me</a></td>
</tr>
</tbody>
</table>
<h3 id="相关的教程"><a href="#相关的教程" class="headerlink" title="相关的教程"></a>相关的教程</h3><table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://pomax.github.io/bezierinfo/" target="_blank" rel="external">A Primer on Bézier Curves</a></td>
<td>关于贝塞尔曲线的教程</td>
</tr>
<tr>
<td><a href="https://github.com/yrq110/some-ios-tutorials-with-swift" target="_blank" rel="external">some-ios-tutorials-with-swift</a></td>
<td><a href="https://github.com/yrq110" target="_blank" rel="external">yrq110</a> 翻译的一些使用 Swift 的 iOS 教程 <a href="https://yrq110.gitbooks.io/some_ios_tutorials_with_swift/content/" target="_blank" rel="external">Gitbook</a></td>
</tr>
<tr>
<td><a href="http://t.swift.gg/d/2-rxswift" target="_blank" rel="external">RxSwift 系列教程</a></td>
<td>靛青K 发布的 RxSwift 系列教程</td>
</tr>
<tr>
<td><a href="https://www.shinobicontrols.com/blog/ios-10-day-by-day-index" target="_blank" rel="external">iOS10 Day-by-Day</a></td>
<td>一个介绍 iOS 10 API 的系列教程</td>
</tr>
<tr>
<td><a href="https://www.shinobicontrols.com/blog/ios9-day-by-day-index" target="_blank" rel="external">iOS9 Day-by-Day</a></td>
<td>一个介绍 iOS 9 API 的系列教程</td>
</tr>
<tr>
<td><a href="https://andrewmika.gitbooks.io/xcode-server-and-continuous-integration-guide-cn/content/" target="_blank" rel="external">《Xcode Server and Continuous Integration Guide》中文版</a></td>
<td>使用Xcode Server进行持续集成，<a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/#//apple_ref/doc/uid/TP40013292-CH1-SW1" target="_blank" rel="external">About Continuous Integration in Xcode</a>的翻译，<a href="https://www.gitbook.com/book/andrewmika/-xcode-server-and-continuous-integration-guide/details" target="_blank" rel="external">GitBook地址</a></td>
</tr>
<tr>
<td><a href="https://github.com/futurice/ios-good-practices" target="_blank" rel="external">ios-good-practices</a></td>
<td>iOS 开发最佳实践</td>
</tr>
<tr>
<td><a href="https://developer.apple.com/ios/human-interface-guidelines/overview/design-principles/" target="_blank" rel="external">iOS Human Interface Guidelines</a></td>
<td>iOS 人机界面指南，<a href="https://github.com/Cloudox/iOS-Human-Interface-Guidelines" target="_blank" rel="external">中文翻译</a></td>
</tr>
<tr>
<td><a href="https://github.com/raywenderlich/swift-style-guide" target="_blank" rel="external">Swift编码规范</a></td>
<td>来自 Ray Wenderlich 的 Swift 编码规范</td>
</tr>
<tr>
<td><a href="https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/" target="_blank" rel="external">Xcode Markup Formatting</a></td>
<td>学习 Xcode 中如何使用 Markup Formatting</td>
</tr>
<tr>
<td><a href="https://askwonder.com/q/quartz-composer-55723eb43dcda4201a12cbc4" target="_blank" rel="external">Quartz Composer学习</a></td>
<td>QC 学习路线，关于 iOS 的一些动态交互</td>
</tr>
<tr>
<td><a href="https://zsisme.gitbooks.io/ios-/content/" target="_blank" rel="external">iOS 核心动画高级技巧</a></td>
<td><a href="http://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques" target="_blank" rel="external">iOS Core Animation: Advanced Techniques</a> 的译本，由 OC 编写</td>
</tr>
<tr>
<td><a href="https://github.com/xitu/gold-miner/blob/master/TODO/google.interview.university.md#计算机科学课程" target="_blank" rel="external">Google Interview University</a></td>
<td>一套完整的学习手册帮助自己准备 Google 的面试</td>
</tr>
</tbody>
</table>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>我关注的一些 RSS 源，博客方面关注较少。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>Feed 源</th>
</tr>
</thead>
<tbody>
<tr>
<td>Swift – Ray Wenderlich</td>
<td><a href="https://www.raywenderlich.com/category/swift/feed" target="_blank" rel="external">https://www.raywenderlich.com/category/swift/feed</a></td>
</tr>
<tr>
<td>AppCoda 台湾</td>
<td><a href="http://www.appcoda.com.tw/feed/" target="_blank" rel="external">http://www.appcoda.com.tw/feed/</a></td>
</tr>
<tr>
<td>Big Nerd Ranch</td>
<td><a href="https://www.bignerdranch.com/rss" target="_blank" rel="external">https://www.bignerdranch.com/rss</a></td>
</tr>
<tr>
<td>Swift GG 翻译组</td>
<td><a href="http://swift.gg/atom.xml" target="_blank" rel="external">http://swift.gg/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://mobilefrontier.github.io" target="_blank" rel="external">移动开发前线</a></td>
<td><a href="http://mobilefrontier.github.io/index.xml" target="_blank" rel="external">http://mobilefrontier.github.io/index.xml</a></td>
</tr>
<tr>
<td><a href="https://medium.com/swift-programming/all" target="_blank" rel="external">Medium-Swift Programming</a></td>
<td><a href="https://medium.com/feed/swift-programming/" target="_blank" rel="external">https://medium.com/feed/swift-programming/</a></td>
</tr>
<tr>
<td><a href="https://medium.com/ios-os-x-development/all" target="_blank" rel="external">Medium-iOS App Development</a></td>
<td><a href="https://medium.com/feed/ios-os-x-development/" target="_blank" rel="external">https://medium.com/feed/ios-os-x-development/</a></td>
</tr>
<tr>
<td>掘金-iOS</td>
<td><a href="https://api.prprpr.me/xitu/ios" target="_blank" rel="external">https://api.prprpr.me/xitu/ios</a></td>
</tr>
<tr>
<td>IOS – 伯乐在线</td>
<td><a href="http://ios.jobbole.com/feed/" target="_blank" rel="external">http://ios.jobbole.com/feed/</a></td>
</tr>
<tr>
<td>CocoaChina</td>
<td><a href="http://www.cocoachina.com/cms/rss.php" target="_blank" rel="external">http://www.cocoachina.com/cms/rss.php</a></td>
</tr>
<tr>
<td><a href="http://mrpeak.cn/" target="_blank" rel="external">MrPeak杂货铺</a></td>
<td><a href="http://mrpeak.cn/feed.xml" target="_blank" rel="external">http://mrpeak.cn/feed.xml</a></td>
</tr>
<tr>
<td><a href="http://onevcat.com/" target="_blank" rel="external">OneV’s Den</a></td>
<td><a href="https://onevcat.com/feed.xml" target="_blank" rel="external">https://onevcat.com/feed.xml</a></td>
</tr>
<tr>
<td><a href="http://gank.io" target="_blank" rel="external">干货集中营</a></td>
<td><a href="http://gank.io/feed" target="_blank" rel="external">http://gank.io/feed</a></td>
</tr>
</tbody>
</table>
<p>关于 Medium 上的文章 RSS 可以参考 <a href="http://webapps.stackexchange.com/questions/85611/rss-atom-feed-for-medium-com-blog-tag" target="_blank" rel="external">RSS/Atom feed for medium.com blog tag</a>。</p>
<!--### 工具 -->
<!--(写的不全又舍不得删，就这样吧。)

| 名称 | 简介 |
| --- | --- |
| [RAP](http://rapapi.net/) | Web接口管理工具，开源免费，接口自动化，MOCK数据自动生成，自动化测试，企业级管理。 |
| [iOS-Images-Extractor](https://github.com/devcxm/iOS-Images-Extractor) | 提取iOS应用图片 |
| [接口参考](https://www.zhihu.com/question/39479153) | 知乎上关于接口资源的回答 |
| [OAuthSwift](https://github.com/OAuthSwift/OAuthSwift) | Swift OAuth 库 |
| [Alamofire](https://github.com/Alamofire/Alamofire) | Elegant HTTP Networking in Swift |-->
<p>&lt;未完待续&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ooo.0o0.ooo/2016/09/30/57ee03bfdc293.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结个人在学习 iOS 的过程中遇到的精品资源，包含书籍、视频、网站等，一切等待我去探索的好物，主要以Swift 3.0为主。&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://frankorz.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Swift" scheme="http://frankorz.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://frankorz.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://frankorz.com/tags/Objective-C/"/>
    
  </entry>
  
</feed>
